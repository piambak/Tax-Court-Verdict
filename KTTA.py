{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/piambak/Tax-Court-Verdict/blob/main/KTTA.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xOVSbT5iLcl1"
      },
      "source": [
        "This source code was used at the Faras Akbar's KTTA"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8RvU1ev1EyvI"
      },
      "source": [
        "# Importing libraries that are planned to be used in the process"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 159,
      "metadata": {
        "id": "LQiYJCRqKdiq"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import lightgbm as lgb\n",
        "\n",
        "\n",
        "from xgboost import XGBClassifier\n",
        "from lightgbm import LGBMClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix, classification_report\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.datasets import make_regression\n",
        "\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from imblearn.over_sampling import RandomOverSampler\n",
        "from collections import Counter\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "import re\n",
        "import nltk\n",
        "\n",
        "import os"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nf3tvxtVFHqr"
      },
      "source": [
        "# Reading the dataset, dropping null values and creating a copy of the dataframe for the modelling process"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 160,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "id": "LC02Z1xmLzTO",
        "outputId": "d171d966-b36f-46cb-8f6d-6a079859bd15"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             putusan      jenis_sengketa   jenis_pajak  tahun_pajak  \\\n",
              "0  321/B/PK/PJK/2023  Peninjauan Kembali   PPN & PPnBM         2016   \n",
              "1  512/B/PK/PJK/2023  Peninjauan Kembali  PPh Pasal 22         2016   \n",
              "2  253/B/PK/PJK/2023  Peninjauan Kembali     PPh Badan         2017   \n",
              "3  304/B/PK/PJK/2023  Peninjauan Kembali   PPN & PPnBM         2016   \n",
              "4  322/B/PK/PJK/2023  Peninjauan Kembali   PPN & PPnBM         2017   \n",
              "\n",
              "                           hasil_putusan  tahun_putusan  \\\n",
              "0  Menolak permintaan peninjauan kembali           2023   \n",
              "1  Menolak permintaan peninjauan kembali           2023   \n",
              "2  Menolak permintaan peninjauan kembali           2023   \n",
              "3  Menolak permintaan peninjauan kembali           2023   \n",
              "4  Menolak permintaan peninjauan kembali           2023   \n",
              "\n",
              "                                            teks_raw  \\\n",
              "0  PUTUSAN MAHKAMAH AGUNG 321/B/PK/PJK/2023 DEMI ...   \n",
              "1  PUTUSAN MAHKAMAH AGUNG 512/B/PK/PJK/2023 DEMI ...   \n",
              "2  PUTUSAN MAHKAMAH AGUNG 253/B/PK/PJK/2023 DEMI ...   \n",
              "3  PUTUSAN MAHKAMAH AGUNG 304/B/PK/PJK/2023 DEMI ...   \n",
              "4  PUTUSAN MAHKAMAH AGUNG 322/B/PK/PJK/2023 DEMI ...   \n",
              "\n",
              "                                           teks_html  \\\n",
              "0  <h1 style=\"text-align:center\"><strong>PUTUSAN ...   \n",
              "1  <h1 style=\"text-align:center\"><strong>PUTUSAN ...   \n",
              "2  <h1 style=\"text-align:center\"><strong>PUTUSAN ...   \n",
              "3  <h1 style=\"text-align:center\"><strong>PUTUSAN ...   \n",
              "4  <h1 style=\"text-align:center\"><strong>PUTUSAN ...   \n",
              "\n",
              "                        ketua  \n",
              "0   Dr. H. Yulius, S.H., M.H.  \n",
              "1   Dr. H. Yulius, S.H., M.H.  \n",
              "2   Dr. H. Yulius, S.H., M.H.  \n",
              "3   Dr. H. Yulius, S.H., M.H.  \n",
              "4  Dr. H. Yulius, S.H., M.H.   "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-55cecf91-54e6-41f8-b619-e20bf7bca4c5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>putusan</th>\n",
              "      <th>jenis_sengketa</th>\n",
              "      <th>jenis_pajak</th>\n",
              "      <th>tahun_pajak</th>\n",
              "      <th>hasil_putusan</th>\n",
              "      <th>tahun_putusan</th>\n",
              "      <th>teks_raw</th>\n",
              "      <th>teks_html</th>\n",
              "      <th>ketua</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>321/B/PK/PJK/2023</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>PPN &amp; PPnBM</td>\n",
              "      <td>2016</td>\n",
              "      <td>Menolak permintaan peninjauan kembali</td>\n",
              "      <td>2023</td>\n",
              "      <td>PUTUSAN MAHKAMAH AGUNG 321/B/PK/PJK/2023 DEMI ...</td>\n",
              "      <td>&lt;h1 style=\"text-align:center\"&gt;&lt;strong&gt;PUTUSAN ...</td>\n",
              "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>512/B/PK/PJK/2023</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>PPh Pasal 22</td>\n",
              "      <td>2016</td>\n",
              "      <td>Menolak permintaan peninjauan kembali</td>\n",
              "      <td>2023</td>\n",
              "      <td>PUTUSAN MAHKAMAH AGUNG 512/B/PK/PJK/2023 DEMI ...</td>\n",
              "      <td>&lt;h1 style=\"text-align:center\"&gt;&lt;strong&gt;PUTUSAN ...</td>\n",
              "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>253/B/PK/PJK/2023</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>PPh Badan</td>\n",
              "      <td>2017</td>\n",
              "      <td>Menolak permintaan peninjauan kembali</td>\n",
              "      <td>2023</td>\n",
              "      <td>PUTUSAN MAHKAMAH AGUNG 253/B/PK/PJK/2023 DEMI ...</td>\n",
              "      <td>&lt;h1 style=\"text-align:center\"&gt;&lt;strong&gt;PUTUSAN ...</td>\n",
              "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>304/B/PK/PJK/2023</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>PPN &amp; PPnBM</td>\n",
              "      <td>2016</td>\n",
              "      <td>Menolak permintaan peninjauan kembali</td>\n",
              "      <td>2023</td>\n",
              "      <td>PUTUSAN MAHKAMAH AGUNG 304/B/PK/PJK/2023 DEMI ...</td>\n",
              "      <td>&lt;h1 style=\"text-align:center\"&gt;&lt;strong&gt;PUTUSAN ...</td>\n",
              "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>322/B/PK/PJK/2023</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>PPN &amp; PPnBM</td>\n",
              "      <td>2017</td>\n",
              "      <td>Menolak permintaan peninjauan kembali</td>\n",
              "      <td>2023</td>\n",
              "      <td>PUTUSAN MAHKAMAH AGUNG 322/B/PK/PJK/2023 DEMI ...</td>\n",
              "      <td>&lt;h1 style=\"text-align:center\"&gt;&lt;strong&gt;PUTUSAN ...</td>\n",
              "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55cecf91-54e6-41f8-b619-e20bf7bca4c5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-55cecf91-54e6-41f8-b619-e20bf7bca4c5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-55cecf91-54e6-41f8-b619-e20bf7bca4c5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6d5a0585-d23e-4b13-91e9-c89f95ba7b62\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6d5a0585-d23e-4b13-91e9-c89f95ba7b62')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6d5a0585-d23e-4b13-91e9-c89f95ba7b62 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 4744,\n  \"fields\": [\n    {\n      \"column\": \"putusan\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3475,\n        \"samples\": [\n          \"PUT-47794/PP/M.III/16/2013\",\n          \"PUT-60107/PP/M.IVB/15/2015\",\n          \"4218/B/PK/PJK/2022\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"jenis_sengketa\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Peninjauan Kembali\",\n          \"Banding\",\n          \"Gugatan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"jenis_pajak\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"PPN & PPnBM\",\n          \"PPh Pasal 22\",\n          \"PPh Pasal 26\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tahun_pajak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1996,\n        \"max\": 2106,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          2018,\n          2022,\n          2019\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hasil_putusan\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"Permintaan dinyatakan tidak dapat diterima\",\n          \"Menolak permintaan peninjauan kembali\",\n          \"Mengabulkan permohonan keberatan hak uji materiil\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tahun_putusan\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2008,\n        \"max\": 2023,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          2023,\n          2022,\n          2018\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"teks_raw\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3475,\n        \"samples\": [\n          \"RISALAH PUTUSAN PENGADILAN PAJAK PUT-47794/PP/M.III/16/2013 JENIS PAJAK PPN & PPnBM TAHUN/MASA PAJAK Juli 2009 POKOK SENGKETA pengajuan banding terhadap: MENURUT TERBANDING bahwa adjustment atas jumlah pajak masukan menjadi lebih besar tidak dapat diperhitungkan sebagai pajak masukan yang dapat dikreditkan, hal ini sesuai ketentuan Pasal 9 ayat (8) huruf i Undang-Undang Nomor 8 Tahun 1983 sebagaimana telah diubah dengan Undang-Undang Nomor 18 Tahun 2000 tentang Pajak Pertambahan Nilai Barang dan Jasa dan Pajak Penjualan atas Barang Mewah. Sehingga tindakan Terbanding dengan tidak memperhitungkan adjustment atas pajak masukan sebagai pajak masukan yang dapat dikreditkan sudah tepat. MENURUT PEMOHON BANDING bahwa terkait kesalahan pengisian SPT Masa PPN Masa Juli 2009, dalam proses pemeriksaan namun sebelum Surat Pemberitahuan Hasil Pemeriksaan (SPHP) Nomor: PHP-353/WPJ.07/KP.0700/2010 yang diterbitkan tanggal 17 Desember 2010, Pemohon, dengan kesadaran sendiri, dan berdasarkan ketentuan Pasal 8 ayat (4) Undang-Undang Nomor 28 Tahun 2007, mengungkapkan adanya Ketidakbenaran dalam Pengisian Surat Pemberitahuan PPN Masa Juli 2009 yang disampaikan sesuai surat Nomor: J-301/TC/VII/2010 tertanggal 19 Juli 2010 yang diterima oleh KPP Badora Satu pada tanggal 20 Juli 2010, dengan perhitungan meliputi: MENURUT MAJELIS bahwa yang menjadi pokok sengketa banding adalah penerbitan Keputusan Terbanding Nomor: KEP-489/WPJ.07/2012 tanggal 07 Maret 2012, yang menolak Surat Keberatan Pemohon Banding Nomor: J-030/TC/IV/11 tanggal 05 April 2011 atas Surat Ketetapan Pajak Lebih Bayar Pajak Pertambahan Nilai Masa Pajak Juli 2009 Nomor: 00002/407/09/053/11 tanggal 07 Januari 2011, yang tidak disetujui oleh Pemohon Banding; bahwa Terbanding menerbitkan Surat Ketetapan Pajak Lebih Bayar Pajak Pertambahan Nilai Masa Pajak Juli 2009 Nomor: 00002/407/09/053/11 tanggal 07 Januari 2011, sebesar lebih bayar Rp2.161.936.255,00 berdasarkan SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009, sedangkan Pemohon Banding telah menyampaikan Surat Pengungkapan Ketidakbenaran SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009 melalui Surat Nomor: J-301/TC/VII/2010, tanggal 19 Juli 2010 yang diterima Terbanding tanggal 20 Juli 2010, di mana perhitungan pajak terutang menjadi lebih bayar Rp7.253.637.609,00; bahwa Terbanding tidak mempertimbangkan data dan informasi dalam Surat Pengungkapan Ketidakbenaran SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009 Nomor: J-301/TC/VII/2010, tanggal 19 Juli 2010, karena dianggap tidak memenuhi ketentuan Pasal 8 ayat (4) Undang-Undang Nomor 6 Tahun 1983 tentang Ketentuan Umum dan Tata Cara Perpajakan sebagaimana telah diubah terakhir dengan Undang-Undang Nomor 16 Tahun 2009, serta Pasal 7 dan Pasal 8 Peraturan Pemerintah Nomor 80 Tahun 2007; bahwa menurut Terbanding, penggunaan Pasal 8 ayat (4) Undang-Undang Nomor Tahun 1983 tentang Ketentuan Umum dan Tata Cara Perpajakan sebagaimana telah diubah terakhir dengan Undang-Undang Nomor 16 Tahun 2009 hanya untuk Kurang Bayar, sehingga harus dilampirkan Surat Setoran Pajak (SSP); bahwa Pemohon Banding menyampaikan Surat Pengungkapan Ketidakbenaran Pengisian SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009 dengan Surat Nomor: J-301/TC/VII/2010, tanggal 19 Juli 2010, yang dilampiri dengan SPT Masa Pajak Pertambahan Nilai Masa Juli 2009 yang diterima oleh Terbanding tanggal 20 Juli 2010, sedangkan Surat Pemberitahuan Hasil Pemeriksaan (SPHP) Terbanding Nomor: PHP-353/WPJ.07/KP.0700/2010 tanggal 17 Desember 2010 dan diterima oleh Pemohon Banding tanggal 20 Desember 2010. sehingga penyampaian Surat Pengungkapan Ketidakbenaran Pengisian SPT Masa Pajak Pertambahan Nilai tersebut masih dalam jangka waktu yang diperbolehkan berdasarkan peraturan perundang-undangan perpajakan; bahwa menurut penelitian Terbanding dalam Surat Uraian Banding Nomor: S-3621/WPJ.07/2012 tanggal 13 Agustus 2012, berdasarkan Surat Pengungkapan Ketidakbenaran Pengisian SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009 dapat diketahui hal-hal sebagai berikut: bahwa pada saat proses pemeriksaan Pemohon Banding menyampaikan Surat Pengungkapan Ketidakbenaran atas SPT Masa PPN Juli 2009 melalui surat Nomor: J-301/TC/VII/2010 tanggal 19 Juli 2010. Surat Pengungkapan Ketidakbenaran tersebut disampaikan Pemohon Banding sebelum diterimanya Surat Pemberitahuan Hasil Pemeriksaan; bahwa dalam Surat Pengungkapan Ketidakbenaran sebagaimana dimaksud butir b disebutkan bahwa jumlah pajak masukan yang dapat diperhitungkan untuk Masa Pajak Juli 2009 menurut Pemohon Banding adalah sebesar Rp7.253.637.609,00 (lebih besar dari yang tercantum dalam SPT Masa PPN Juli 2009); bahwa surat pengungkapan ketidakbenaran SPT PPN Masa Pajak Juli 2009 yang disampaikan Pemohon Banding pada saat pemeriksaan diperlakukan sebagai tambahan informasi atau data bagi Terbanding sebelum menyampaikan Surat Pemberitahuan Hasil Pemeriksaan kepada Pemohon Banding; bahwa sesuai dengan Pasal 8 ayat (4) Undang-Undang Nomor 6 Tahun 1983 tentang Ketentuan Umum dan Tata Cara Perpajakan sebagaimana telah diubah terakhir dengan Undang-Undang Nomor 16 Tahun 2009, walaupun Direktur Jenderal Pajak belum menerbitkan Surat Ketetapan Pajak, Wajib Pajak dengan kesadaran sendiri dapat mengungkapkan dalam laporan tersendiri tentang ketidakbenaran pengisian Surat Pemberitahuan yang telah disampaikan sesuai keadaan yang sebenarnya, yang dapat mengakibatkan: a. pajak-pajak yang masih harus dibayar menjadi lebih besar atau lebih kecil; b. rugi berdasarkan ketentuan perpajakan menjadi lebih kecil atau lebih besar; c. jumlah harta menjadi lebih besar atau lebih kecil; atau d. jumlah modal menjadi lebih besar atau lebih kecil dan proses pemeriksaan tetap dilanjutkan. bahwa sesuai dengan ketentuan Pasal 6 ayat (3) Peraturan Pemerintah Nomor 80 Tahun 2007, dan Pasal 26 ayat (3) Peraturan Menteri Keuangan Nomor: 199/PMK.03/2007 ditegaskan bahwa: \\u201cPengungkapan dalam laporan tersendiri tentang ketidakbenaran pengisian Surat Pemberitahuan sebagaimana dimaksud pada ayat (1) oleh Pemeriksa Pajak diperlakukan sebagai tambahan informasi atau data dan menjadi bahan pertimbangan bagi Pemeriksa Pajak sebelum menyampaikan Surat Pemberitahuan Hasil Pemeriksaan (SPHP) kepada Wajib Pajak\\u201d; bahwa berdasarkan fakta dan alat bukti yang terungkap dalam persidangan serta peraturan perundang-undangan perpajakan yang berlaku, Majelis menilai dan berkeyakinan sebagai berikut: 1. bahwa Pemohon Banding telah mengungkapkan adanya ketidakbenaran dalam pengisian Surat Pemberitahuan Pajak Pertambahan Nilai Masa Pajak Juli 2009 sebagaimana dimaksud dalam ketentuan Pasal 8 ayat (4) Undang-Undang Nomor 6 Tahun 1983 tentang Ketentuan Umum dan Tata Cara Perpajakan sebagaimana telah diubah terakhir dengan Undang-Undang Nomor 16 Tahun 2009; 2. bahwa Majelis berpendapat, pengungkapan ketidakbenaran sebagaimana dimaksud dalam Pasal 8 ayat (4) Undang-Undang Nomor 6 Tahun 1983 tentang Ketentuan Umum dan Tata Cara Perpajakan sebagaimana telah diubah terakhir dengan Undang-Undang Nomor 16 Tahun 2009, tidak hanya terbatas pada pajak-pajak yang masih harus dibayar menjadi lebih besar, melainkan juga dapat mengakibatkan pajak-pajak yang masih harus dibayar menjadi lebih kecil, rugi berdasarkan ketentuan perpajakan menjadi lebih kecil atau lebih besar, jumlah harta menjadi lebih besar atau lebih kecil; atau jumlah modal menjadi lebih besar atau lebih kecil dan proses pemeriksaan tetap dilanjutkan; 3. bahwa sesuai dengan ketentuan Pasal 6 ayat (3) Peraturan Pemerintah Nomor 80 Tahun 2007, dan Pasal 26 ayat (3) Peraturan Menteri Keuangan Nomor: 199/PMK.03/2007, Terbanding seharusnya memperlakukan Pengungkapan dalam laporan tersendiri tentang ketidakbenaran pengisian Surat Pemberitahuan tersebut sebagai tambahan informasi atau data dan menjadi bahan pertimbangan bagi Terbanding sebelum menyampaikan Surat Pemberitahuan Hasil Pemeriksaan (SPHP) kepada Pemohon Banding; 4. bahwa namun demikian berdasarkan fakta yang terungkap dalam persidangan, terbukti bahwa Terbanding tidak mempertimbangkan pengungkapan ketidakbenaran tersebut dan karenanya Majelis berkesimpulan koreksi Terbanding telah salah dan keliru sehingga tidak dapat dipertahankan. MENIMBANG bahwa dalam banding ini tidak terdapat sengketa mengenai tarif pajak, bahwa dalam banding ini tidak terdapat sengketa mengenai sanksi administrasi, kecuali bahwa besarnya sanksi administrasi tergantung pada penyelesaian sengketa lainnya; bahwa atas hasil pemeriksaan dalam persidangan, Majelis berkesimpulan untuk mengabulkan seluruhnya permohonan banding Pemohon Banding, sehingga Pajak Pertambahan Nilai Masa Pajak Juli 2009 mengacu kepada SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009 berdasarkan Surat Pengungkapan Ketidakbenaran Pengisian SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009, dengan perhitungan sebagai berikut: MENGINGAT Undang-Undang Nomor 14 Tahun 2002 tentang Pengadilan Pajak, dan ketentuan perundang-undangan lainnya serta peraturan hukum yang berlaku dan yang berkaitan dengan perkara ini. MEMUTUSKAN Menyatakan mengabulkan seluruhnya permohonan banding Pemohon Banding serta membatalkan Keputusan Terbanding Nomor: KEP-489/WPJ.07/2012 tanggal 07 Maret 2012 dan Surat Ketetapan Pajak Lebih Bayar Pajak Pertambahan Nilai Barang dan Jasa Masa Pajak Juli 2009 Nomor: 00002/407/09/053/11 tanggal 07 Januari 2011, atas nama: XXX, sehingga perhitungan Pajak Pertambahan Nilai Masa Pajak Juli 2009 menjadi sebagai berikut: Demikian diputus di Jakarta berdasarkan musyawarah setelah pemeriksaan dalam persidangan dicukupkan pada hari Kamis tanggal 10 Januari 2013 oleh Hakim Majelis III Pengadilan Pajak dengan susunan Hakim Majelis III dan Panitera Pengganti sebagai berikut: Indra J. Rivai, S.E., Ak., M.Sc. sebagai Hakim Ketua, Djangkung Sudjarwadi, S.H., LL.M. sebagai Hakim Anggota, Drs. Gunawan, M.Si. sebagai Hakim Anggota, Aniek Andriani sebagai Panitera Pengganti dan Putusan diucapkan dalam sidang terbuka untuk umum oleh Hakim Ketua Majelis III, pada hari Kamis, tanggal 17 Oktober 2013, dengan susunan Majelis dan Panitera Pengganti sebagai berikut: Indra J. Rivai, S.E., Ak., M.Sc. sebagai Hakim Ketua, Sartono, S.H., M.H., M.Si. sebagai Hakim Anggota, Drs. Gunawan, M.Si. sebagai Hakim Anggota, Aniek Andriani sebagai Panitera Pengganti dengan dihadiri oleh para Hakim Anggota, Panitera Pengganti, namun tidak dihadiri oleh Terbanding maupun oleh Pemohon Banding.\",\n          \"RISALAH PUTUSAN PENGADILAN PAJAK PUT-60107/PP/M.IVB/15/2015 JENIS PAJAK PPh Badan TAHUN/MASA PAJAK 2008 POKOK SENGKETA Pengajuan banding terhadap koreksi Penghasilan Neto sebesar Rp8.939.156.171,00, yang terdiri dari: Menimbang, bahwa hasil pembahasan tiap Pokok Sengketa adalah sebagai berikut: Koreksi Peredaran Usaha sebesar Rp4.652.011.447,00 MENURUT TERBANDING bahwa Dalam uji bukti, terdapat data berupa kontrak, invoice dan faktur pajak keluaran berupa penjualan CPO dan Palm Kernel kepada PT Berlian Eka Sakti Tangguh dan PT Musim Mas. MENURUT PEMOHON BANDING bahwa Atas uji bukti tersebut memastikan bahwa transaksi peredaran usaha sebesar Rp9.514.347.239,-. Sudah dicatat dan dilaporkan. MENURUT MAJELIS bahwa yang menjadi pokok sengketa dalam perkara a quo adalah koreksi Terbanding atas Peredaran Usaha sebesar Rp4.652.011.447,00; bahwa Terbanding dalam persidangan mengemukakan bahwa dalam uji bukti, terdapat data berupa kontrak, invoice dan faktur pajak keluaran berupa penjualan CPO dan Palm Kernel kepada PT Berlian Eka Sakti Tangguh dan PT Musim Mas; bahwa dengan demikian, dari data yang disampaikan Pemohon Banding menjelaskan bahwa benar telah terjadi penjualan, dan hasil penjualan tunai tersebut belum dilaporkan dalam pembukuan/mekanisme arus piutang; bahwa Pemohon Banding dalam persidangan mengemukakan bahwa Pemohon banding sudah membuktikan bahwa peredaran usaha atas ketiga transaksi tersebut telah dicatat dan dilaporkan dalam SPT PPh Badan tahun yang bersangkutan; bahwa berdasarkan pemeriksaan Majelis atas LPP, LPK, dan Surat Uraian Banding maupun penjelasan di persidangan, koreksi Terbanding dilakukan berdasarkan pengujian arus piutang dagang; bahwa selama proses pemeriksaan dan keberatan Pemohon Banding hanya memberikan sebagian data dan dokumen yang diminta oleh Terbanding sesuai dengan surat permintaan buku, catatan, dan data; bahwa dalam persidangan Pemohon Banding hanya menyerahkan copy General Ledger; bahwa karena Pemohon Banding tidak menunjukkan bukti-bukti yang mendukung alasan permohonan bandingnya, maka Majelis berkesimpulan tetap mempertahankan koreksi Terbanding; bahwa berdasarkan bukti-bukti, penjelasan dalam persidangan dan ketentuan-ketentuan sebagaimana tersebut di atas, Majelis berpendapat bahwa Terbanding telah benar dan melaksanakan ketentuan perundang-undangan yang berlaku, sehingga koreksi Terbanding atas Peredaran Usaha sebesar Rp4.652.011.447,00 tetap dipertahankan. Koreksi Harga Pokok Penjualan sebesar Rp769.952.545,00 MENURUT TERBANDING bahwa Dalam uji bukti, Pemohon Banding menyampaikan dokumen biaya reception sebesar Rp580.897.048,- berupa biaya/ongkos pengangkutan CPO/Palm Kernel, sisanya sebesar Rp88.072.802,- tidak didukung bukti adanya adjustment/penyesuaian. MENURUT PEMOHON BANDING bahwa Sebagaimana yang jelaskan dalam matriks sengketa Biaya Reception merupakan biaya yang harus dikeluarkan perusahaan sehubungan dengan penerimaan buah di pabrik (mill) sementara Biaya EFB Disposal adalah biaya atas sewa escavator untuk mengeluarkan janjang kosong dari lokasi pabrik keluar pabrik. MENURUT MAJELIS bahwa yang menjadi pokok sengketa dalam perkara a quo adalah koreksi Terbanding atas Harga Pokok Penjualan sebesar Rp769.952.545,00; bahwa Terbanding dalam persidangan mengemukakan bahwa Pemohon Banding belum memberikan data pendukung seperti kuitansi, bukti pengeluaran kas,/bank, pencatatannya ke dalam jurnal ke dalam SPT Tahunan, dan laporan keuangan. Atas biaya tersebut tidak dapat dibuktikan HPP tersebut merupakan biaya sebagaimana dalam Pasal 6 ayat (1) UU PPh, dan Terbanding telah melakukan upaya peminjaman dokumen secara maksimal baik dalam pemeriksaan dan penelitian keberatan. bahwa Pemohon Banding dalam persidangan mengemukakan bahwa biaya-biaya tersebut merupakan biaya yang harus dikeluarkan perusahaan sehubungan dengan penerimaan buah di pabrik (mill) sementara Biaya EFB Disposal adalah biaya atas sewa escavator untuk mengeluarkan janjang kosong dari lokasi pabrik keluar pabrik; bahwa berdasarkan pemeriksaan Majelis atas LPP, LPK dan Surat Uraian Banding maupun penjelasan di persidangan, koreksi Terbanding dilakukan berdasarkan karena Pemohon Banding tidak menyampaikan data/dokumen dalam pemeriksaan (pihak Terbanding telah melakukan peminjaman dokumen melalui Surat Peminjaman Dokumen, surat peringatan I, surat peringatan II, Berita Acara tidak sepenuhnya menyampaikan dokumen), proses keberatan (Surat Permintaan buku, catatan dalam keberatan I, dan ke II, serta Permintaan buku, dokumen tambahan) bahwa dalam persidangan Pemohon Banding hanya menyerahkan copy General Ledger; bahwa karena Pemohon Banding tidak menunjukkan bukti-bukti yang mendukung alasan permohonan bandingnya, maka Majelis berkesimpulan tetap mempertahankan koreksi Terbanding; bahwa berdasarkan bukti-bukti, penjelasan dalam persidangan dan ketentuan-ketentuan sebagaimana tersebut di atas, Majelis berpendapat bahwa Terbanding telah benar dan melaksanakan ketentuan perundang-undangan yang berlaku, sehingga koreksi Terbanding atas Harga Pokok Penjualan sebesar Rp769.952.545,00 tetap dipertahankan. Koreksi Biaya Usaha sebesar Rp2.625.321.229,00 MENURUT TERBANDING bahwa Persentase antara dokumen yang disampaikan yang didukung bukti sebesar Rp96.095.330,- dibandingkan dengan koreksi Biaya Usaha sebesar Rp2.625.321.229,- adalah 3,6%. MENURUT PEMOHON BANDING bahwa telah membuktikan secara sampling bahwa Biaya Management Expense adalah biaya-biaya yang digunakan untuk operasional kantor dan perjalanan dinas pegawai seperti biaya taksi, parkir, penginapan dan lain-lain. Pembuktian sampling tersebut lakukan dengan menyerahkan voucher-voucher perjalan dinas, biaya penginapan, makan dan minum selama perjalanan dari bandara ke lokasi kebun yang harus menempuh waktu 5 jam perjalanan darat. MENURUT MAJELIS bahwa yang menjadi pokok sengketa dalam perkara a quo adalah koreksi Terbanding atas Biaya Usaha sebesar Rp2.625.321.229,00 bahwa Terbanding dalam persidangan mengemukakan bahwa Pemohon Banding belum memberikan data pendukung seperti kuitansi, bukti pengeluaran kas,/bank, pencatatannya ke dalam jurnal ke dalam SPT Tahunan, dan laporan keuangan. Atas biaya tersebut tidak dapat dibuktikan HPP tersebut merupakan biaya sebagaimana dalam Pasal 6 ayat (1) UU PPh, dan Terbanding telah melakukan upaya peminjaman dokumen secara maksimal baik dalam pemeriksaan dan penelitian keberatan; bahwa Pemohon Banding dalam persidangan mengemukakan bahwa biaya-biaya tersebut sesuai dengan pasal 6 ayat (1) UU PPh Nomor 17 Tahun 2000 sebagaimana telah diubah terakhir dengan UU Nomor 36 Tahun 2008 dan penjelasannya, berhubungan dengan kegiatan usaha Wajib Pajak, sehingga seharusnya merupakan biaya yang dapat dibebankan; bahwa berdasarkan pemeriksaan Majelis atas LPP, LPK dan Surat Uraian Banding maupun penjelasan di persidangan, koreksi Terbanding dilakukan berdasarkan karena Pemohon Banding tidak menyampaikan data/dokumen dalam pemeriksaan (pihak Terbanding telah melakukan peminjaman dokumen melalui Surat Peminjaman Dokumen, surat peringatan I, surat peringatan II, Berita Acara tidak sepenuhnya menyampaikan dokumen), proses keberatan (Surat Permintaan buku, catatan dalam keberatan I dan ke II, serta Permintaan buku, dokumen tambahan) bahwa dalam persidangan Pemohon Banding hanya menyerahkan copy General Ledger; bahwa karena Pemohon Banding tidak menunjukkan bukti-bukti yang mendukung alasan permohonan bandingnya, maka Majelis berkesimpulan tetap mempertahankan koreksi Terbanding; bahwa berdasarkan bukti-bukti, penjelasan dalam persidangan dan ketentuan-ketentuan sebagaimana tersebut di atas, Majelis berpendapat bahwa Terbanding telah benar dan melaksanakan ketentuan perundang-undangan yang berlaku, sehingga koreksi Terbanding atas Biaya Usaha sebesar Rp2.625.321.229,00 tetap dipertahankan. Koreksi Biaya dari Luar Usaha sebesar Rp891.870.950,00 MENURUT TERBANDING bahwa Terbanding melakukan koreksi Biaya Dari Luar Usaha karena Pemohon Banding belum memberikan data pendukung biaya, dan Terbanding telah melakukan upaya peminjaman dokumen secara maksimal baik dalam pemeriksaan dan penelitian keberatan. Dasar hukum yang digunakan adalah Pasal 6 ayat (1) UU PPh dan Pasal 28 ayat (1) UU KUP. MENURUT PEMOHON BANDING bahwa Sejak dari pemeriksaan telah memberikan bukti dengan menyerahkan soft copy general ledger yang terkait dengan Biaya dari luar usaha. MENURUT MAJELIS bahwa yang menjadi pokok sengketa dalam perkara a quo adalah koreksi Terbanding atas Biaya Dari Luar Usaha sebesar Rp891.870.950,00; bahwa Terbanding dalam persidangan mengemukakan bahwa Pemohon Banding tidak menyampaikan dokumen pendukung berupa perjanjian, rincian biaya, kuitansi, bukti pengeluaran kas,/bank, pencatatannya ke dalam jurnal ke dalam SPT Tahunan, laporan keuangan; bahwa Pemohon Banding dalam persidangan mengemukakan bahwa biaya-biaya tersebut sesuai dengan pasal 6 ayat (1) UU PPh Nomor 17 Tahun 2000 sebagaimana telah diubah terakhir dengan UU Nomor 36 Tahun 2008 dan penjelasannya, berhubungan dengan kegiatan usaha Wajib Pajak, sehingga seharusnya merupakan biaya yang dapat dibebankan; bahwa berdasarkan pemeriksaan Majelis atas LPP, LPK dan Surat Uraian Banding maupun penjelasan di persidangan, koreksi Terbanding dilakukan berdasarkan karena Pemohon Banding tidak menyampaikan data/dokumen dalam pemeriksaan (pihak Terbanding telah melakukan peminjaman dokumen melalui Surat Peminjaman Dokumen, surat peringatan I, surat peringatan II, Berita Acara tidak sepenuhnya menyampaikan dokumen), proses keberatan (Surat Permintaan buku, catatan dalam keberatan I dan ke II, serta Permintaan buku, dokumen tambahan); bahwa dalam persidangan Pemohon Banding hanya menyerahkan copy General Ledger; bahwa karena Pemohon Banding tidak menunjukkan bukti-bukti yang mendukung alasan permohonan bandingnya, maka Majelis berkesimpulan tetap mempertahankan koreksi Terbanding; bahwa berdasarkan bukti-bukti, penjelasan dalam persidangan dan ketentuan-ketentuan sebagaimana tersebut di atas, Majelis berpendapat bahwa Terbanding telah benar dan melaksanakan ketentuan perundang-undangan yang berlaku, sehingga koreksi Terbanding atas Biaya Dari Luar Usaha sebesar Rp891.870.950,00 tetap dipertahankan; Menimbang, bahwa dalam sengketa banding ini terdapat sengketa mengenai kompensasi kerugian; Menimbang, bahwa nilai sengketa terbukti dalam sengketa banding ini adalah koreksi Kompensasi Kerugian sebesar Rp1.731.433490,00, dengan perincian sebagai berikut: Menimbang, bahwa hasil pembahasan Pokok Sengketa adalah sebagai berikut: MENURUT TERBANDING bahwa dalam pemeriksaan dan penelitian keberatan, Pemohon Banding tidak memberikan data terkait perhitungan kompensasi kerugian, dan Terbanding telah melakukan peminjaman buku/dokumen dalam pemeriksaan dan proses keberatan secara maksimal. MENURUT PEMOHON bahwa telah membuktikan kebenaran atas kompensasi kerugian dengan menyerahkan SPT PPh Badan tahun-tahun sebelumnya. MENURUT MAJELIS bahwa yang menjadi pokok sengketa dalam perkara a quo adalah koreksi Kompensasi Kerugian sebesar Rp1.731.433490,00; bahwa Terbanding dalam persidangan mengemukakan bahwa Terbanding melakukan koreksi kompensasi kerugian karena berdasarkan perhitungan kompensasi yang dilakukan atas pemeriksaan Tahun Pajak 2007, tidak terdapat sisa kompensasi yang bisa digunakan untuk Tahun Pajak 2008; bahwa dalam Pemeriksaan Tahun Pajak 2007, Terbanding melakukan koreksi positif sehingga penghasilan netto Pemohon Banding menjadi bertambah dan kompensasi dari tahun-tahun sebelumnya telah habis untuk menutup penghasilan netto cfm Terbanding Tahun 2007;bahwa berdasarkan pemeriksaan Majelis atas LPP, LPK dan Surat Uraian Banding maupun penjelasan di persidangan, saat proses pemeriksaan, Pemohon Banding tidak kooperatif dengan tidak memberikan data dan dokumen yang diminta oleh Terbanding dan selama proses keberatan Pemohon Banding tidak memberikan data dan dokumen terkait dengan keberatannya atas koreksi Kompensasi Kerugian tersebut yang diminta oleh Terbanding sesuai dengan surat permintaan buku, catatan dan data; bahwa dalam Berita Acara uji bukti, Pemohon Banding tidak menuangkan pendapatnya dalam Berita Acara uji bukti; bahwa karena Pemohon Banding tidak menunjukkan bukti-bukti yang mendukung alasan permohonan bandingnya, maka Majelis berkesimpulan tetap mempertahankan koreksi Terbanding; bahwa berdasarkan bukti-bukti, penjelasan dalam persidangan dan ketentuan-ketentuan sebagaimana tersebut di atas, Majelis berpendapat bahwa Terbanding telah benar dan melaksanakan ketentuan perundang-undangan yang berlaku, sehingga koreksi Kompensasi Kerugian sebesar Rp1.731.433490,00 tetap dipertahankan. MENIMBANG Atas hasil pemeriksaan dalam persidangan, Majelis berkesimpulan perhitungan koreksi yang dipertahankan dan tidak dapat dipertahankan dengan perhitungan sebagai berikut: bahwa dalam sengketa banding ini tidak terdapat sengketa mengenai tarif pajak; bahwa dalam sengketa banding ini tidak terdapat sengketa mengenai kredit pajak; bahwa dalam sengketa banding ini tidak terdapat sengketa mengenai sanksi administrasi, kecuali bahwa besarnya sanksi administrasi tergantung pada penyelesaian sengketa lainnya; bahwa atas hasil pemeriksaan dalam persidangan, Majelis berkesimpulan untuk menolak permohonan banding Pemohon Banding. MENGINGAT Undang-Undang Nomor 14 Tahun 2002 tentang Pengadilan Pajak, dan peraturan perundang-undangan lainnya serta peraturan hukum yang berlaku dan yang berkaitan dengan perkara ini. MEMUTUSKAN Menolak permohonan banding Pemohon Banding terhadap Keputusan Direktur Jenderal Pajak Nomor: KEP-477/WPJ.07/2013 tanggal 7 Maret 2013, tentang keberatan atas Surat Ketetapan Pajak Lebih Bayar Pajak Penghasilan Tahun Pajak 2008 Nomor: 00002/406/08/058/12 tanggal 19 Maret 2012, atas nama XXX. Demikian diputus di Jakarta pada hari Kamis tanggal 4 September 2014 berdasarkan Musyawarah Majelis IVB Pengadilan Pajak, dengan susunan Majelis dan Panitera Pengganti sebagai berikut: Idawati, SH, M.Sc sebagai Hakim Ketua, Drs. Seno S.B. Hendra, MM sebagai Hakim Anggota, Hadi Rudjito, SH sebagai Hakim Anggota, Muhammad Akhsanul Fata sebagai Panitera Pengganti, dan diucapkan dalam sidang terbuka untuk umum oleh Hakim Ketua pada hari kamis tanggal 12 Maret 2015 dengan dihadiri oleh para Hakim Anggota, Panitera Pengganti, tidak dihadiri oleh Pemohon Banding serta tidak dihadiri oleh Terbanding.\",\n          \"PUTUSAN MAHKAMAH AGUNG 4218/B/PK/PJK/2022 DEMI KEADILAN BERDASARKAN KETUHANAN YANG MAHA ESA MAHKAMAH AGUNG memeriksa perkara pajak pada peninjauan kembali telah memutus dalam perkara: DIREKTUR JENDERAL PAJAK, tempat kedudukan di Jalan Jenderal Gatot Subroto, Kaveling 40-42, Jakarta; Dalam hal ini diwakili oleh kuasa Wansepta Nirwanda, kewarganegaraan Indonesia, jabatan Direktur Keberatan dan Banding, Direktorat Jenderal Pajak, dan kawan-kawan, berdasarkan Surat Kuasa Khusus Nomor SKU-7397/PJ/2021, tanggal 20 Desember 2021; untuk selanjutnya disebut sebagai Pemohon Peninjauan Kembali; MELAWAN PT PERKASA SUBUR SAKTI, beralamat di Desa Lubuk Pempeng Peureulak, Babah Krueng - Peureulak Timur, Kabupaten Aceh Timur 24453, Alamat Korespondensi di The Plaza Office Tower Jalan M.H. Thamrin Kaveling 28-30, Jakarta 10350, yang diwakili oleh Agus Dani Ariyanto, jabatan Direktur Utama; untuk selanjutnya disebut sebagai Termohon Peninjauan Kembali; Mahkamah Agung tersebut; Membaca surat-surat yang bersangkutan yang merupakan bagian tidak terpisahkan dari putusan ini; Menimbang, bahwa berdasarkan surat-surat yang bersangkutan, ternyata Pemohon Peninjauan Kembali telah mengajukan permohonan peninjauan kembali terhadap Putusan Pengadilan Pajak Nomor PUT-014317.16/2019/PP/MIIA Tahun 2021, tanggal 24 September 2021, yang telah berkekuatan hukum tetap, dalam perkaranya melawan Termohon Peninjauan Kembali dengan petitum banding sebagai berikut: RINGKASAN PETITUM BANDING 1. Menyatakan bahwa banding yang diajukan Pemohon Banding dapat diterima karena telah memenuhi seluruh ketentuan formal; 2. Mengabulkan seluruhnya banding yang diajukan Pemohon Banding; Menimbang, bahwa atas banding tersebut, Terbanding mengajukan surat uraian banding tanggal 27 Maret 2020; Menimbang, bahwa amar Putusan Pengadilan Pajak Nomor PUT-014317.16/2019/PP/MIIA Tahun 2021, tanggal 24 September 2021, yang telah berkekuatan hukum tetap tersebut adalah sebagai berikut: Mengabulkan sebagian banding Pemohon Banding atas Keputusan Direktur Jenderal Pajak Nomor KEP-00051/KEB/WPJ.25/2019 tanggal 17 September 2019 tentang keberatan Wajib Pajak atas Surat Ketetapan Pajak Kurang Bayar (SKPKB) Pajak Pertambahan Nilai Barang dan Jasa Masa Pajak November 2015 Nomor 00050/207/15/105/18 tanggal 25 Juli 2018, atas nama PT Perkasa Subur Sakti, NPWP 01.542.405.4-105.001, beralamat di Desa Lubuk Pempeng Peureulak, Babah Krueng - Peureulak Timur, Kabupaten Aceh Timur 24453, Alamat Korespondensi The Plaza Office Tower Jalan M.H. Thamrin Kaveling 28-30, Jakarta 10350, dengan perhitungan sebagai berikut: KETENTUAN FORMAL PENINJAUAN KEMBALI Menimbang, bahwa sesudah putusan terakhir ini diberitahukan kepada Pemohon Peninjauan Kembali pada tanggal 12 Oktober 2021, kemudian terhadapnya oleh Pemohon Peninjauan Kembali diajukan permohonan peninjauan kembali secara tertulis di Kepaniteraan Pengadilan Pajak pada tanggal 6 Januari 2022, dengan disertai alasan-alasannya yang diterima di Kepaniteraan Pengadilan Pajak tersebut pada tanggal 6 Januari 2022; Menimbang, bahwa permohonan peninjauan kembali a quo beserta alasan-alasannya telah diberitahukan kepada pihak lawan dengan saksama, diajukan dalam tenggang waktu dan dengan cara yang ditentukan oleh Undang-Undang Nomor 14 Tahun 1985 tentang Mahkamah Agung sebagaimana telah diubah dengan Undang-Undang Nomor 5 Tahun 2004 dan perubahan kedua dengan Undang-Undang Nomor 3 Tahun 2009, juncto Undang-Undang Nomor 14 Tahun 2002 tentang Pengadilan Pajak, maka permohonan peninjauan kembali tersebut secara formal dapat diterima. PERMOHONAN PENINJAUAN KEMBALI Menimbang, bahwa berdasarkan Memori Peninjauan Kembali yang diterima tanggal 6 Januari 2022, yang merupakan bagian tidak terpisahkan dari Putusan ini, Pemohon Peninjauan Kembali memohon kepada Mahkamah Agung untuk memberikan putusan sebagai berikut: 1. Menerima dan mengabulkan permohonan peninjauan kembali atas Putusan Pengadilan Pajak Nomor PUT-014317.16/2019/PP/M.IIA Tahun 2021 tanggal 24 September 2021 untuk seluruhnya; 2. Membatalkan Putusan Pengadilan Pajak Nomor PUT-014317.16/2019/PP/M.IIA Tahun 2021 tanggal 24 September 2021, karena putusan pengadilan tersebut telah dibuat bertentangan dengan ketentuan peraturan perundang-undangan perpajakan yang berlaku; 3. Dengan mengadili sendiri: 3.1. Menolak permohonan banding Termohon Peninjauan Kembali; 3.2. Menyatakan bahwa Keputusan Direktur Jenderal Pajak Nomor KEP-00051/KEB/WPJ.25/2019 tanggal 17 September 2019 tentang keberatan Wajib Pajak atas Surat Ketetapan Pajak Kurang Bayar (SKPKB) Pajak Pertambahan Nilai Barang dan Jasa Masa Pajak November 2015 Nomor 00050/207/15/105/18 tanggal 25 Juli 2018, atas nama PT Perkasa Subur Sakti, NPWP 01.542.405.4-105.001, beralamat di Desa Lubuk Pempeng Peureulak, Babah Krueng - Peureulak Timur, Kabupaten Aceh Timur 24453, Alamat Korespondensi di The Plaza Office Tower Jalan M.H. Thamrin Kaveling 28-30 Jakarta 10350, adalah telah sesuai dengan ketentuan peraturan perundang-undangan perpajakan yang berlaku sehingga oleh karenanya telah sah dan berkekuatan hukum; 3.3. Menyatakan bahwa Surat Ketetapan Pajak Kurang Bayar (SKPKB) Pajak Pertambahan Nilai Barang dan Jasa Masa Pajak November 2015 Nomor 00050/207/15/105/18 tanggal 25 Juli 2018, atas nama PT Perkasa Subur Sakti, NPWP 01.542.405.4-105.001, beralamat di Desa Lubuk Pempeng Peureulak, Babah Krueng-Peureulak Timur, Kabupaten Aceh Timur 24453, Alamat Korespondensi di The Plaza Office Tower Jalan M.H. Thamrin Kaveling 28-30, Jakarta 10350, adalah telah sesuai dengan ketentuan peraturan perundang-undangan perpajakan yang berlaku sehingga oleh karenanya telah sah dan berkekuatan hukum; 3.4. Menghukum Termohon Peninjauan Kembali untuk membayar semua biaya dalam perkara a quo. PENGAJUAN KONTRA MEMORI PENINJAUAN KEMBALI Menimbang, bahwa terhadap Memori Peninjauan Kembali tersebut, Termohon Peninjauan Kembali telah mengajukan Kontra Memori Peninjauan Kembali pada tanggal 8 Februari 2022, yang pada intinya putusan Pengadilan Pajak sudah tepat dan benar serta menolak permohonan peninjauan kembali dari Pemohon Peninjauan Kembali. PERTIMBANGAN HUKUM MAHKAMAH AGUNG Menimbang, bahwa terhadap alasan-alasan peninjauan kembali tersebut, Mahkamah Agung berpendapat: Menimbang, bahwa berdasarkan Memori Peninjauan Kembali dan Kontra Memori Peninjauan Kembali juncto Putusan Pengadilan Pajak a quo, pokok sengketa adalah: \\u25cf Koreksi positif atas Penyerahan yang PPN-nya harus dipungut sendiri Masa Pajak November 2015 sebesar Rp2.299.200.000,00; \\u25cf Koreksi negatif atas Penyerahan yang PPN-nya tidak dipungut Masa Pajak November 2015 Rp2.299.200.000,00. Menimbang, bahwa yang menjadi pokok masalah dalam sengketa a quo adalah: \\u25cf Apakah benar terdapat penyerahan yang PPN-nya harus dipungut sendiri Masa Pajak November 2015 sebesar Rp2.299.200.000,00?; \\u25cf Apakah benar terdapat penyerahan yang PPN-nya tidak dipungut sendiri Masa Pajak November 2015 sebesar Rp2.299.200.000,00?. Bahwa berdasarkan Memori Peninjauan Kembali dan Kontra Memori Peninjauan Kembali dipertimbangkan: Koreksi positif atas Penyerahan yang PPN-nya harus dipungut sendiri Masa Pajak November 2015 sebesar Rp2.299.200.000,00; Menimbang, bahwa masalah a quo merupakan masalah yuridis yang berdasarkan peraturan perundang-undangan yang berlaku dihubungkan dengan fakta persidangan, sudah dipertimbangkan dengan tepat dan benar oleh Judex Facti, tidak terdapat kekhilafan atau kekeliruan nyata atau kesalahan penerapan hukum, sehingga dikuatkan dan diambil alih oleh Mahkamah Agung, dengan pertimbangan; \\u25cf Bahwa Terbanding melakukan koreksi positif atas penyerahan yang tidak dipungut menjadi penyerahan yang harus dipungut sendiri karena tidak memiliki bukti dokumen BC 4.0. dan penyerahan tersebut dianggap sebagai penyerahan yang harus dipungut sendiri sebesar Rp2.299.200.000,00; \\u25cf Bahwa atas koreksi tersebut Pemohon Banding tidak setuju dengan koreksi penyerahan yang harus dipungut sendiri karena penyerahan tersebut merupakan penyerahan ke Pengusaha di Kawasan Berikat dan telah didukung dengan Formulir BC 4.0 sehingga seharusnya atas penyerahan tersebut berhak mendapat fasilitas PPN tidak dipungut; \\u25cf Bahwa berdasarkan fakta persidangan, Pemohon Banding benar-benar melakukan penyerahan BKP ke Pengusaha di Kawasan Berikat dan telah didukung dengan Formulir BC 4.0, walaupun tidak disampaikan pada saat pemeriksaan dan keberatan; \\u25cf Bahwa Faktur Pajak yang dilampirkan oleh Pemohon Banding adalah Faktur Pajak dengan kode transaksi 07 dan telah diberi Cap \\u201cTidak Dipungut PPN/PPnBM\\u201d; \\u25cf Bahwa Terbanding tidak dapat membuktikan, Wajib Pajak telah menerima pembayaran PPN dari pihak pembeli apabila penyerahan tersebut dianggap sebagai penyerahan yang terutang PPN; \\u25cf Bahwa berdasarkan pertimbangan tersebut di atas, walaupun Pemohon Banding tidak melampirkan syarat formil berupa Formulir BC 4.0, akan tetapi secara substansi Pemohon Banding benar-benar terbukti melakukan penyerahan BKP ke kawasan berikat, sehingga berhak mendapat fasilitas PPN tidak dipungut. Oleh karena itu, koreksi Terbanding atas DPP Penyerahan yang PPN-nya harus dipungut sendiri masa pajak November 2015 sebesar sebesar Rp2.299.200.000,00 tidak dapat dipertahankan. Koreksi negatif atas Penyerahan yang PPN-nya tidak dipungut Masa Pajak November 2015 Rp2.299.200.000,00; \\u25cf Bahwa koreksi Penyerahan yang PPN-nya Tidak Dipungut adalah terkait dengan reklasifikasi atas koreksi penyerahan yang tidak dipungut menjadi Penyerahan Yang Harus Dipungut Sendiri akibat koreksi penyerahan yang PPN-nya harus dipungut sendiri karena tidak memiliki bukti dokumen BC 4.0; \\u25cf Bahwa oleh karena koreksi Terbanding atas DPP Penyerahan yang PPN-nya harus dipungut sendiri masa pajak November 2015 sebesar Rp2.299.200.000,00 tidak dapat dipertahankan, maka secara mutatis mutandis Koreksi negatif atas Penyerahan yang PPN-nya juga tidak dipungut masa pajak November 2015 sebesar Rp2.299.200.000,00 juga tidak dapat dipertahankan. Menimbang, bahwa Pengadilan Pajak sudah benar, dan tidak terdapat kesalahan yang nyata-nyata bertentangan dengan peraturan perundang-undangan yang berlaku sebagaimana diatur dalam Pasal 91 Undang-Undang Nomor 14 Tahun 2002 tentang Pengadilan Pajak; Menimbang, bahwa berdasarkan pertimbangan di atas, maka permohonan peninjauan kembali yang diajukan oleh Pemohon Peninjauan Kembali tersebut adalah tidak beralasan sehingga harus ditolak; Menimbang, bahwa karena permohonan peninjauan kembali ditolak, maka biaya perkara dalam peninjauan kembali ini harus dibebankan kepada Pemohon Peninjauan Kembali; Memperhatikan pasal-pasal dari Undang-Undang Nomor 48 Tahun 2009 tentang Kekuasaan Kehakiman, Undang-Undang Nomor 14 Tahun 1985 tentang Mahkamah Agung sebagaimana yang telah diubah dengan Undang-Undang Nomor 5 Tahun 2004 dan perubahan kedua dengan Undang-Undang Nomor 3 Tahun 2009, Undang-Undang Nomor 14 Tahun 2002 tentang Pengadilan Pajak, serta peraturan perundang-undangan yang terkait. MENGADILI 1. Menolak permohonan peninjauan kembali dari Pemohon Peninjauan Kembali DIREKTUR JENDERAL PAJAK; 2. Menghukum Pemohon Peninjauan Kembali membayar biaya perkara pada Peninjauan Kembali sejumlah Rp2.500.000,00 (dua juta lima ratus ribu rupiah); Demikianlah diputuskan dalam rapat permusyawaratan Majelis Hakim pada hari Rabu, tanggal 21 September 2022, oleh Dr. H. Yulius, S.H., M.H., Hakim Agung yang ditetapkan oleh Ketua Mahkamah Agung sebagai Ketua Majelis, bersama-sama dengan Dr. H. Yosran, S.H., M.Hum., dan H. Is Sudaryono, S.H., M.H., Hakim-Hakim Agung sebagai Anggota, dan diucapkan dalam sidang terbuka untuk umum pada hari itu juga oleh Ketua Majelis dengan dihadiri Hakim-Hakim Anggota tersebut, dan Andi Nur Insaniyah, S.H., Panitera Pengganti tanpa dihadiri oleh para pihak. Anggota Majelis ttd. Dr. H. Yosran, S.H., M.Hum. ttd. H. Is Sudaryono, S.H., M.H. Ketua Majelis ttd. Dr. H. Yulius, S.H., M.H. Panitera Pengganti ttd. Andi Nur Insaniyah, S.H.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"teks_html\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3475,\n        \"samples\": [\n          \"<table border=\\\"0\\\" cellpadding=\\\"1\\\" cellspacing=\\\"1\\\" style=\\\"width:100%\\\"> \\t<tbody> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<h1 style=\\\"text-align:center\\\"><strong>RISALAH PUTUSAN PENGADILAN PAJAK<br /> \\t\\t\\tPUT-47794/PP/M.III/16/2013</strong></h1> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t<h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>JENIS PAJAK</strong></span></h2> \\t\\t\\t<div style=\\\"text-align:center\\\">PPN &amp;&nbsp;PPnBM</div> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t<h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>TAHUN/MASA PAJAK</strong></span></h2> \\t\\t\\t<div style=\\\"text-align:center\\\">Juli 2009</div> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t<h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>POKOK SENGKETA</strong></span></h2> \\t\\t\\t<div style=\\\"text-align:center\\\">pengajuan banding terhadap:</div> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t<div style=\\\"text-align:center\\\"><img alt=\\\"\\\" src=\\\"https://api.ddtc.web.id/file/preview-w-slug/put-47794-1-a/98e8c381-8fbd-4657-b37c-efc9e14f5b0a\\\" style=\\\"width:100%\\\" /></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT TERBANDING</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa <em>adjustment </em>atas jumlah pajak masukan menjadi lebih besar tidak dapat diperhitungkan sebagai pajak masukan yang dapat dikreditkan, hal ini sesuai ketentuan Pasal 9 ayat (8) huruf i Undang-Undang Nomor 8 Tahun 1983 sebagaimana telah diubah dengan Undang-Undang Nomor 18 Tahun 2000 tentang Pajak Pertambahan Nilai Barang dan Jasa dan Pajak Penjualan atas Barang Mewah. Sehingga tindakan Terbanding dengan tidak memperhitungkan <em>adjustment </em>atas pajak masukan sebagai pajak masukan yang dapat dikreditkan sudah tepat.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT PEMOHON BANDING</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa terkait kesalahan pengisian SPT Masa PPN Masa Juli 2009, dalam proses pemeriksaan namun sebelum Surat Pemberitahuan Hasil Pemeriksaan (SPHP) Nomor: PHP-353/WPJ.07/KP.0700/2010 yang diterbitkan tanggal 17 Desember 2010, Pemohon, dengan kesadaran sendiri, dan berdasarkan ketentuan Pasal 8 ayat (4) Undang-Undang Nomor 28 Tahun 2007, mengungkapkan adanya Ketidakbenaran dalam Pengisian Surat Pemberitahuan PPN Masa Juli 2009 yang disampaikan sesuai surat Nomor: J-301/TC/VII/2010 tertanggal 19 Juli 2010 yang diterima oleh KPP Badora Satu pada tanggal 20 Juli 2010, dengan perhitungan meliputi:</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div style=\\\"text-align:center\\\"><img alt=\\\"\\\" src=\\\"https://api.ddtc.web.id/file/preview-w-slug/put-47794-1/bb15c54a-599d-40c4-a0e3-9fa813165286\\\" style=\\\"width:100%\\\" /></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT MAJELIS</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa yang menjadi pokok sengketa banding adalah penerbitan Keputusan Terbanding Nomor: KEP-489/WPJ.07/2012 tanggal 07 Maret 2012, yang menolak Surat Keberatan Pemohon Banding Nomor: J-030/TC/IV/11 tanggal 05 April 2011 atas Surat Ketetapan Pajak Lebih Bayar Pajak Pertambahan Nilai Masa Pajak Juli 2009 Nomor: 00002/407/09/053/11 tanggal 07 Januari 2011, yang tidak disetujui oleh Pemohon Banding;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa Terbanding menerbitkan Surat Ketetapan Pajak Lebih Bayar Pajak Pertambahan Nilai Masa Pajak Juli 2009 Nomor: 00002/407/09/053/11 tanggal 07 Januari 2011, sebesar lebih bayar Rp2.161.936.255,00 berdasarkan SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009, sedangkan Pemohon Banding telah menyampaikan Surat Pengungkapan Ketidakbenaran SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009 melalui Surat Nomor: J-301/TC/VII/2010, tanggal 19 Juli 2010 yang diterima Terbanding tanggal 20 Juli 2010, di mana perhitungan pajak terutang menjadi lebih bayar Rp7.253.637.609,00;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa Terbanding tidak mempertimbangkan data dan informasi dalam Surat Pengungkapan Ketidakbenaran SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009 Nomor: J-301/TC/VII/2010, tanggal 19 Juli 2010, karena dianggap tidak memenuhi ketentuan Pasal 8 ayat (4) Undang-Undang Nomor 6 Tahun 1983 tentang Ketentuan Umum dan Tata Cara Perpajakan sebagaimana telah diubah terakhir dengan Undang-Undang Nomor 16 Tahun 2009, serta Pasal 7 dan Pasal 8 Peraturan Pemerintah Nomor 80 Tahun 2007;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa menurut Terbanding, penggunaan Pasal 8 ayat (4) Undang-Undang Nomor Tahun 1983 tentang Ketentuan Umum dan Tata Cara Perpajakan sebagaimana telah diubah terakhir dengan Undang-Undang Nomor 16 Tahun 2009 hanya untuk Kurang Bayar, sehingga harus dilampirkan Surat Setoran Pajak (SSP);</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa Pemohon Banding menyampaikan Surat Pengungkapan Ketidakbenaran Pengisian SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009 dengan Surat Nomor: J-301/TC/VII/2010, tanggal 19 Juli 2010, yang dilampiri dengan SPT Masa Pajak Pertambahan Nilai Masa Juli 2009 yang diterima oleh Terbanding tanggal 20 Juli 2010, sedangkan Surat Pemberitahuan Hasil Pemeriksaan (SPHP) Terbanding Nomor: PHP-353/WPJ.07/KP.0700/2010 tanggal 17 Desember 2010 dan diterima oleh Pemohon Banding tanggal 20 Desember 2010.</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>sehingga penyampaian Surat Pengungkapan Ketidakbenaran Pengisian SPT Masa Pajak Pertambahan Nilai tersebut masih dalam jangka waktu yang diperbolehkan berdasarkan peraturan perundang-undangan perpajakan;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa menurut penelitian Terbanding dalam Surat Uraian Banding Nomor: S-3621/WPJ.07/2012 tanggal 13 Agustus 2012, berdasarkan Surat Pengungkapan Ketidakbenaran Pengisian SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009 dapat diketahui hal-hal sebagai berikut:</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa pada saat proses pemeriksaan Pemohon Banding menyampaikan Surat Pengungkapan Ketidakbenaran atas SPT Masa PPN Juli 2009 melalui surat Nomor: J-301/TC/VII/2010 tanggal 19 Juli 2010. Surat Pengungkapan Ketidakbenaran tersebut disampaikan Pemohon Banding sebelum diterimanya Surat Pemberitahuan Hasil Pemeriksaan;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa dalam Surat Pengungkapan Ketidakbenaran sebagaimana dimaksud butir b disebutkan bahwa jumlah pajak masukan yang dapat diperhitungkan untuk Masa Pajak Juli 2009 menurut Pemohon Banding adalah sebesar Rp7.253.637.609,00 (lebih besar dari yang tercantum dalam SPT Masa PPN Juli 2009);</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa surat pengungkapan ketidakbenaran SPT PPN Masa Pajak Juli 2009 yang disampaikan Pemohon Banding pada saat pemeriksaan diperlakukan sebagai tambahan informasi atau data bagi Terbanding sebelum menyampaikan Surat Pemberitahuan Hasil Pemeriksaan kepada Pemohon Banding;</div> \\t\\t\\t<div><br /> \\t\\t\\tbahwa sesuai dengan Pasal 8 ayat (4) Undang-Undang Nomor 6 Tahun 1983 tentang Ketentuan Umum dan Tata Cara Perpajakan sebagaimana telah diubah terakhir dengan Undang-Undang Nomor 16 Tahun 2009, walaupun Direktur Jenderal Pajak belum menerbitkan Surat Ketetapan Pajak, Wajib Pajak dengan kesadaran sendiri dapat mengungkapkan dalam laporan tersendiri tentang ketidakbenaran pengisian Surat Pemberitahuan yang telah disampaikan sesuai keadaan yang sebenarnya, yang dapat mengakibatkan:</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top; width:10px\\\"> \\t\\t\\t<div>a.</div> \\t\\t\\t</td> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>pajak-pajak yang masih harus dibayar menjadi lebih besar atau lebih kecil;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>b.</div> \\t\\t\\t</td> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>rugi berdasarkan ketentuan perpajakan menjadi lebih kecil atau lebih besar;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>c.</div> \\t\\t\\t</td> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>jumlah harta menjadi lebih besar atau lebih kecil; atau</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>d.</div> \\t\\t\\t</td> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>jumlah modal menjadi lebih besar atau lebih kecil dan proses pemeriksaan tetap dilanjutkan.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa sesuai dengan ketentuan Pasal 6 ayat (3) Peraturan Pemerintah Nomor 80 Tahun 2007, dan Pasal 26 ayat (3) Peraturan Menteri Keuangan Nomor: 199/PMK.03/2007 ditegaskan bahwa: &ldquo;<em>Pengungkapan dalam laporan tersendiri tentang ketidakbenaran pengisian Surat Pemberitahuan sebagaimana dimaksud pada ayat (1) oleh Pemeriksa Pajak diperlakukan sebagai tambahan informasi atau data dan menjadi bahan pertimbangan bagi Pemeriksa Pajak sebelum menyampaikan Surat Pemberitahuan Hasil Pemeriksaan (SPHP) kepada Wajib Pajak&rdquo;;</em></div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa berdasarkan fakta dan alat bukti yang terungkap dalam persidangan serta peraturan perundang-undangan perpajakan yang berlaku, Majelis menilai dan berkeyakinan sebagai berikut:</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top; width:10px\\\"> \\t\\t\\t<div>1.</div> \\t\\t\\t</td> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa Pemohon Banding telah mengungkapkan adanya ketidakbenaran dalam pengisian Surat Pemberitahuan Pajak Pertambahan Nilai Masa Pajak Juli 2009 sebagaimana dimaksud dalam ketentuan Pasal 8 ayat (4) Undang-Undang Nomor 6 Tahun 1983 tentang Ketentuan Umum dan Tata Cara Perpajakan sebagaimana telah diubah terakhir dengan Undang-Undang Nomor 16 Tahun 2009;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>2.</div> \\t\\t\\t</td> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa Majelis berpendapat, pengungkapan ketidakbenaran sebagaimana dimaksud dalam Pasal&nbsp;8 ayat (4) Undang-Undang Nomor 6 Tahun 1983 tentang Ketentuan Umum dan Tata Cara Perpajakan sebagaimana telah diubah terakhir dengan Undang-Undang Nomor 16 Tahun 2009, tidak hanya terbatas pada pajak-pajak yang masih harus dibayar menjadi lebih besar, melainkan juga dapat mengakibatkan pajak-pajak yang masih harus dibayar menjadi lebih kecil, rugi berdasarkan ketentuan perpajakan menjadi lebih kecil atau lebih besar, jumlah harta menjadi lebih besar atau lebih kecil; atau jumlah modal menjadi lebih besar atau lebih kecil dan proses pemeriksaan tetap dilanjutkan;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>3.</div> \\t\\t\\t</td> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa sesuai dengan ketentuan Pasal 6 ayat (3) Peraturan Pemerintah Nomor 80 Tahun 2007, dan Pasal 26 ayat (3) Peraturan Menteri Keuangan Nomor: 199/PMK.03/2007, Terbanding seharusnya memperlakukan Pengungkapan dalam laporan tersendiri tentang ketidakbenaran pengisian Surat Pemberitahuan tersebut sebagai tambahan informasi atau data dan menjadi bahan pertimbangan bagi Terbanding sebelum menyampaikan Surat Pemberitahuan Hasil Pemeriksaan (SPHP) kepada Pemohon Banding;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>4.</div> \\t\\t\\t</td> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa namun demikian berdasarkan fakta yang terungkap dalam persidangan, terbukti bahwa Terbanding tidak mempertimbangkan pengungkapan ketidakbenaran tersebut dan karenanya Majelis berkesimpulan koreksi Terbanding telah salah dan keliru sehingga tidak dapat dipertahankan.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>MENIMBANG</strong></span></h2> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa dalam banding ini tidak terdapat sengketa mengenai tarif pajak,</div> \\t\\t\\t<div><br /> \\t\\t\\tbahwa dalam banding ini tidak terdapat sengketa mengenai sanksi administrasi, kecuali bahwa besarnya sanksi administrasi tergantung pada penyelesaian sengketa lainnya;</div> \\t\\t\\t<div><br /> \\t\\t\\tbahwa atas hasil pemeriksaan dalam persidangan, Majelis berkesimpulan untuk mengabulkan seluruhnya permohonan banding Pemohon Banding, sehingga Pajak Pertambahan Nilai Masa Pajak Juli 2009 mengacu kepada SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009 berdasarkan Surat Pengungkapan Ketidakbenaran Pengisian SPT Masa Pajak Pertambahan Nilai Masa Pajak Juli 2009, dengan perhitungan sebagai berikut:</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div style=\\\"text-align:center\\\"><img alt=\\\"\\\" src=\\\"https://api.ddtc.web.id/file/preview-w-slug/put-47794-2/bc111128-3670-4ec8-8528-24bcdd07d14d\\\" style=\\\"width:100%\\\" /></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>MENGINGAT</strong></span></h2> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>Undang-Undang Nomor 14 Tahun 2002 tentang Pengadilan Pajak, dan ketentuan perundang-undangan lainnya serta peraturan hukum yang berlaku dan yang berkaitan dengan perkara ini.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>MEMUTUSKAN</strong></span></h2> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div style=\\\"text-align:center\\\"><strong>Menyatakan mengabulkan seluruhnya</strong> permohonan banding Pemohon Banding serta membatalkan Keputusan Terbanding Nomor: KEP-489/WPJ.07/2012 tanggal 07 Maret 2012 dan Surat Ketetapan Pajak Lebih Bayar Pajak Pertambahan Nilai Barang dan Jasa Masa Pajak Juli 2009 Nomor: 00002/407/09/053/11 tanggal 07 Januari 2011, atas nama: XXX, sehingga perhitungan Pajak Pertambahan Nilai Masa Pajak Juli 2009 menjadi sebagai berikut:</div> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t<div style=\\\"text-align:center\\\"><img alt=\\\"\\\" src=\\\"https://api.ddtc.web.id/file/preview-w-slug/put-47794-3/aa357496-fab1-46a6-9afc-f4cf541f574d\\\" style=\\\"width:100%\\\" /></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div style=\\\"text-align:center\\\">Demikian diputus di Jakarta berdasarkan musyawarah setelah pemeriksaan dalam persidangan dicukupkan pada hari Kamis tanggal 10 Januari 2013 oleh Hakim Majelis III Pengadilan Pajak dengan susunan Hakim Majelis III dan Panitera Pengganti sebagai berikut:<br /> \\t\\t\\tIndra J. Rivai, S.E., Ak., M.Sc. sebagai Hakim Ketua,<br /> \\t\\t\\tDjangkung Sudjarwadi, S.H., LL.M. sebagai Hakim Anggota,<br /> \\t\\t\\tDrs. Gunawan, M.Si. sebagai Hakim Anggota,<br /> \\t\\t\\tAniek Andriani sebagai Panitera Pengganti</div> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t<div style=\\\"text-align:center\\\">dan Putusan diucapkan dalam sidang terbuka untuk umum oleh Hakim Ketua Majelis III, pada hari Kamis, tanggal 17 Oktober 2013, dengan susunan Majelis dan Panitera Pengganti sebagai berikut:<br /> \\t\\t\\tIndra J. Rivai, S.E., Ak., M.Sc. sebagai Hakim Ketua,<br /> \\t\\t\\tSartono, S.H., M.H., M.Si. sebagai Hakim Anggota,<br /> \\t\\t\\tDrs. Gunawan, M.Si. sebagai Hakim Anggota,<br /> \\t\\t\\tAniek Andriani sebagai Panitera Pengganti</div> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t<div style=\\\"text-align:center\\\">dengan dihadiri oleh para Hakim Anggota, Panitera Pengganti, namun tidak dihadiri oleh Terbanding maupun oleh Pemohon Banding.</div> \\t\\t\\t</td> \\t\\t</tr> \\t</tbody> </table>\",\n          \"<table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"> \\t<tbody> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<h1 style=\\\"text-align:center\\\"><strong>RISALAH&nbsp; PUTUSAN PENGADILAN PAJAK<br /> \\t\\t\\tPUT-60107/PP/M.IVB/15/2015</strong></h1> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t<h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>JENIS PAJAK</strong></span></h2> \\t\\t\\t<div style=\\\"text-align:center\\\">PPh Badan</div> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t<h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>TAHUN/MASA PAJAK</strong></span></h2> \\t\\t\\t<div style=\\\"text-align:center\\\">2008</div> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t<h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>POKOK SENGKETA</strong></span></h2> \\t\\t\\t<div style=\\\"text-align:center\\\">Pengajuan banding terhadap koreksi Penghasilan Neto sebesar Rp8.939.156.171,00, yang terdiri dari:</div> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t<div style=\\\"text-align:center\\\"><img alt=\\\"\\\" src=\\\"https://api.ddtc.web.id/file/preview-w-slug/put-60107-1/14e8a69d-bb3a-46e4-af54-173e79549a86\\\" style=\\\"width:100%\\\" /></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>Menimbang, bahwa hasil pembahasan tiap Pokok Sengketa adalah sebagai berikut:</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<h3 style=\\\"text-align:center\\\"><span style=\\\"color:#f77b04\\\"><span style=\\\"font-size:18px\\\"><strong>Koreksi Peredaran Usaha sebesar Rp4.652.011.447,00</strong></span></span></h3> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT TERBANDING</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa Dalam uji bukti, terdapat data berupa kontrak, invoice dan faktur pajak keluaran berupa penjualan CPO dan Palm Kernel kepada PT Berlian Eka Sakti Tangguh dan PT Musim Mas.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT PEMOHON BANDING</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa Atas uji bukti tersebut memastikan bahwa transaksi peredaran usaha sebesar Rp9.514.347.239,-. Sudah dicatat dan dilaporkan.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT MAJELIS</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa yang menjadi pokok sengketa dalam perkara<em> a quo</em> adalah koreksi Terbanding atas Peredaran Usaha sebesar Rp4.652.011.447,00;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa Terbanding dalam persidangan mengemukakan bahwa dalam uji bukti, terdapat data berupa kontrak,&nbsp;<em>invoice</em> dan faktur pajak keluaran berupa penjualan CPO dan Palm Kernel kepada PT Berlian Eka Sakti Tangguh dan PT Musim Mas;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa dengan demikian, dari data yang disampaikan Pemohon Banding menjelaskan bahwa benar telah terjadi penjualan, dan hasil penjualan tunai tersebut belum dilaporkan dalam pembukuan/mekanisme arus piutang;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa Pemohon Banding dalam persidangan mengemukakan bahwa Pemohon banding sudah membuktikan bahwa peredaran usaha atas ketiga transaksi tersebut telah dicatat dan dilaporkan dalam SPT PPh Badan tahun yang bersangkutan;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa berdasarkan pemeriksaan Majelis atas LPP, LPK, dan Surat Uraian Banding maupun penjelasan di persidangan, koreksi Terbanding dilakukan berdasarkan pengujian arus piutang dagang;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa selama proses pemeriksaan dan keberatan Pemohon Banding hanya memberikan sebagian data dan dokumen yang diminta oleh Terbanding sesuai dengan surat permintaan buku, catatan, dan data;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa dalam persidangan Pemohon Banding hanya menyerahkan copy <em>General Ledger</em>;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa karena Pemohon Banding tidak menunjukkan bukti-bukti yang mendukung alasan permohonan bandingnya, maka Majelis berkesimpulan tetap mempertahankan koreksi Terbanding;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa berdasarkan bukti-bukti, penjelasan dalam persidangan dan ketentuan-ketentuan sebagaimana tersebut di atas, Majelis berpendapat bahwa Terbanding telah benar dan melaksanakan ketentuan perundang-undangan yang berlaku, sehingga koreksi Terbanding atas Peredaran Usaha sebesar Rp4.652.011.447,00 tetap dipertahankan.</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<h3 style=\\\"text-align:center\\\"><span style=\\\"color:#f77b04\\\"><span style=\\\"font-size:18px\\\"><strong>Koreksi Harga Pokok Penjualan sebesar Rp769.952.545,00</strong></span></span></h3> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT TERBANDING</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa Dalam uji bukti, Pemohon Banding menyampaikan dokumen biaya reception sebesar Rp580.897.048,- berupa biaya/ongkos pengangkutan CPO/Palm Kernel, sisanya sebesar Rp88.072.802,- tidak didukung bukti adanya <em>adjustment</em>/penyesuaian.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT PEMOHON BANDING</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa Sebagaimana yang jelaskan dalam matriks sengketa Biaya Reception merupakan biaya yang harus dikeluarkan perusahaan sehubungan dengan penerimaan buah di pabrik (mill) sementara Biaya EFB Disposal adalah biaya atas sewa escavator untuk mengeluarkan janjang kosong dari lokasi pabrik keluar pabrik.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT MAJELIS</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa yang menjadi pokok sengketa dalam perkara <em>a quo</em> adalah koreksi Terbanding atas Harga Pokok Penjualan sebesar Rp769.952.545,00;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa Terbanding dalam persidangan mengemukakan bahwa Pemohon Banding belum memberikan data pendukung seperti kuitansi, bukti pengeluaran kas,/bank, pencatatannya ke dalam jurnal ke dalam SPT Tahunan, dan laporan keuangan. Atas biaya tersebut tidak dapat dibuktikan HPP tersebut merupakan biaya sebagaimana dalam Pasal 6 ayat (1) UU PPh, dan Terbanding telah melakukan upaya peminjaman dokumen secara maksimal baik dalam pemeriksaan dan penelitian keberatan.</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa Pemohon Banding dalam persidangan mengemukakan bahwa biaya-biaya tersebut merupakan biaya yang harus dikeluarkan perusahaan sehubungan dengan penerimaan buah di pabrik (mill) sementara Biaya EFB Disposal adalah biaya atas sewa escavator untuk mengeluarkan janjang kosong dari lokasi pabrik keluar pabrik;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa berdasarkan pemeriksaan Majelis atas LPP, LPK dan Surat Uraian Banding maupun penjelasan di persidangan, koreksi Terbanding dilakukan berdasarkan karena Pemohon Banding tidak menyampaikan data/dokumen dalam pemeriksaan (pihak Terbanding telah melakukan peminjaman dokumen melalui Surat Peminjaman Dokumen, surat peringatan I, surat peringatan II, Berita Acara tidak sepenuhnya menyampaikan dokumen), proses keberatan (Surat Permintaan buku, catatan dalam keberatan I, dan ke II, serta Permintaan buku, dokumen tambahan)</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa dalam persidangan Pemohon Banding hanya menyerahkan <em>copy General Ledger</em>;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa karena Pemohon Banding tidak menunjukkan bukti-bukti yang mendukung alasan permohonan bandingnya, maka Majelis berkesimpulan tetap mempertahankan koreksi Terbanding;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa berdasarkan bukti-bukti, penjelasan dalam persidangan dan ketentuan-ketentuan sebagaimana tersebut di atas, Majelis berpendapat bahwa Terbanding telah benar dan melaksanakan ketentuan perundang-undangan yang berlaku, sehingga koreksi Terbanding atas Harga Pokok Penjualan sebesar Rp769.952.545,00 tetap dipertahankan.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<h3 style=\\\"text-align:center\\\"><span style=\\\"color:#f77b04\\\"><span style=\\\"font-size:18px\\\"><strong>Koreksi Biaya Usaha sebesar Rp2.625.321.229,00</strong></span></span></h3> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT TERBANDING</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa Persentase antara dokumen yang disampaikan yang didukung bukti sebesar Rp96.095.330,- dibandingkan dengan koreksi Biaya Usaha sebesar Rp2.625.321.229,- adalah 3,6%.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT PEMOHON BANDING</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa telah membuktikan secara sampling bahwa Biaya <em>Management Expense</em> adalah biaya-biaya yang digunakan untuk operasional kantor dan perjalanan dinas pegawai seperti biaya taksi, parkir, penginapan dan lain-lain. Pembuktian sampling tersebut lakukan dengan menyerahkan <em>voucher-voucher</em> perjalan dinas, biaya penginapan, makan dan minum selama perjalanan dari bandara ke lokasi kebun yang harus menempuh waktu 5 jam perjalanan darat.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT MAJELIS</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa yang menjadi pokok sengketa dalam perkara <em>a quo </em>adalah koreksi Terbanding atas Biaya Usaha sebesar Rp2.625.321.229,00</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa Terbanding dalam persidangan mengemukakan bahwa Pemohon Banding belum memberikan data pendukung seperti kuitansi, bukti pengeluaran kas,/bank, pencatatannya ke dalam jurnal ke dalam SPT Tahunan, dan laporan keuangan. Atas biaya tersebut tidak dapat dibuktikan HPP tersebut merupakan biaya sebagaimana dalam Pasal 6 ayat (1) UU PPh, dan Terbanding telah melakukan upaya peminjaman dokumen secara maksimal baik dalam pemeriksaan dan penelitian keberatan;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa Pemohon Banding dalam persidangan mengemukakan bahwa biaya-biaya tersebut sesuai dengan pasal 6 ayat (1) UU PPh Nomor 17 Tahun 2000 sebagaimana telah diubah terakhir dengan UU Nomor 36 Tahun 2008 dan penjelasannya, berhubungan dengan kegiatan usaha Wajib Pajak, sehingga seharusnya merupakan biaya yang dapat dibebankan;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa berdasarkan pemeriksaan Majelis atas LPP, LPK dan Surat Uraian Banding maupun penjelasan di persidangan, koreksi Terbanding dilakukan berdasarkan karena Pemohon Banding tidak menyampaikan data/dokumen dalam pemeriksaan (pihak Terbanding telah melakukan peminjaman dokumen melalui Surat Peminjaman Dokumen, surat peringatan I, surat peringatan II, Berita Acara tidak sepenuhnya menyampaikan dokumen), proses keberatan (Surat Permintaan buku, catatan dalam keberatan I dan ke II, serta Permintaan buku, dokumen tambahan)</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa dalam persidangan Pemohon Banding hanya menyerahkan <em>copy General Ledger</em>;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa karena Pemohon Banding tidak menunjukkan bukti-bukti yang mendukung alasan permohonan bandingnya, maka Majelis berkesimpulan tetap mempertahankan koreksi Terbanding;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa berdasarkan bukti-bukti, penjelasan dalam persidangan dan ketentuan-ketentuan sebagaimana tersebut di atas, Majelis berpendapat bahwa Terbanding telah benar dan melaksanakan ketentuan perundang-undangan yang berlaku, sehingga koreksi Terbanding atas Biaya Usaha sebesar Rp2.625.321.229,00 tetap dipertahankan.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<h3 style=\\\"text-align:center\\\"><span style=\\\"color:#f77b04\\\"><span style=\\\"font-size:18px\\\"><strong>Koreksi Biaya dari Luar Usaha sebesar Rp891.870.950,00</strong></span></span></h3> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT TERBANDING</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa Terbanding melakukan koreksi Biaya Dari Luar Usaha karena Pemohon Banding belum memberikan data pendukung biaya, dan Terbanding telah melakukan upaya peminjaman dokumen secara maksimal baik dalam pemeriksaan dan penelitian keberatan. Dasar hukum yang digunakan adalah Pasal 6 ayat (1) UU PPh dan Pasal 28 ayat (1) UU KUP.</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT PEMOHON BANDING</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa Sejak dari pemeriksaan telah memberikan bukti dengan menyerahkan <em>soft copy general ledger</em> yang terkait dengan Biaya dari luar usaha.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT MAJELIS</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa yang menjadi pokok sengketa dalam perkara <em>a quo</em> adalah koreksi Terbanding atas Biaya Dari Luar Usaha sebesar Rp891.870.950,00;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa Terbanding dalam persidangan mengemukakan bahwa Pemohon Banding tidak menyampaikan dokumen pendukung berupa perjanjian, rincian biaya, kuitansi, bukti pengeluaran kas,/bank, pencatatannya ke dalam jurnal ke dalam SPT Tahunan, laporan keuangan;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa Pemohon Banding dalam persidangan mengemukakan bahwa biaya-biaya tersebut sesuai dengan pasal 6 ayat (1) UU PPh Nomor 17 Tahun 2000 sebagaimana telah diubah terakhir dengan UU Nomor 36 Tahun 2008 dan penjelasannya, berhubungan dengan kegiatan usaha Wajib Pajak, sehingga seharusnya merupakan biaya yang dapat dibebankan;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa berdasarkan pemeriksaan Majelis atas LPP, LPK dan Surat Uraian Banding maupun penjelasan di persidangan, koreksi Terbanding dilakukan berdasarkan karena Pemohon Banding tidak menyampaikan data/dokumen dalam pemeriksaan (pihak Terbanding telah melakukan peminjaman dokumen melalui Surat Peminjaman Dokumen, surat peringatan I, surat peringatan II, Berita Acara tidak sepenuhnya menyampaikan dokumen), proses keberatan (Surat Permintaan buku, catatan dalam keberatan I dan ke II, serta Permintaan buku, dokumen tambahan);</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa dalam persidangan Pemohon Banding hanya menyerahkan <em>copy General Ledger</em>;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa karena Pemohon Banding tidak menunjukkan bukti-bukti yang mendukung alasan permohonan bandingnya, maka Majelis berkesimpulan tetap mempertahankan koreksi Terbanding;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa berdasarkan bukti-bukti, penjelasan dalam persidangan dan ketentuan-ketentuan sebagaimana tersebut di atas, Majelis berpendapat bahwa Terbanding telah benar dan melaksanakan ketentuan perundang-undangan yang berlaku, sehingga koreksi Terbanding atas Biaya Dari Luar Usaha sebesar Rp891.870.950,00 tetap dipertahankan;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>Menimbang,&nbsp;bahwa dalam sengketa banding ini terdapat sengketa mengenai kompensasi kerugian;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>Menimbang,&nbsp;bahwa nilai sengketa terbukti dalam sengketa banding ini adalah koreksi Kompensasi Kerugian sebesar Rp1.731.433490,00, dengan perincian sebagai berikut:</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div><img alt=\\\"\\\" src=\\\"https://api.ddtc.web.id/file/preview-w-slug/put-60107-2/5c177634-ee7d-486e-95c4-160c309d73ce\\\" style=\\\"width:100%\\\" /></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>Menimbang, bahwa hasil pembahasan Pokok Sengketa adalah sebagai berikut:</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT TERBANDING</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa dalam pemeriksaan dan penelitian keberatan, Pemohon Banding tidak memberikan data terkait perhitungan kompensasi kerugian, dan Terbanding telah melakukan peminjaman buku/dokumen dalam pemeriksaan dan proses keberatan secara maksimal.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT PEMOHON</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa telah membuktikan kebenaran atas kompensasi kerugian dengan menyerahkan SPT PPh Badan tahun-tahun sebelumnya.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div><strong>MENURUT MAJELIS</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa yang menjadi pokok sengketa dalam perkara <em>a quo</em> adalah koreksi Kompensasi Kerugian sebesar Rp1.731.433490,00;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa Terbanding dalam persidangan mengemukakan bahwa Terbanding melakukan koreksi kompensasi kerugian karena berdasarkan perhitungan kompensasi yang dilakukan atas pemeriksaan Tahun Pajak 2007, tidak terdapat sisa kompensasi yang bisa digunakan untuk Tahun Pajak 2008;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa dalam Pemeriksaan Tahun Pajak 2007, Terbanding melakukan koreksi positif sehingga penghasilan netto Pemohon Banding menjadi bertambah dan kompensasi dari tahun-tahun sebelumnya telah habis untuk menutup penghasilan netto cfm Terbanding Tahun 2007;bahwa berdasarkan pemeriksaan Majelis atas LPP, LPK dan Surat Uraian Banding maupun penjelasan di persidangan, saat proses pemeriksaan, Pemohon Banding tidak kooperatif dengan tidak memberikan data dan dokumen yang diminta oleh Terbanding dan selama proses keberatan Pemohon Banding tidak memberikan data dan dokumen terkait dengan keberatannya atas koreksi Kompensasi Kerugian tersebut yang diminta oleh Terbanding sesuai dengan surat permintaan buku, catatan dan data;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa dalam Berita Acara uji bukti, Pemohon Banding tidak menuangkan pendapatnya dalam Berita Acara uji bukti;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa karena Pemohon Banding tidak menunjukkan bukti-bukti yang mendukung alasan permohonan bandingnya, maka Majelis berkesimpulan tetap mempertahankan koreksi Terbanding;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa berdasarkan bukti-bukti, penjelasan dalam persidangan dan ketentuan-ketentuan sebagaimana tersebut di atas, Majelis berpendapat bahwa Terbanding telah benar dan melaksanakan ketentuan perundang-undangan yang berlaku, sehingga koreksi Kompensasi Kerugian sebesar Rp1.731.433490,00 tetap dipertahankan.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>MENIMBANG</strong></span></h2> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>Atas hasil pemeriksaan dalam persidangan, Majelis berkesimpulan perhitungan koreksi yang dipertahankan dan tidak dapat dipertahankan dengan perhitungan sebagai berikut:</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div style=\\\"text-align:center\\\"><img alt=\\\"\\\" src=\\\"https://api.ddtc.web.id/file/preview-w-slug/put-60107-3/e0e52a5b-c50e-456d-b496-f8c7facf91c2\\\" style=\\\"width:100%\\\" /></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>bahwa dalam sengketa banding ini tidak terdapat sengketa mengenai tarif pajak;&nbsp;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa dalam sengketa banding ini tidak terdapat sengketa mengenai kredit pajak;&nbsp;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa dalam sengketa banding ini tidak terdapat sengketa mengenai sanksi administrasi, kecuali bahwa besarnya sanksi administrasi tergantung pada penyelesaian sengketa lainnya;&nbsp;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>bahwa atas hasil pemeriksaan dalam persidangan, Majelis berkesimpulan untuk menolak permohonan banding Pemohon Banding.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>MENGINGAT</strong></span></h2> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>Undang-Undang Nomor 14 Tahun 2002 tentang Pengadilan Pajak, dan peraturan perundang-undangan lainnya serta peraturan hukum yang berlaku dan yang berkaitan dengan perkara ini.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>MEMUTUSKAN</strong></span></h2> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div style=\\\"text-align:center\\\"><strong>Menolak permohonan banding Pemohon Banding </strong>terhadap Keputusan Direktur Jenderal Pajak Nomor: KEP-477/WPJ.07/2013 tanggal 7 Maret 2013, tentang keberatan atas Surat Ketetapan Pajak Lebih Bayar Pajak Penghasilan Tahun Pajak 2008 Nomor: 00002/406/08/058/12 tanggal 19 Maret 2012, atas nama <strong>XXX</strong>.</div> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t<div style=\\\"text-align:center\\\">Demikian diputus di Jakarta pada hari Kamis tanggal 4 September 2014 berdasarkan Musyawarah Majelis IVB Pengadilan Pajak, dengan susunan Majelis dan Panitera Pengganti sebagai berikut:<br /> \\t\\t\\tIdawati, SH, M.Sc sebagai Hakim Ketua,<br /> \\t\\t\\tDrs. Seno S.B. Hendra, MM sebagai Hakim Anggota,<br /> \\t\\t\\tHadi Rudjito, SH &nbsp;sebagai Hakim Anggota,<br /> \\t\\t\\tMuhammad Akhsanul Fata sebagai Panitera Pengganti,</div> \\t\\t\\t<div style=\\\"text-align:center\\\">&nbsp;</div> \\t\\t\\t<div style=\\\"text-align:center\\\">dan diucapkan dalam sidang terbuka untuk umum oleh Hakim Ketua pada hari kamis tanggal 12 Maret 2015 dengan dihadiri oleh para Hakim Anggota, Panitera Pengganti, tidak dihadiri oleh Pemohon Banding serta tidak dihadiri oleh Terbanding.</div> \\t\\t\\t</td> \\t\\t</tr> \\t</tbody> </table>\",\n          \"<h1 style=\\\"text-align:center\\\"><strong>PUTUSAN MAHKAMAH AGUNG<br /> 4218/B/PK/PJK/2022</strong></h1> <div style=\\\"text-align:center\\\">&nbsp;</div> <div style=\\\"text-align:center\\\"><strong>DEMI KEADILAN BERDASARKAN KETUHANAN YANG MAHA ESA</strong></div> <div style=\\\"text-align:center\\\">&nbsp;</div> <div style=\\\"text-align:center\\\"><strong>MAHKAMAH AGUNG</strong></div> <div style=\\\"text-align:center\\\">memeriksa perkara pajak pada peninjauan kembali telah memutus dalam perkara:</div> <table border=\\\"0\\\" cellpadding=\\\"1\\\" cellspacing=\\\"1\\\" style=\\\"width:100%\\\"> \\t<tbody> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:center; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:center; vertical-align:top\\\"> \\t\\t\\t<div style=\\\"text-align:justify\\\"><strong>DIREKTUR JENDERAL PAJAK</strong>, tempat kedudukan di Jalan Jenderal Gatot Subroto, Kaveling 40-42, Jakarta;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>Dalam hal ini diwakili oleh kuasa Wansepta Nirwanda, kewarganegaraan Indonesia, jabatan Direktur Keberatan dan Banding, Direktorat Jenderal Pajak, dan kawan-kawan, berdasarkan Surat Kuasa Khusus Nomor SKU-7397/PJ/2021, tanggal 20 Desember 2021;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>untuk selanjutnya disebut sebagai Pemohon Peninjauan Kembali;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:center; vertical-align:top\\\"> \\t\\t\\t<h2><span style=\\\"font-size:18px\\\"><strong>MELAWAN</strong></span></h2> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:center; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\"><strong>PT PERKASA SUBUR SAKTI</strong>, beralamat di Desa Lubuk Pempeng Peureulak, Babah Krueng - Peureulak Timur, Kabupaten Aceh Timur 24453, Alamat Korespondensi di <em>The Plaza Office Tower </em>Jalan M.H. Thamrin Kaveling 28-30, Jakarta 10350, yang diwakili oleh Agus Dani Ariyanto, jabatan Direktur Utama;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>untuk selanjutnya disebut sebagai Termohon Peninjauan Kembali;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>Mahkamah Agung tersebut;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>Membaca surat-surat yang bersangkutan yang merupakan bagian tidak terpisahkan dari putusan ini;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>Menimbang, bahwa berdasarkan surat-surat yang bersangkutan, ternyata Pemohon Peninjauan Kembali telah mengajukan permohonan peninjauan kembali terhadap Putusan Pengadilan Pajak Nomor PUT-014317.16/2019/PP/MIIA Tahun 2021, tanggal 24 September 2021, yang telah berkekuatan hukum tetap, dalam perkaranya melawan Termohon Peninjauan Kembali dengan <em>petitum </em>banding sebagai berikut:&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"background-color:#e8e9ec; text-align:center; vertical-align:top\\\"> \\t\\t\\t<h2><span style=\\\"font-size:18px\\\"><strong>RINGKASAN PETITUM BANDING</strong></span></h2> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"background-color:#e8e9ec; text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"background-color:#e8e9ec; text-align:justify; vertical-align:top\\\">1.</td> \\t\\t\\t<td colspan=\\\"7\\\" rowspan=\\\"1\\\" style=\\\"background-color:#e8e9ec; text-align:justify; vertical-align:top\\\">Menyatakan bahwa banding yang diajukan Pemohon Banding dapat diterima karena telah memenuhi seluruh ketentuan formal;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"background-color:#e8e9ec; text-align:justify; vertical-align:top\\\">2.</td> \\t\\t\\t<td colspan=\\\"7\\\" style=\\\"background-color:#e8e9ec; text-align:justify; vertical-align:top\\\">Mengabulkan seluruhnya banding yang diajukan Pemohon Banding;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"background-color:#e8e9ec; text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"background-color:#e8e9ec; text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>Menimbang, bahwa atas banding tersebut, Terbanding mengajukan surat uraian banding tanggal 27 Maret 2020;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>Menimbang, bahwa amar Putusan Pengadilan Pajak Nomor PUT-014317.16/2019/PP/MIIA Tahun 2021, tanggal 24 September 2021, yang telah berkekuatan hukum tetap tersebut adalah sebagai berikut:</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>Mengabulkan sebagian banding Pemohon Banding atas Keputusan Direktur Jenderal Pajak Nomor KEP-00051/KEB/WPJ.25/2019 tanggal 17 September 2019 tentang keberatan Wajib Pajak atas Surat Ketetapan Pajak Kurang Bayar (SKPKB) Pajak Pertambahan Nilai Barang dan Jasa Masa Pajak November 2015 Nomor 00050/207/15/105/18 tanggal 25 Juli 2018, atas nama PT Perkasa Subur Sakti, NPWP 01.542.405.4-105.001, beralamat di Desa Lubuk Pempeng Peureulak, Babah Krueng - Peureulak Timur, Kabupaten Aceh Timur 24453, Alamat Korespondensi <em>The Plaza Office Tower</em> Jalan M.H. Thamrin Kaveling 28-30, Jakarta 10350, dengan perhitungan sebagai berikut:</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div style=\\\"text-align:center\\\"><img alt=\\\"\\\" src=\\\"https://api.ddtc.web.id/file/preview-w-slug/4218-2022/86b62b4d-5530-46f5-b26c-5633b15f512f\\\" style=\\\"width:100%\\\" /></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>KETENTUAN FORMAL PENINJAUAN KEMBALI</strong></span></h2> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>Menimbang, bahwa sesudah putusan terakhir ini diberitahukan kepada Pemohon Peninjauan Kembali pada tanggal 12 Oktober 2021,&nbsp;kemudian terhadapnya oleh Pemohon Peninjauan Kembali diajukan permohonan peninjauan kembali secara tertulis di Kepaniteraan Pengadilan Pajak pada tanggal 6 Januari 2022, dengan disertai alasan-alasannya yang diterima di Kepaniteraan Pengadilan Pajak tersebut pada tanggal 6 Januari 2022;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>Menimbang, bahwa permohonan peninjauan kembali <em>a quo</em> beserta alasan-alasannya telah diberitahukan kepada pihak lawan dengan saksama, diajukan dalam tenggang waktu dan dengan cara yang ditentukan oleh Undang-Undang Nomor 14 Tahun 1985 tentang Mahkamah Agung sebagaimana telah diubah dengan Undang-Undang Nomor 5 Tahun 2004 dan perubahan kedua dengan Undang-Undang Nomor 3 Tahun 2009, <em>juncto </em>Undang-Undang Nomor 14 Tahun 2002 tentang Pengadilan Pajak, maka permohonan peninjauan kembali tersebut secara formal dapat diterima.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:center; vertical-align:top\\\"> \\t\\t\\t<h2><span style=\\\"font-size:18px\\\"><strong>PERMOHONAN&nbsp;PENINJAUAN KEMBALI</strong></span></h2> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">Menimbang, bahwa berdasarkan Memori Peninjauan Kembali yang diterima tanggal 6 Januari 2022, yang merupakan bagian tidak terpisahkan dari Putusan ini, Pemohon Peninjauan Kembali memohon kepada Mahkamah Agung untuk memberikan putusan sebagai berikut:</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">1.</td> \\t\\t\\t<td colspan=\\\"7\\\" rowspan=\\\"1\\\" style=\\\"text-align:justify; vertical-align:top\\\">Menerima dan mengabulkan permohonan peninjauan kembali atas Putusan Pengadilan Pajak Nomor PUT-014317.16/2019/PP/M.IIA Tahun 2021 tanggal 24 September 2021 untuk seluruhnya;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">2.</td> \\t\\t\\t<td colspan=\\\"7\\\" rowspan=\\\"1\\\" style=\\\"text-align:justify; vertical-align:top\\\">Membatalkan Putusan Pengadilan Pajak Nomor PUT-014317.16/2019/PP/M.IIA Tahun 2021 tanggal 24 September 2021, karena putusan pengadilan tersebut telah dibuat bertentangan dengan ketentuan peraturan perundang-undangan perpajakan yang berlaku;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">3.</td> \\t\\t\\t<td colspan=\\\"7\\\" rowspan=\\\"1\\\" style=\\\"text-align:justify; vertical-align:top\\\">Dengan mengadili sendiri:</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top; width:10px\\\">3.1.</td> \\t\\t\\t<td colspan=\\\"6\\\" rowspan=\\\"1\\\" style=\\\"text-align:justify; vertical-align:top\\\">Menolak permohonan banding Termohon Peninjauan Kembali;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top; width:10px\\\">3.2.</td> \\t\\t\\t<td colspan=\\\"6\\\" style=\\\"text-align:justify; vertical-align:top\\\">Menyatakan bahwa Keputusan Direktur Jenderal Pajak Nomor KEP-00051/KEB/WPJ.25/2019 tanggal 17 September 2019 tentang keberatan Wajib Pajak atas Surat Ketetapan Pajak Kurang Bayar (SKPKB) Pajak Pertambahan Nilai Barang dan Jasa Masa Pajak November 2015 Nomor 00050/207/15/105/18 tanggal 25 Juli 2018, atas nama PT Perkasa Subur Sakti, NPWP 01.542.405.4-105.001,&nbsp;beralamat di Desa Lubuk Pempeng Peureulak, Babah Krueng - Peureulak Timur, Kabupaten Aceh Timur 24453, Alamat Korespondensi di The Plaza Office Tower Jalan M.H. Thamrin Kaveling 28-30 Jakarta 10350, adalah telah sesuai dengan ketentuan peraturan perundang-undangan perpajakan yang berlaku sehingga oleh karenanya telah sah dan berkekuatan hukum;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top; width:10px\\\">3.3.</td> \\t\\t\\t<td colspan=\\\"6\\\" style=\\\"text-align:justify; vertical-align:top\\\">Menyatakan bahwa Surat Ketetapan Pajak Kurang Bayar (SKPKB) Pajak Pertambahan Nilai Barang dan Jasa Masa Pajak November 2015 Nomor 00050/207/15/105/18 tanggal 25 Juli 2018, atas nama PT Perkasa Subur Sakti, NPWP 01.542.405.4-105.001, beralamat di Desa Lubuk Pempeng Peureulak, Babah Krueng-Peureulak Timur, Kabupaten Aceh Timur 24453, Alamat Korespondensi di <em>The Plaza Office Tower</em> Jalan M.H. Thamrin Kaveling 28-30, Jakarta 10350, adalah telah sesuai dengan ketentuan peraturan perundang-undangan perpajakan yang berlaku sehingga oleh karenanya telah sah dan berkekuatan hukum;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top; width:10px\\\">3.4.</td> \\t\\t\\t<td colspan=\\\"6\\\" style=\\\"text-align:justify; vertical-align:top\\\">Menghukum Termohon Peninjauan Kembali untuk membayar semua biaya dalam perkara<em> a quo.</em></td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:center; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:center; vertical-align:top\\\"> \\t\\t\\t<h2><span style=\\\"font-size:18px\\\"><strong>PENGAJUAN KONTRA MEMORI PENINJAUAN KEMBALI</strong></span></h2> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:center; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">Menimbang, bahwa terhadap Memori Peninjauan Kembali tersebut, Termohon Peninjauan Kembali telah mengajukan Kontra Memori Peninjauan Kembali pada tanggal 8 Februari 2022, yang pada intinya putusan Pengadilan Pajak sudah tepat dan benar serta menolak permohonan peninjauan kembali dari Pemohon Peninjauan Kembali.</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"4\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t\\t<td colspan=\\\"5\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:center; vertical-align:top\\\"> \\t\\t\\t<h2><span style=\\\"font-size:18px\\\"><strong>PERTIMBANGAN HUKUM MAHKAMAH AGUNG</strong></span></h2> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>Menimbang, bahwa terhadap alasan-alasan peninjauan kembali tersebut, Mahkamah Agung berpendapat:</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>Menimbang, bahwa berdasarkan Memori Peninjauan Kembali dan Kontra Memori Peninjauan Kembali <em>juncto </em>Putusan Pengadilan Pajak <em>a quo</em>, pokok sengketa adalah:</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">\\u25cf</td> \\t\\t\\t<td colspan=\\\"7\\\" style=\\\"text-align:justify; vertical-align:top\\\">Koreksi positif atas Penyerahan yang PPN-nya harus dipungut sendiri Masa Pajak November 2015 sebesar Rp2.299.200.000,00;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">\\u25cf</td> \\t\\t\\t<td colspan=\\\"7\\\" rowspan=\\\"1\\\" style=\\\"text-align:justify; vertical-align:top\\\">Koreksi negatif atas Penyerahan yang PPN-nya tidak dipungut Masa Pajak November 2015 Rp2.299.200.000,00.</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">Menimbang, bahwa yang menjadi pokok masalah dalam sengketa <em>a quo </em>adalah:&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">\\u25cf</td> \\t\\t\\t<td colspan=\\\"7\\\" style=\\\"text-align:justify; vertical-align:top\\\">Apakah benar terdapat penyerahan yang PPN-nya harus dipungut sendiri Masa Pajak November 2015 sebesar Rp2.299.200.000,00?;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">\\u25cf</td> \\t\\t\\t<td colspan=\\\"7\\\" rowspan=\\\"1\\\" style=\\\"text-align:justify; vertical-align:top\\\">Apakah benar terdapat penyerahan yang PPN-nya tidak dipungut sendiri Masa Pajak November 2015 sebesar Rp2.299.200.000,00?.</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>Bahwa berdasarkan Memori Peninjauan Kembali dan Kontra Memori Peninjauan Kembali dipertimbangkan:</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div><strong>Koreksi positif atas Penyerahan yang PPN-nya harus dipungut sendiri Masa Pajak November 2015 sebesar Rp2.299.200.000,00; </strong></div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>Menimbang, bahwa masalah<em> a quo </em>merupakan masalah yuridis yang berdasarkan peraturan perundang-undangan yang berlaku dihubungkan dengan fakta persidangan, sudah dipertimbangkan dengan tepat dan benar oleh <em>Judex Facti</em>, tidak terdapat kekhilafan atau kekeliruan nyata atau kesalahan penerapan hukum, sehingga dikuatkan dan diambil alih oleh Mahkamah Agung, dengan pertimbangan;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">\\u25cf</td> \\t\\t\\t<td colspan=\\\"7\\\" rowspan=\\\"1\\\" style=\\\"text-align:justify; vertical-align:top\\\">Bahwa Terbanding melakukan koreksi positif atas penyerahan yang tidak dipungut menjadi penyerahan yang harus dipungut sendiri karena tidak memiliki bukti dokumen BC 4.0. dan penyerahan tersebut dianggap sebagai penyerahan yang harus dipungut sendiri sebesar Rp2.299.200.000,00;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">\\u25cf</td> \\t\\t\\t<td colspan=\\\"7\\\" style=\\\"text-align:justify; vertical-align:top\\\">Bahwa atas koreksi tersebut Pemohon Banding tidak setuju dengan koreksi penyerahan yang harus dipungut sendiri karena penyerahan tersebut merupakan penyerahan ke Pengusaha di Kawasan Berikat dan telah didukung dengan Formulir BC 4.0 sehingga seharusnya atas penyerahan tersebut berhak mendapat fasilitas PPN tidak dipungut;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">\\u25cf</td> \\t\\t\\t<td colspan=\\\"7\\\" style=\\\"text-align:justify; vertical-align:top\\\">Bahwa berdasarkan fakta persidangan, Pemohon Banding benar-benar melakukan penyerahan BKP ke Pengusaha di Kawasan Berikat dan telah didukung dengan Formulir BC 4.0, walaupun tidak disampaikan pada saat pemeriksaan dan keberatan;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">\\u25cf</td> \\t\\t\\t<td colspan=\\\"7\\\" style=\\\"text-align:justify; vertical-align:top\\\">Bahwa Faktur Pajak yang dilampirkan oleh Pemohon Banding adalah Faktur Pajak dengan kode transaksi 07 dan telah diberi Cap &ldquo;Tidak&nbsp;Dipungut PPN/PPnBM&rdquo;;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">\\u25cf</td> \\t\\t\\t<td colspan=\\\"7\\\" style=\\\"text-align:justify; vertical-align:top\\\">Bahwa Terbanding tidak dapat membuktikan, Wajib Pajak telah menerima pembayaran PPN dari pihak pembeli apabila penyerahan tersebut dianggap sebagai penyerahan yang terutang PPN;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">\\u25cf</td> \\t\\t\\t<td colspan=\\\"7\\\" style=\\\"text-align:justify; vertical-align:top\\\">Bahwa berdasarkan pertimbangan tersebut di atas, walaupun Pemohon Banding tidak melampirkan syarat formil berupa Formulir BC 4.0, akan tetapi secara substansi Pemohon Banding benar-benar terbukti melakukan penyerahan BKP ke kawasan berikat, sehingga berhak mendapat fasilitas PPN tidak dipungut. Oleh karena itu, koreksi Terbanding atas DPP Penyerahan yang PPN-nya harus dipungut sendiri masa pajak November 2015 sebesar sebesar Rp2.299.200.000,00 tidak dapat dipertahankan.</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t\\t<td colspan=\\\"7\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\"><strong>Koreksi negatif atas Penyerahan yang PPN-nya tidak dipungut Masa Pajak November 2015 Rp2.299.200.000,00;</strong></td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">\\u25cf</td> \\t\\t\\t<td colspan=\\\"7\\\" style=\\\"text-align:justify; vertical-align:top\\\">Bahwa koreksi Penyerahan yang PPN-nya Tidak Dipungut adalah terkait dengan reklasifikasi atas koreksi penyerahan yang tidak dipungut menjadi Penyerahan Yang Harus Dipungut Sendiri akibat koreksi penyerahan yang PPN-nya harus dipungut sendiri karena tidak memiliki bukti dokumen BC 4.0;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">\\u25cf</td> \\t\\t\\t<td colspan=\\\"7\\\" style=\\\"text-align:justify; vertical-align:top\\\">Bahwa oleh karena koreksi Terbanding atas DPP Penyerahan yang PPN-nya harus dipungut sendiri masa pajak November 2015 sebesar Rp2.299.200.000,00 tidak dapat dipertahankan, maka secara mutatis mutandis Koreksi negatif atas Penyerahan yang PPN-nya juga tidak dipungut masa pajak November 2015 sebesar Rp2.299.200.000,00 juga tidak dapat dipertahankan.</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"2\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t\\t<td colspan=\\\"7\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\"> \\t\\t\\t<div>Menimbang, bahwa Pengadilan Pajak sudah benar, dan tidak terdapat kesalahan yang nyata-nyata bertentangan dengan peraturan perundang-undangan yang berlaku sebagaimana diatur dalam Pasal 91 Undang-Undang Nomor 14 Tahun 2002 tentang Pengadilan Pajak;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>Menimbang, bahwa berdasarkan pertimbangan di atas, maka permohonan peninjauan kembali yang diajukan oleh Pemohon Peninjauan Kembali tersebut adalah tidak beralasan sehingga harus ditolak;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>Menimbang, bahwa karena permohonan peninjauan kembali ditolak, maka biaya perkara dalam peninjauan kembali ini harus dibebankan kepada Pemohon Peninjauan Kembali;</div> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t<div>Memperhatikan pasal-pasal dari Undang-Undang Nomor 48 Tahun 2009 tentang Kekuasaan Kehakiman, Undang-Undang Nomor 14 Tahun 1985 tentang Mahkamah Agung sebagaimana yang telah diubah dengan Undang-Undang Nomor 5 Tahun 2004 dan perubahan kedua dengan Undang-Undang Nomor 3 Tahun 2009, Undang-Undang Nomor 14 Tahun 2002 tentang Pengadilan Pajak, serta peraturan perundang-undangan yang terkait.</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td colspan=\\\"9\\\" style=\\\"text-align:justify; vertical-align:top\\\">&nbsp;</td> \\t\\t</tr> \\t</tbody> </table> <h2 style=\\\"text-align:center\\\"><span style=\\\"font-size:18px\\\"><strong>MENGADILI</strong></span></h2> <div style=\\\"text-align:center\\\"> <div style=\\\"text-align:center\\\"> <div style=\\\"text-align:center\\\"> <div style=\\\"text-align:center\\\"> <div style=\\\"text-align:center\\\"> <div style=\\\"text-align:center\\\"> <div style=\\\"text-align:center\\\"> <div style=\\\"text-align:center\\\"> <div style=\\\"text-align:center\\\"> <div style=\\\"text-align:center\\\"> <div style=\\\"text-align:center\\\"> <div style=\\\"text-align:center\\\"> <div style=\\\"text-align:center\\\"> <div style=\\\"text-align:center\\\"> <table border=\\\"0\\\" cellpadding=\\\"1\\\" cellspacing=\\\"1\\\" style=\\\"width:100%\\\"> \\t<tbody> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top; width:10px\\\">1.</td> \\t\\t\\t<td colspan=\\\"8\\\" style=\\\"text-align:justify; vertical-align:top\\\"><strong>Menolak </strong>permohonan peninjauan kembali dari Pemohon Peninjauan Kembali <strong>DIREKTUR JENDERAL PAJAK</strong>;&nbsp;</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"text-align:justify; vertical-align:top\\\">2.</td> \\t\\t\\t<td colspan=\\\"8\\\" style=\\\"text-align:justify; vertical-align:top\\\">Menghukum Pemohon Peninjauan Kembali membayar biaya perkara pada Peninjauan Kembali sejumlah Rp2.500.000,00 (dua juta lima ratus ribu rupiah);</td> \\t\\t</tr> \\t</tbody> </table> </div> <div style=\\\"text-align:center\\\">&nbsp;</div> <div style=\\\"text-align:center\\\">Demikianlah diputuskan dalam rapat permusyawaratan Majelis Hakim pada hari Rabu, tanggal 21 September 2022, oleh Dr. H. Yulius, S.H., M.H., Hakim Agung yang ditetapkan oleh Ketua Mahkamah Agung sebagai Ketua Majelis, bersama-sama dengan Dr. H. Yosran, S.H., M.Hum., dan H. Is Sudaryono, S.H., M.H., Hakim-Hakim Agung sebagai Anggota, dan diucapkan dalam sidang terbuka untuk umum pada hari itu juga oleh Ketua Majelis dengan dihadiri Hakim-Hakim Anggota tersebut, dan Andi Nur Insaniyah, S.H., Panitera Pengganti tanpa dihadiri oleh para pihak.</div> </div> </div> </div> </div> </div> </div> </div> </div> </div> </div> </div> </div> </div> <div> <div> <div style=\\\"margin-left:40px; text-align:justify\\\"> <div>&nbsp;</div> </div> </div> </div> <div style=\\\"text-align:center\\\"> <table border=\\\"0\\\" cellpadding=\\\"1\\\" cellspacing=\\\"1\\\" style=\\\"width:100%\\\"> \\t<tbody> \\t\\t<tr> \\t\\t\\t<td style=\\\"vertical-align:top; white-space:nowrap; width:50%\\\"> \\t\\t\\t<div><strong>Anggota Majelis</strong></div> \\t\\t\\t<div><strong>ttd.<br /> \\t\\t\\tDr. H. Yosran, S.H., M.Hum.<br /> \\t\\t\\tttd.</strong></div> \\t\\t\\t<div><strong>H. Is Sudaryono, S.H., M.H.</strong></div> \\t\\t\\t</td> \\t\\t\\t<td style=\\\"vertical-align:top; white-space:nowrap; width:50%\\\"> \\t\\t\\t<div><strong>Ketua Majelis<br /> \\t\\t\\tttd.</strong></div> \\t\\t\\t<div><strong>Dr. H. Yulius, S.H., M.H.</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"vertical-align:top; white-space:nowrap\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t\\t<td style=\\\"vertical-align:top; white-space:nowrap\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t</tr> \\t\\t<tr> \\t\\t\\t<td style=\\\"vertical-align:top; white-space:nowrap\\\"> \\t\\t\\t<div>&nbsp;</div> \\t\\t\\t</td> \\t\\t\\t<td style=\\\"vertical-align:top; white-space:nowrap\\\"> \\t\\t\\t<div><strong>Panitera Pengganti</strong></div> \\t\\t\\t<div><strong>ttd.</strong></div> \\t\\t\\t<div><strong>Andi Nur Insaniyah, S.H.</strong></div> \\t\\t\\t</td> \\t\\t</tr> \\t</tbody> </table> </div>\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ketua\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 530,\n        \"samples\": [\n          \"lr. Hendi Budi Santosa, M.Eng.\",\n          \"titip olah\",\n          \"Drs. Seno S.B. Hendra, M.M.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 160
        }
      ],
      "source": [
        "df = pd.read_csv('/content/drive/MyDrive/KTTA/Data/putusan_data2.csv', delimiter='|', encoding = \"utf8\")\n",
        "df.dropna(inplace=True)\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def class_distribution_table(df, column_name):\n",
        "    class_counts = df[column_name].value_counts().reset_index()\n",
        "    class_counts.columns = [column_name, 'count']\n",
        "    return class_counts\n",
        "\n",
        "hasil_putusan_table = class_distribution_table(df, 'hasil_putusan')\n",
        "print(hasil_putusan_table)\n",
        "\n",
        "jenis_pajak_table = class_distribution_table(df, 'jenis_pajak')\n",
        "print(jenis_pajak_table)\n",
        "\n",
        "jenis_pajak_table = class_distribution_table(df, 'jenis_sengketa')\n",
        "print(jenis_pajak_table)\n",
        "\n",
        "jenis_pajak_table = class_distribution_table(df, 'tahun_pajak')\n",
        "print(jenis_pajak_table)\n",
        "\n",
        "jenis_pajak_table = class_distribution_table(df, 'tahun_putusan')\n",
        "print(jenis_pajak_table)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xArLC9MB0LAH",
        "outputId": "c598e2ef-5777-4e97-dd01-48f3a5cbc6cb"
      },
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                        hasil_putusan  count\n",
            "0               Menolak permintaan peninjauan kembali   1383\n",
            "1                              Mengabulkan Seluruhnya   1269\n",
            "2                                             Menolak   1236\n",
            "3                                Mengabulkan Sebagian    340\n",
            "4                                Tidak Dapat Diterima    165\n",
            "5           Mengabulkan permohonan peninjauan kembali    159\n",
            "6          Permintaan dinyatakan tidak dapat diterima     92\n",
            "7                                          Pencabutan     52\n",
            "8                                         Membatalkan     39\n",
            "9                                         Membetulkan      8\n",
            "10  Mengabulkan permohonan keberatan hak uji materiil      1\n",
            "             jenis_pajak  count\n",
            "0            PPN & PPnBM   2354\n",
            "1            Bea & Cukai    912\n",
            "2              PPh Badan    421\n",
            "3           Pajak Daerah    303\n",
            "4           PPh Pasal 26    268\n",
            "5           PPh Pasal 23    187\n",
            "6   PPh Pasal 4 Ayat (2)     88\n",
            "7           PPh Pasal 21     60\n",
            "8                Gugatan     47\n",
            "9                    PBB     23\n",
            "10     PPh Orang Pribadi     20\n",
            "11          PPh Pasal 22     19\n",
            "12          PPh Pasal 15     18\n",
            "13          PPh Pasal 25     17\n",
            "14               Lainnya      6\n",
            "15                 BPHTB      1\n",
            "       jenis_sengketa  count\n",
            "0             Banding   2684\n",
            "1  Peninjauan Kembali   1647\n",
            "2             Gugatan    413\n",
            "    tahun_pajak  count\n",
            "0          2013    648\n",
            "1          2008    564\n",
            "2          2009    495\n",
            "3          2010    491\n",
            "4          2012    444\n",
            "5          2011    338\n",
            "6          2016    283\n",
            "7          2015    263\n",
            "8          2014    245\n",
            "9          2007    222\n",
            "10         2006    128\n",
            "11         2005    113\n",
            "12         2017    103\n",
            "13         2018     95\n",
            "14         2004     86\n",
            "15         2020     85\n",
            "16         2019     45\n",
            "17         2003     29\n",
            "18         2002     22\n",
            "19         2000     18\n",
            "20         2021      8\n",
            "21         2001      5\n",
            "22         1999      4\n",
            "23         2022      4\n",
            "24         2106      3\n",
            "25         2104      2\n",
            "26         1996      1\n",
            "    tahun_putusan  count\n",
            "0            2014   1203\n",
            "1            2022    895\n",
            "2            2013    664\n",
            "3            2015    657\n",
            "4            2017    372\n",
            "5            2020    210\n",
            "6            2021    202\n",
            "7            2016    145\n",
            "8            2018    135\n",
            "9            2012    118\n",
            "10           2011     75\n",
            "11           2023     29\n",
            "12           2010     23\n",
            "13           2019      8\n",
            "14           2009      7\n",
            "15           2008      1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "row = df.index[df['hasil_putusan'] == 'Mengabulkan permohonan keberatan hak uji materiil'].tolist()\n",
        "print(row)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Xlq25jH5Fr2Q",
        "outputId": "968d5a3c-06a9-4996-fe89-07d5d427e170"
      },
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1644]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 163,
      "metadata": {
        "id": "kTNSxPUuPcG6"
      },
      "outputs": [],
      "source": [
        "df1 = df.copy()\n",
        "df1.drop(labels=[1644], axis=0)\n",
        "indexDrop = df1[ (df1['hasil_putusan'] == \"Mengabulkan permohonan keberatan hak uji materiil\")].index\n",
        "df1.drop(indexDrop , inplace=True)\n",
        "df1.drop(columns=['putusan', 'teks_html', 'teks_raw'], inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()\n",
        "df1.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ipk6cwOskWyo",
        "outputId": "58b66b36-171f-43c7-bdfb-706c9ae13bad"
      },
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 4744 entries, 0 to 6164\n",
            "Data columns (total 9 columns):\n",
            " #   Column          Non-Null Count  Dtype \n",
            "---  ------          --------------  ----- \n",
            " 0   putusan         4744 non-null   object\n",
            " 1   jenis_sengketa  4744 non-null   object\n",
            " 2   jenis_pajak     4744 non-null   object\n",
            " 3   tahun_pajak     4744 non-null   int64 \n",
            " 4   hasil_putusan   4744 non-null   object\n",
            " 5   tahun_putusan   4744 non-null   int64 \n",
            " 6   teks_raw        4744 non-null   object\n",
            " 7   teks_html       4744 non-null   object\n",
            " 8   ketua           4744 non-null   object\n",
            "dtypes: int64(2), object(7)\n",
            "memory usage: 499.7+ KB\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 4743 entries, 0 to 6164\n",
            "Data columns (total 6 columns):\n",
            " #   Column          Non-Null Count  Dtype \n",
            "---  ------          --------------  ----- \n",
            " 0   jenis_sengketa  4743 non-null   object\n",
            " 1   jenis_pajak     4743 non-null   object\n",
            " 2   tahun_pajak     4743 non-null   int64 \n",
            " 3   hasil_putusan   4743 non-null   object\n",
            " 4   tahun_putusan   4743 non-null   int64 \n",
            " 5   ketua           4743 non-null   object\n",
            "dtypes: int64(2), object(4)\n",
            "memory usage: 259.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SDrEEz2ASSwO"
      },
      "source": [
        "# Seperating the dataset into target variables and independent variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 165,
      "metadata": {
        "id": "FKsBbwblSRw7"
      },
      "outputs": [],
      "source": [
        "df_cat = df1[['jenis_pajak', 'jenis_sengketa', 'ketua', 'tahun_pajak', 'tahun_putusan']]\n",
        "df_target = df1['hasil_putusan']"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Creating Data Visualization"
      ],
      "metadata": {
        "id": "e_7WvJIJj3sh"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 166,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "yJNiXjNJmUjH",
        "outputId": "b2a74f49-35bd-4470-9795-e7a288a5440f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Create data visualization\n",
        "sns.pairplot(df_cat, diag_kind='kde')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 167,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "Y5VyBxpGrU0w",
        "outputId": "9bb92c70-94cb-49cf-bf45-c4d4746e6dd1"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.histplot(df['tahun_pajak'], kde=True)\n",
        "plt.title('Distribution of Tax Year')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Frequency')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 168,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "JOeXNsc-8AFD",
        "outputId": "6d43aa85-48a6-454c-aae7-e834fb915d82"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "df['jenis_pajak'].value_counts(sort=False).sort_values(ascending=True).plot(kind='bar')\n",
        "plt.title('')\n",
        "plt.xlabel('Jenis Pajak')\n",
        "plt.ylabel('Jumlah')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 169,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699
        },
        "id": "ZKt_zQD7sAhv",
        "outputId": "b88ad9cf-5347-427e-fe55-b97b65c6871f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib as mpl\n",
        "mpl.rcParams['axes.facecolor'] = 'white'\n",
        "counts = df1['hasil_putusan'].value_counts(sort=False).sort_values(ascending=True).plot(kind='bar')\n",
        "plt.title(' ')\n",
        "plt.xlabel('Putusan')\n",
        "plt.ylabel('Jumlah')\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 170,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "7x5YcicUw1xP",
        "outputId": "d4efbe7e-ae7b-4f25-9e8d-89a7415e9a4a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "counts = df.groupby(['tahun_putusan', 'jenis_pajak']).size().reset_index(name='count')\n",
        "\n",
        "counts.pivot(index='tahun_putusan', columns='jenis_pajak', values='count').plot()\n",
        "plt.title('')\n",
        "plt.xlabel('Tahun')\n",
        "plt.ylabel('Jumlah')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 171,
      "metadata": {
        "id": "Lj1Rz2Q1wT5B"
      },
      "outputs": [],
      "source": [
        "# Check the distribution of the target variable\n",
        "#sns.histplot(df['hasil_putusan'], kde=True)\n",
        "#plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "joZxILVsSiPN"
      },
      "source": [
        "# Resetting indices to avoid NaNs during concatenation and performing one-hot encoding"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 172,
      "metadata": {
        "id": "Txo6dAV5S-85",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "92f2f95e-0861-401a-ac37-24222961fbc8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      hasil_putusan\n",
              "0                 6\n",
              "1                 6\n",
              "2                 6\n",
              "3                 6\n",
              "4                 6\n",
              "...             ...\n",
              "4738              6\n",
              "4739              6\n",
              "4740              8\n",
              "4741              6\n",
              "4742              4\n",
              "\n",
              "[4743 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0ae3d6fc-e5e9-447e-a161-f7d53d044457\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>hasil_putusan</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4738</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4739</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4740</th>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4741</th>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4742</th>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4743 rows × 1 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ae3d6fc-e5e9-447e-a161-f7d53d044457')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0ae3d6fc-e5e9-447e-a161-f7d53d044457 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0ae3d6fc-e5e9-447e-a161-f7d53d044457');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ab23cc2a-0ac2-472e-bb6c-76313d588a45\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ab23cc2a-0ac2-472e-bb6c-76313d588a45')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ab23cc2a-0ac2-472e-bb6c-76313d588a45 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_target1",
              "summary": "{\n  \"name\": \"df_target1\",\n  \"rows\": 4743,\n  \"fields\": [\n    {\n      \"column\": \"hasil_putusan\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          7,\n          5,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 172
        }
      ],
      "source": [
        "df_cat.reset_index(drop=True, inplace=True)\n",
        "df_target.reset_index(drop=True, inplace=True)\n",
        "\n",
        "from sklearn import preprocessing\n",
        "label_encoder = preprocessing.LabelEncoder()\n",
        "df_target= label_encoder.fit_transform(df_target)\n",
        "\n",
        "df_target1 = pd.DataFrame(df_target, columns=['hasil_putusan'])\n",
        "df_target1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 173,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "b58__wtaTZP_",
        "outputId": "a86a6775-6ccc-443e-e829-e22cc4b9aea7"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkQAAAGxCAYAAACDV6ltAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABQ90lEQVR4nO3dd3hUZf7+8XcKICUESEJHSoAAJiGhCIRgFBF1WVRAxbKiLj9ALLiriIpIVUBFVxddcdFFwIJ8FVxQcBWxgDTBUIKhNyGUJEhCQkuZ3x9PZkKkh5k5Mzn367pynZOZMyefoSR3nhrgcDgciIiIiNhYoNUFiIiIiFhNgUhERERsT4FIREREbE+BSERERGxPgUhERERsT4FIREREbE+BSERERGxPgUhERERsT4FIREREbE+BSERERGxPgUhERERsT4FIREREbE+BSERERGxPgUhERERsT4FIREREbE+BSERERGxPgUhERERsT4FIREREbM/SQPTzzz/z0EMPkZiYSFRUFIsWLTrntSNHjiQqKor333+/xONHjhzhySefpE2bNrRr147hw4eTm5tb4ppNmzZxzz33EBMTQ1JSElOnTvXE2xERERE/ZWkgOnbsGFFRUYwaNeq8133zzTesW7eOmjVrnvHc0KFD2bZtG9OmTWPKlCmsXr2akSNHup7Pycmhf//+1K1blzlz5jBs2DDefPNNPvnkE7e/HxEREfFPwVZ+8aSkJJKSks57zcGDBxk3bhzvvfcegwYNKvHc9u3bWbJkCZ9++ikxMTEAjBgxgoEDBzJs2DBq1arFvHnzyMvLY/z48ZQvX55mzZqRmprKtGnT6Nu3r8fem4iIiPgPnx5DVFhYyFNPPUX//v1p1qzZGc8nJydTtWpVVxgCSEhIIDAwkPXr1wOwdu1a2rVrR/ny5V3XJCYmsnPnTrKysjz/JkRERMTn+XQgmjp1KsHBwfTr1++sz2dkZFCjRo0SjwUHBxMaGkp6errrmvDw8BLXOD/PyMjwQNUiIiLibyztMjuflJQUZsyYwZw5cwgICLC6HBERESnDfDYQrV69mszMTK677jrXYwUFBbz00kvMmDGDxYsXEx4ezuHDh0u8Lj8/n6ysLCIiIgDTGvTHliDn539sORIRERF78tlAdOutt5KQkFDisf79+3PrrbfSu3dvAOLj48nOziYlJYXo6GgAVqxYQWFhIbGxsQDExcXx+uuvk5eXR7ly5QBYtmwZjRs3JjQ01IvvSERERHyVpYEoNzeXPXv2uD7fu3cvqamphIaGUrduXapXr17i+nLlyhEeHk6TJk0AiIyMpEuXLjz//POMGTOGvLw8xo0bR48ePahVqxYAPXv25K233uK5555jwIABbN26lRkzZvDss896742KiIiITwtwOBwOq774ypUrzzpgulevXkycOPGMx7t27Uq/fv144IEHXI8dOXKEcePGsXjxYgIDA+nevTsjRoygcuXKrms2bdrE2LFj2bBhA9WrV+cvf/kLAwcO9Mh7EhEpKwoLIfAyp9644x4i3mBpIBIREd825wdIL+UKJRGh0Pv8S82J+AyfHUMkIiLWS8+CA5lWVyHieWrIFBEREdtTIBIRERHbUyASERER21MgEhEREdtTIBIRERHbUyASERER21MgEhEREdtTIBIRERHbUyASERER21MgEhEREdtTIBIRERHbUyASERER21MgEhEREdtTIBIRERHbUyASERER21MgEhEREdtTIBIRERHbUyASERER21MgEhEREdtTIBIRERHbUyASERER21MgEhEREdtTIBIRERHbUyASERER21MgEhEREdtTIBIRERHbUyAS8SOFhb5xDxGRsibY6gJE5OIFBsKcHyA9q3SvjwiF3knurUlEpCxQIBLxM+lZcCDT6ipERMoWdZmJiIiI7SkQiYiIiO0pEImIiIjtKRCJiIiI7SkQiYiIiO0pEImIuInWiRLxX5p2LyLiJlonSsR/KRCJiLiR1okS8U/qMhMRERHbUyASERER27M0EP3888889NBDJCYmEhUVxaJFi1zP5eXl8corr9CzZ0/i4uJITExk2LBhHDx4sMQ9jhw5wpNPPkmbNm1o164dw4cPJzc3t8Q1mzZt4p577iEmJoakpCSmTp3qlfcnIiIi/sHSQHTs2DGioqIYNWrUGc+dOHGCX3/9lcGDBzNnzhzefPNNdu7cyeDBg0tcN3ToULZt28a0adOYMmUKq1evZuTIka7nc3Jy6N+/P3Xr1mXOnDkMGzaMN998k08++cTj709ERET8g6WDqpOSkkhKOvuUipCQEKZNm1biseeff5477riDtLQ06taty/bt21myZAmffvopMTExAIwYMYKBAwcybNgwatWqxbx588jLy2P8+PGUL1+eZs2akZqayrRp0+jbt6/H36OIiIj4Pr8aQ5STk0NAQABVq1YFIDk5mapVq7rCEEBCQgKBgYGsX78egLVr19KuXTvKly/vuiYxMZGdO3eSlVXKubEiIiJSpvhNIDp58iSTJk2iR48eVKlSBYCMjAxq1KhR4rrg4GBCQ0NJT093XRMeHl7iGufnGRkZXqhcREREfJ1fBKK8vDwef/xxHA4HY8aMsbocERERKWN8fmHGvLw8/va3v5GWlsb06dNdrUNgWnoOHz5c4vr8/HyysrKIiIhwXfPHliDn539sORIRERF78ukWImcY2r17N++//z7Vq1cv8Xx8fDzZ2dmkpKS4HluxYgWFhYXExsYCEBcXx+rVq8nLy3Nds2zZMho3bkxoaKh33oiIiIj4NEsDUW5uLqmpqaSmpgKwd+9eUlNTSUtLIy8vjyFDhpCSksKkSZMoKCggPT2d9PR0Tp06BUBkZCRdunTh+eefZ/369axZs4Zx48bRo0cPatWqBUDPnj0pV64czz33HFu3bmXBggXMmDGDBx980LL3LSIiIr7F0i6zlJQU+vXr5/p8woQJAPTq1YtHH32UxYsXA3DrrbeWeN2MGTPo0KEDAJMmTWLcuHHcf//9BAYG0r17d0aMGOG6NiQkhPfee4+xY8fSu3dvqlevzsMPP6wp9yIiIuJiaSDq0KEDmzdvPufz53vOqVq1arz66qvnvaZFixZ89NFHl1yfiIiI2INPjyESERER8QYFIhEREbE9BSIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsT1LA9HPP//MQw89RGJiIlFRUSxatKjE8w6HgzfeeIPExERiY2N54IEH2LVrV4lrjhw5wpNPPkmbNm1o164dw4cPJzc3t8Q1mzZt4p577iEmJoakpCSmTp3q6bcmIiIifsTSQHTs2DGioqIYNWrUWZ+fOnUqM2fOZPTo0cyePZuKFSvSv39/Tp486bpm6NChbNu2jWnTpjFlyhRWr17NyJEjXc/n5OTQv39/6taty5w5cxg2bBhvvvkmn3zyicffn4iIiPiHYCu/eFJSEklJSWd9zuFwMGPGDAYPHky3bt0AePnll0lISGDRokX06NGD7du3s2TJEj799FNiYmIAGDFiBAMHDmTYsGHUqlWLefPmkZeXx/jx4ylfvjzNmjUjNTWVadOm0bdvX6+9VxEREfFdPjuGaO/evaSnp5OQkOB6LCQkhNatW5OcnAxAcnIyVatWdYUhgISEBAIDA1m/fj0Aa9eupV27dpQvX951TWJiIjt37iQrK8tL70ZERER8mc8GovT0dADCwsJKPB4WFkZGRgYAGRkZ1KhRo8TzwcHBhIaGul6fkZFBeHh4iWucnzvvIyIiIvbms4FIRERExFt8NhBFREQAkJmZWeLxzMxMVwtPeHg4hw8fLvF8fn4+WVlZrteHh4ef0RLk/PyPLUciIiJiTz4biOrXr09ERATLly93PZaTk8O6deuIj48HID4+nuzsbFJSUlzXrFixgsLCQmJjYwGIi4tj9erV5OXlua5ZtmwZjRs3JjQ01EvvRkRERHyZpYEoNzeX1NRUUlNTATOQOjU1lbS0NAICAujXrx9vv/023377LZs3b2bYsGHUrFnTNessMjKSLl268Pzzz7N+/XrWrFnDuHHj6NGjB7Vq1QKgZ8+elCtXjueee46tW7eyYMECZsyYwYMPPmjZ+xYRERHfYum0+5SUFPr16+f6fMKECQD06tWLiRMnMmDAAI4fP87IkSPJzs6mbdu2vPvuu1SoUMH1mkmTJjFu3Djuv/9+AgMD6d69OyNGjHA9HxISwnvvvcfYsWPp3bs31atX5+GHH9aUexEREXEJcDgcDquLEJGL9848OJB54evOpnYYDLrFvfVISWXt76esvR+Rc/HZMUQiIiIi3qJAJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK259OBqKCggNdff52uXbsSGxtLt27deOutt3A4HK5rHA4Hb7zxBomJicTGxvLAAw+wa9euEvc5cuQITz75JG3atKFdu3YMHz6c3NxcL78bERER8VU+HYimTp3Kxx9/zMiRI1mwYAFDhw7l3XffZebMmSWumTlzJqNHj2b27NlUrFiR/v37c/LkSdc1Q4cOZdu2bUybNo0pU6awevVqRo4cacVbEhERER/k04EoOTmZ66+/nmuvvZb69etz0003kZiYyPr16wHTOjRjxgwGDx5Mt27daNGiBS+//DKHDh1i0aJFAGzfvp0lS5bwwgsv0Lp1a9q1a8eIESP48ssvOXjwoJVvT0RERHyETwei+Ph4VqxYwc6dOwHYtGkTa9as4ZprrgFg7969pKenk5CQ4HpNSEgIrVu3Jjk5GTChqmrVqsTExLiuSUhIIDAw0BWsRERExN6CrS7gfAYOHEhOTg4333wzQUFBFBQU8Pe//51bbrkFgPT0dADCwsJKvC4sLIyMjAwAMjIyqFGjRonng4ODCQ0Ndb1eRERE7K1ULUTXX389v//++xmPZ2dnc/311192UU4LFy5k/vz5vPrqq8yZM4eJEyfyn//8h7lz57rta4iIiIiUqoVo3759FBYWnvH4qVOn3Dou5+WXX2bgwIH06NEDgKioKNLS0njnnXfo1asXERERAGRmZlKzZk3X6zIzM2nRogUA4eHhHD58uMR98/PzycrKcr1eRERE7O2SAtG3337rOl+yZAkhISGuzwsLC1m+fDn16tVzW3EnTpwgICCgxGNBQUGuaff169cnIiKC5cuX07JlSwBycnJYt24dd999N2DGIWVnZ5OSkkJ0dDQAK1asoLCwkNjYWLfVKiIiIv7rkgLRI488AkBAQADPPPNMyRsFB1OvXr0zHr8c1113HVOmTKFu3bo0bdqU1NRUpk2bRp8+fVx19OvXj7fffpuGDRtSv3593njjDWrWrEm3bt0AiIyMpEuXLjz//POMGTOGvLw8xo0bR48ePahVq5bbahURERH/dUmBaNOmTQB07dqVTz/99IzByu42YsQI3njjDcaMGePqFuvbt68rmAEMGDCA48ePM3LkSLKzs2nbti3vvvsuFSpUcF0zadIkxo0bx/33309gYCDdu3dnxIgRHq1dRERE/EeA4/Rln0XE570zDw5klu61tcNg0C3urUdKKmt/P2Xt/YicS6mn3S9fvpzly5eTmZl5xgDrCRMmXHZhIiIiIt5SqkD05ptv8tZbbxEdHU1ERMQZA59FRERE/EmpAtGsWbOYMGECt912m5vLEREREfG+Ui3MmJeXR5s2bdxdi4iIiIglShWIbr/9dubPn+/uWkREREQsUaous5MnTzJ79myWL19OVFQUwcElb/Pss8+6pTgRERERbyhVINq8ebNra4wtW7aUeE4DrEVERMTflCoQzZw50911iIiIiFimVGOIRERERMqSUrUQ3XfffeftGpsxY0apCxIRERHxtlIFIufO8k75+fmkpqaydetWrU0kIiIifqdUgWj48OFnfXzy5MkcO3bssgoSERER8Ta3jiG65ZZb+Oyzz9x5SxERERGPc2sgSk5Opnz58u68pYiIiIjHlarL7NFHHy3xucPhID09nZSUFB5++GG3FCYiIiLiLaUKRCEhISU+DwgIoHHjxgwZMoTExES3FCYiIiLiLaUKRBMmTHB3HSIiIiKWKVUgckpJSWH79u0ANGvWjFatWrmlKBERERFvKlUgyszM5O9//zurVq2iatWqAGRnZ9OhQwf+8Y9/UKNGDbcWKSIiIuJJpZplNm7cOHJzc/nyyy9ZtWoVq1at4osvviAnJ4cXXnjB3TWKiIiIeFSpAtGSJUsYNWoUkZGRrseaNm3KqFGj+PHHH91WnIiIiIg3lCoQFRYWUq5cuTMeDw4OprCw8LKLEhEREfGmUgWijh078uKLL3Lw4EHXYwcPHmTChAl06tTJbcWJiIiIeEOpBlWPHDmSwYMHc/3111O7dm0ADhw4QLNmzXjllVfcWqCIiIiIp5UqENWpU4e5c+eybNkyduzYAUBkZCQJCQluLU5ERETEGy6py2z58uX86U9/Iicnh4CAADp37sx9993HfffdR0xMDD169GD16tWeqlVERETEIy4pEE2fPp0777yTKlWqnPFcSEgIffv2Zdq0aW4rTkRERMQbLikQbd68mS5dupzz+c6dO7Nx48bLLkpERETEmy4pEGVkZBAcfO5hR8HBwRw+fPiyixIRERHxpksKRLVq1WLr1q3nfH7z5s1ERERcdlEiIiIi3nRJgSgpKYk33niDkydPnvHciRMnmDx5Mtddd53bihMRERHxhkuadj948GC+/vprbrzxRu69914aN24MwI4dO/joo48oKCjgoYce8kihIiIiIp5ySYEoPDycWbNmMXr0aF577TUcDgcAAQEBJCYmMnLkSMLDwz1SqIiIiIinXPLCjPXq1WPq1KlkZWWxe/duABo2bEhoaKjbixMRERHxhlKtVA0QGhpKbGysO2sRERERsUSpNncVERERKUsUiERERMT2FIhERETE9hSIRERExPYUiERERMT2fD4QHTx4kKFDh9KhQwdiY2Pp2bMnGzZscD3vcDh44403SExMJDY2lgceeIBdu3aVuMeRI0d48sknadOmDe3atWP48OHk5uZ6+Z2IiIiIr/LpQJSVlcXdd99NuXLlmDp1Kl9++SVPP/10iTWPpk6dysyZMxk9ejSzZ8+mYsWK9O/fv8T2IkOHDmXbtm1MmzaNKVOmsHr1akaOHGnFWxIR8WuFheZDpKwp9TpE3jB16lRq167NhAkTXI81aNDAde5wOJgxYwaDBw+mW7duALz88sskJCSwaNEievTowfbt21myZAmffvopMTExAIwYMYKBAwcybNgwatWq5d03JSLiZ/ILYO6PsOU3KCiEcsFw1/XQuI7VlYm4j0+3EC1evJjo6GiGDBlCp06duO2225g9e7br+b1795Kenk5CQoLrsZCQEFq3bk1ycjIAycnJVK1a1RWGABISEggMDGT9+vXeezMiIn7q658hdbcJQwB5+fDZ95CVY2lZIm7l04Hot99+4+OPP6ZRo0a899573H333bzwwgvMnTsXgPT0dADCwsJKvC4sLIyMjAwAMjIyqFGjRonng4ODCQ0Ndb1eRETObvUm8wFwx7XwxJ1QJwyOnYT/+w7y8y0tT8RtfDoQORwOrrrqKp544glatWpF3759ufPOO5k1a5bVpYmIlHl7DsKHX5vzxFho2QiqVDLBqGIFSMuEH9ZZWaGI+/h0IIqIiCAyMrLEY02aNCEtLc31PEBmZmaJazIzMwkPDwcgPDycw4cPl3g+Pz+frKws1+tFRORMU/4LJ/OgXgRcG1f8eLUQ6NHJ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uOKKKyyuzn6qVKlyxvitSpUqUa1aNY3rssD999/P3XffzZQpU7j55ptZv349s2fPZuzYsVaXZkvXXXcdU6ZMoW7duq4us2nTptGnTx+rS/NrmnZvoQ8++ID33nuP9PR0WrZsyYgRI2jdurXVZdnSuda4mTBhgkKqj7jvvvs07d5C3333Ha+99hq7du2ifv36PPjgg9x5551Wl2VLOTk5vPHGGyxatIjMzExq1qxJjx49eOSRRyhfvrzV5fktBSIRERGxPa1DJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK2p0AkIiIitqdAJCIiIranQCQiIiK2p0AkIm5z33338eKLL3rk3itXriQqKors7GwA5syZQ7t27TzytUTEfhSIRMQvxMfHs3TpUkJCQiyroWvXrrz//vuWfX0R8Rxt7ioifqF8+fJERERYXYaIlFFqIRIRt3I4HLz88stcffXVdO7cmcmTJ7uemzZtGj179iQuLo6kpCRGjx5Nbm6u6/l9+/bx0EMP0b59e+Li4ujRowc//PADcGaX2aWYPHkyt956K7NmzSIpKYnWrVvz+OOPc/ToUdc1Z+vue/jhh3nmmWdcz+/bt48JEyYQFRXl2hDYee/Tvf/++3Tt2tX1+cqVK7n99tuJi4ujXbt23HXXXezbtw+APXv2MHjwYBISEoiPj6dPnz4sW7asxP26du3KlClTePbZZ4mPj+faa6/lk08+ueQ/BxE5NwUiEXGruXPnUqlSJWbPns1TTz3FW2+9xU8//QRAQEAAzz33HF988QUTJ05kxYoVvPLKK67Xjh07llOnTvHBBx8wf/58hg4dSqVKldxS1549e1i4cCFTpkzh3XffJTU1ldGjR1/06ydPnkzt2rUZMmQIS5cuZenSpRf1uvz8fB555BHat2/PvHnz+OSTT+jbty8BAQEAHDt2jKSkJN5//33mzp1Lly5deOihh0hLSytxn2nTphEdHc3nn3/OPffcw+jRo9mxY8dF1y8i56dAJCJuFRUVxaOPPkqjRo247bbbiI6OZvny5QA88MADdOzYkfr169OpUyf+9re/sXDhQtdr09LSaNOmDVFRUTRo0IDrrruO9u3bu6WukydP8vLLL9OyZUvat2/PiBEjWLBgAenp6Rf1+mrVqhEUFETlypWJiIi46O67nJwcjh49ynXXXceVV15JZGQkvXr1om7dugC0aNGCu+66i+bNm9OoUSP+9re/ceWVV7J48eIS97nmmmu49957adiwIQMGDKB69eqsXLny0v4QROScNIZIRNzK2ZXkFBERQWZmJgDLli3jnXfeYceOHeTk5FBQUMDJkyc5fvw4FStWpF+/fowePZqlS5eSkJBA9+7dadGihVvqqlOnDrVq1XJ9Hh8fT2FhITt37vTo2KRq1arRu3dv+vfvT+fOnenUqRM333wzNWvWBCA3N5c333yT77//nvT0dAoKCjhx4sQZLUSn/7kGBAQQHh7u+nMVkcunFiIRcavg4JK/ZwUEBOBwONi7dy+DBg0iKiqKyZMnM2fOHEaOHAlAXl4eAHfccQeLFi3i1ltvZcuWLdx+++3MnDnTK3U76zxdfn6+W143YcIEPvnkE+Lj41m4cCE33ngja9euBeCll17im2++4YknnuDDDz/k888/p3nz5q4/E6dz/bmKiHsoEImIV2zcuBGHw8EzzzxDXFwcjRs35tChQ2dcV6dOHe6++27efPNNHnzwQWbPnu2Wr79//34OHjzo+nzt2rUEBgbSuHFjAGrUqFGi+6ygoICtW7eWuEe5cuUoLCws8ViNGjXIyMgoEU5SU1PP+PqtWrVi0KBBzJo1i+bNm/PFF18AkJycTK9evbjhhhuIiooiPDzcNeBaRLxHgUhEvKJhw4bk5eUxc+ZMfvvtNz7//HNmzZpV4poXX3yRJUuW8Ntvv7Fx40ZWrlxJZGSkW75+hQoVeOaZZ9i0aROrV6/mhRde4Oabb3Z1l3Xs2JEffviB77//nu3btzN69OgzZrTVq1ePn3/+mYMHD3L48GEAOnTowOHDh5k6dSp79uzhww8/ZMmSJa7X/Pbbb7z66qskJyezb98+li5dyq5du2jSpInrz+Wbb74hNTWVTZs28eSTT54RukTE8zSGSES8okWLFjz77LNMnTqV1157jXbt2vHEE0/w9NNPu64pLCxk7NixHDhwgCpVqtClSxeeffZZt3z9K6+8khtuuIEBAwaQlZXFtddey6hRo1zP9+nTh02bNvH0008TFBTEAw88QIcOHUrcY8iQIYwcOZJu3bpx6tQpNm/eTGRkJKNGjeKdd97h7bffpnv37vz1r391tWxVrFiRHTt2MHfuXI4cOULNmjW59957ueuuuwB45plnGD58OHfddRfVq1dnwIABJZYiEBHvCHCoE1pEyrjJkyezaNEi/vvf/1pdioj4KHWZiYiIiO2py0xE/F6PHj3OmKbuNGbMGC9XIyL+SF1mIuL39u3bd84p8mFhYVSpUsXLFYmIv1EgEhEREdvTGCIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsT0FIhEREbE9BSIRERGxPQUiERERsb3/D5MAJxxIKNpwAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# @title hasil_putusan\n",
        "\n",
        "# Check the distribution of the target variable\n",
        "sns.histplot(df_target1['hasil_putusan'], kde=True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 174,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "6SJtZUUqTJpQ",
        "outputId": "0fe7510a-d39a-4fbd-a3da-ac5aead43de1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            jenis_pajak      jenis_sengketa  \\\n",
              "0           PPN & PPnBM  Peninjauan Kembali   \n",
              "1          PPh Pasal 22  Peninjauan Kembali   \n",
              "2             PPh Badan  Peninjauan Kembali   \n",
              "3           PPN & PPnBM  Peninjauan Kembali   \n",
              "4           PPN & PPnBM  Peninjauan Kembali   \n",
              "...                 ...                 ...   \n",
              "4738                PBB  Peninjauan Kembali   \n",
              "4739        PPN & PPnBM  Peninjauan Kembali   \n",
              "4740        Bea & Cukai  Peninjauan Kembali   \n",
              "4741       PPh Pasal 23  Peninjauan Kembali   \n",
              "4742  PPh Orang Pribadi  Peninjauan Kembali   \n",
              "\n",
              "                                      ketua  tahun_pajak  tahun_putusan  \\\n",
              "0                 Dr. H. Yulius, S.H., M.H.         2016           2023   \n",
              "1                 Dr. H. Yulius, S.H., M.H.         2016           2023   \n",
              "2                 Dr. H. Yulius, S.H., M.H.         2017           2023   \n",
              "3                 Dr. H. Yulius, S.H., M.H.         2016           2023   \n",
              "4                Dr. H. Yulius, S.H., M.H.          2017           2023   \n",
              "...                                     ...          ...            ...   \n",
              "4738  Widayatno Sastrohardjono, S.H., M.Sc.         2007           2009   \n",
              "4739  Widayatno Sastrohardjono, S.H., M.Sc.         2007           2009   \n",
              "4740   Widayatno Sastrohardjono, S.H., M.Sc         2007           2009   \n",
              "4741  Widayatno Sastrohardjono, S.H., M.Sc.         2003           2009   \n",
              "4742  Widayatno Sastrohardjono, S.H., M.Sc.         2005           2008   \n",
              "\n",
              "     hasil_putusan  \n",
              "0                6  \n",
              "1                6  \n",
              "2                6  \n",
              "3                6  \n",
              "4                6  \n",
              "...            ...  \n",
              "4738             6  \n",
              "4739             6  \n",
              "4740             8  \n",
              "4741             6  \n",
              "4742             4  \n",
              "\n",
              "[4743 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6fa3d9ac-2f4b-4d96-935b-38fd2d31f517\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>jenis_pajak</th>\n",
              "      <th>jenis_sengketa</th>\n",
              "      <th>ketua</th>\n",
              "      <th>tahun_pajak</th>\n",
              "      <th>tahun_putusan</th>\n",
              "      <th>hasil_putusan</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>PPN &amp; PPnBM</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
              "      <td>2016</td>\n",
              "      <td>2023</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>PPh Pasal 22</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
              "      <td>2016</td>\n",
              "      <td>2023</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>PPh Badan</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
              "      <td>2017</td>\n",
              "      <td>2023</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>PPN &amp; PPnBM</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
              "      <td>2016</td>\n",
              "      <td>2023</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>PPN &amp; PPnBM</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
              "      <td>2017</td>\n",
              "      <td>2023</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4738</th>\n",
              "      <td>PBB</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>Widayatno Sastrohardjono, S.H., M.Sc.</td>\n",
              "      <td>2007</td>\n",
              "      <td>2009</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4739</th>\n",
              "      <td>PPN &amp; PPnBM</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>Widayatno Sastrohardjono, S.H., M.Sc.</td>\n",
              "      <td>2007</td>\n",
              "      <td>2009</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4740</th>\n",
              "      <td>Bea &amp; Cukai</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>Widayatno Sastrohardjono, S.H., M.Sc</td>\n",
              "      <td>2007</td>\n",
              "      <td>2009</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4741</th>\n",
              "      <td>PPh Pasal 23</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>Widayatno Sastrohardjono, S.H., M.Sc.</td>\n",
              "      <td>2003</td>\n",
              "      <td>2009</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4742</th>\n",
              "      <td>PPh Orang Pribadi</td>\n",
              "      <td>Peninjauan Kembali</td>\n",
              "      <td>Widayatno Sastrohardjono, S.H., M.Sc.</td>\n",
              "      <td>2005</td>\n",
              "      <td>2008</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4743 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6fa3d9ac-2f4b-4d96-935b-38fd2d31f517')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6fa3d9ac-2f4b-4d96-935b-38fd2d31f517 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6fa3d9ac-2f4b-4d96-935b-38fd2d31f517');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-160edd31-984f-4897-95b7-f8f0be56b27e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-160edd31-984f-4897-95b7-f8f0be56b27e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-160edd31-984f-4897-95b7-f8f0be56b27e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_gabung",
              "summary": "{\n  \"name\": \"df_gabung\",\n  \"rows\": 4743,\n  \"fields\": [\n    {\n      \"column\": \"jenis_pajak\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"PPN & PPnBM\",\n          \"PPh Pasal 22\",\n          \"PPh Pasal 26\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"jenis_sengketa\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Peninjauan Kembali\",\n          \"Banding\",\n          \"Gugatan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ketua\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 529,\n        \"samples\": [\n          \"lr. Hendi Budi Santosa, M.Eng.\",\n          \"titip olah\",\n          \"Drs. Seno S.B. Hendra, M.M.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tahun_pajak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 1996,\n        \"max\": 2106,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          2018,\n          2022,\n          2019\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tahun_putusan\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 2008,\n        \"max\": 2023,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          2023,\n          2022,\n          2018\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hasil_putusan\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          7,\n          5,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 174
        }
      ],
      "source": [
        "frames = [df_cat, df_target1]\n",
        "df_gabung = pd.concat(frames, axis=1, join='inner')\n",
        "\n",
        "# Convert hasil_putusan to a categorical variable\n",
        "df_gabung['hasil_putusan'] = df_gabung['hasil_putusan'].astype('category')\n",
        "\n",
        "df_gabung"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Heatmap"
      ],
      "metadata": {
        "id": "K8g_TNnsvpew"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 175,
      "metadata": {
        "id": "nDB8uIg15b_B",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "e366d6f8-1fa0-4388-9c91-b834aa2f2479"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Convert hasil_putusan to categorical column with explicit categories\n",
        "df_gabung['hasil_putusan'] = pd.Categorical(df_gabung['hasil_putusan'], categories=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n",
        "\n",
        "# Group data by tahun_putusan and hasil_putusan, and count the number of occurrences\n",
        "grouped = df_gabung.groupby(['tahun_putusan', 'hasil_putusan']).size().reset_index(name='count')\n",
        "\n",
        "# Pivot the data to create a matrix of counts\n",
        "pivot = grouped.pivot(index='tahun_putusan', columns='hasil_putusan', values='count')\n",
        "\n",
        "# Create heatmap\n",
        "sns.heatmap(pivot, annot=True, cmap='coolwarm')\n",
        "plt.title('Count of Legal Decisions by Hasil Putusan and Tahun Putusan')\n",
        "plt.xlabel('Hasil Putusan')\n",
        "plt.ylabel('Tahun Putusan')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "158QZvTgT2j0"
      },
      "source": [
        "#  Exploratory Data Analysis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 176,
      "metadata": {
        "id": "1zecLwHKT4uj"
      },
      "outputs": [],
      "source": [
        "def class_distribution_table(df, column_name):\n",
        "    class_counts = df[column_name].value_counts().reset_index()\n",
        "    class_counts.columns = [column_name, 'count']\n",
        "    return class_counts"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 177,
      "metadata": {
        "id": "YUWXU9XT-ZRO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "663f43dc-3b49-4f1c-8030-ad4e985a0ddf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   hasil_putusan  count\n",
            "0              6   1383\n",
            "1              3   1269\n",
            "2              5   1236\n",
            "3              2    340\n",
            "4              9    165\n",
            "5              4    159\n",
            "6              8     92\n",
            "7              7     52\n",
            "8              0     39\n",
            "9              1      8\n",
            "10            10      0\n",
            "             jenis_pajak  count\n",
            "0            PPN & PPnBM   2353\n",
            "1            Bea & Cukai    912\n",
            "2              PPh Badan    421\n",
            "3           Pajak Daerah    303\n",
            "4           PPh Pasal 26    268\n",
            "5           PPh Pasal 23    187\n",
            "6   PPh Pasal 4 Ayat (2)     88\n",
            "7           PPh Pasal 21     60\n",
            "8                Gugatan     47\n",
            "9                    PBB     23\n",
            "10     PPh Orang Pribadi     20\n",
            "11          PPh Pasal 22     19\n",
            "12          PPh Pasal 15     18\n",
            "13          PPh Pasal 25     17\n",
            "14               Lainnya      6\n",
            "15                 BPHTB      1\n",
            "       jenis_sengketa  count\n",
            "0             Banding   2684\n",
            "1  Peninjauan Kembali   1646\n",
            "2             Gugatan    413\n"
          ]
        }
      ],
      "source": [
        "hasil_putusan_table = class_distribution_table(df_gabung, 'hasil_putusan')\n",
        "print(hasil_putusan_table)\n",
        "\n",
        "jenis_pajak_table = class_distribution_table(df_gabung, 'jenis_pajak')\n",
        "print(jenis_pajak_table)\n",
        "\n",
        "jenis_pajak_table = class_distribution_table(df_gabung, 'jenis_sengketa')\n",
        "print(jenis_pajak_table)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Object Type Value"
      ],
      "metadata": {
        "id": "0XKdPzjqnV06"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Object type values:\",np.count_nonzero(df_gabung.select_dtypes('object').columns))\n",
        "print(\"___________________________________________________________________________________________\")\n",
        "print(df_gabung.select_dtypes('object').columns)\n",
        "print(\"___________________________________________________________________________________________\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xPHgf_SwQNLy",
        "outputId": "64a2ef46-e67a-42a4-d032-675b83e1fa08"
      },
      "execution_count": 178,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Object type values: 3\n",
            "___________________________________________________________________________________________\n",
            "Index(['jenis_pajak', 'jenis_sengketa', 'ketua'], dtype='object')\n",
            "___________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "le = LabelEncoder()\n",
        "df_gabung['jenis_pajak'] = le.fit_transform(df_gabung['jenis_pajak'])\n",
        "df_gabung['jenis_sengketa'] = le.fit_transform(df_gabung['jenis_sengketa'])\n",
        "df_gabung['ketua'] = le.fit_transform(df_gabung['ketua'])"
      ],
      "metadata": {
        "id": "CMD_f9uBlCjR"
      },
      "execution_count": 179,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Descriptive Statistic"
      ],
      "metadata": {
        "id": "X6dJHID-l9RR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_gabung.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "XV-Pv3kjl_Qd",
        "outputId": "5da8e25c-1b85-4800-f19d-707f56abeba7"
      },
      "execution_count": 180,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       jenis_pajak  jenis_sengketa        ketua  tahun_pajak  tahun_putusan\n",
              "count  4743.000000     4743.000000  4743.000000  4743.000000    4743.000000\n",
              "mean      5.891419        0.781151   203.865697  2011.257854    2016.419777\n",
              "std       3.991796        0.930168   131.092655     4.809567       3.516582\n",
              "min       0.000000        0.000000     0.000000  1996.000000    2008.000000\n",
              "25%       5.000000        0.000000    90.000000  2008.000000    2014.000000\n",
              "50%       5.000000        0.000000   177.000000  2011.000000    2015.000000\n",
              "75%       6.000000        2.000000   309.000000  2013.000000    2020.000000\n",
              "max      15.000000        2.000000   528.000000  2106.000000    2023.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3b4a810a-030f-4f45-b56d-3a629ea24ceb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>jenis_pajak</th>\n",
              "      <th>jenis_sengketa</th>\n",
              "      <th>ketua</th>\n",
              "      <th>tahun_pajak</th>\n",
              "      <th>tahun_putusan</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4743.000000</td>\n",
              "      <td>4743.000000</td>\n",
              "      <td>4743.000000</td>\n",
              "      <td>4743.000000</td>\n",
              "      <td>4743.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5.891419</td>\n",
              "      <td>0.781151</td>\n",
              "      <td>203.865697</td>\n",
              "      <td>2011.257854</td>\n",
              "      <td>2016.419777</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.991796</td>\n",
              "      <td>0.930168</td>\n",
              "      <td>131.092655</td>\n",
              "      <td>4.809567</td>\n",
              "      <td>3.516582</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1996.000000</td>\n",
              "      <td>2008.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>2008.000000</td>\n",
              "      <td>2014.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>177.000000</td>\n",
              "      <td>2011.000000</td>\n",
              "      <td>2015.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>6.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>309.000000</td>\n",
              "      <td>2013.000000</td>\n",
              "      <td>2020.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>15.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>528.000000</td>\n",
              "      <td>2106.000000</td>\n",
              "      <td>2023.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3b4a810a-030f-4f45-b56d-3a629ea24ceb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3b4a810a-030f-4f45-b56d-3a629ea24ceb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3b4a810a-030f-4f45-b56d-3a629ea24ceb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d2ad1499-1e5d-4181-b9df-f355393b1a87\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d2ad1499-1e5d-4181-b9df-f355393b1a87')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d2ad1499-1e5d-4181-b9df-f355393b1a87 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_gabung\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"jenis_pajak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1674.8440574251906,\n        \"min\": 0.0,\n        \"max\": 4743.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4743.0,\n          5.891418933164664,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"jenis_sengketa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1676.6154715754835,\n        \"min\": 0.0,\n        \"max\": 4743.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7811511701454775,\n          2.0,\n          0.9301676826707487\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ketua\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1612.0711333912964,\n        \"min\": 0.0,\n        \"max\": 4743.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          203.86569681636095,\n          177.0,\n          4743.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tahun_pajak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1277.0988565048492,\n        \"min\": 4.809567229594324,\n        \"max\": 4743.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2011.2578536791061,\n          2011.0,\n          4743.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tahun_putusan\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1277.4338637941307,\n        \"min\": 3.516581945485313,\n        \"max\": 4743.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2016.4197765127556,\n          2015.0,\n          4743.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Integer Type Value"
      ],
      "metadata": {
        "id": "rXWmAkP9nQOW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"___________________________________________________________________________________________\")\n",
        "print(\"Int type values:\",np.count_nonzero(df_gabung.select_dtypes('int').columns))\n",
        "print(df_gabung.select_dtypes('int').columns)\n",
        "print(\"___________________________________________________________________________________________\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tcvN-aRdnT9r",
        "outputId": "f31085cc-d9a1-43fa-c9f8-311d6640a27a"
      },
      "execution_count": 181,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "___________________________________________________________________________________________\n",
            "Int type values: 5\n",
            "Index(['jenis_pajak', 'jenis_sengketa', 'ketua', 'tahun_pajak',\n",
            "       'tahun_putusan'],\n",
            "      dtype='object')\n",
            "___________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Descriptive Statistic"
      ],
      "metadata": {
        "id": "JviGzEtSnoWO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_gabung.select_dtypes('int').agg(['count','min', 'max','mean','median','quantile','kurt','skew','var','std'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "id": "v7osM9JknqX2",
        "outputId": "0f59f887-f855-4815-cd45-88e0a4ef1e90"
      },
      "execution_count": 182,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          jenis_pajak  jenis_sengketa         ketua  tahun_pajak  \\\n",
              "count     4743.000000     4743.000000   4743.000000  4743.000000   \n",
              "min          0.000000        0.000000      0.000000  1996.000000   \n",
              "max         15.000000        2.000000    528.000000  2106.000000   \n",
              "mean         5.891419        0.781151    203.865697  2011.257854   \n",
              "median       5.000000        0.000000    177.000000  2011.000000   \n",
              "quantile     5.000000        0.000000    177.000000  2011.000000   \n",
              "kurt         0.199027       -1.695109     -0.860554   151.849472   \n",
              "skew         0.970525        0.447063      0.485906     7.849847   \n",
              "var         15.934433        0.865212  17185.284152    23.131937   \n",
              "std          3.991796        0.930168    131.092655     4.809567   \n",
              "\n",
              "          tahun_putusan  \n",
              "count       4743.000000  \n",
              "min         2008.000000  \n",
              "max         2023.000000  \n",
              "mean        2016.419777  \n",
              "median      2015.000000  \n",
              "quantile    2015.000000  \n",
              "kurt          -1.128798  \n",
              "skew           0.564730  \n",
              "var           12.366349  \n",
              "std            3.516582  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-21355cc0-e5f3-4d8c-9dfc-189892db03db\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>jenis_pajak</th>\n",
              "      <th>jenis_sengketa</th>\n",
              "      <th>ketua</th>\n",
              "      <th>tahun_pajak</th>\n",
              "      <th>tahun_putusan</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4743.000000</td>\n",
              "      <td>4743.000000</td>\n",
              "      <td>4743.000000</td>\n",
              "      <td>4743.000000</td>\n",
              "      <td>4743.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1996.000000</td>\n",
              "      <td>2008.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>15.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>528.000000</td>\n",
              "      <td>2106.000000</td>\n",
              "      <td>2023.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5.891419</td>\n",
              "      <td>0.781151</td>\n",
              "      <td>203.865697</td>\n",
              "      <td>2011.257854</td>\n",
              "      <td>2016.419777</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>median</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>177.000000</td>\n",
              "      <td>2011.000000</td>\n",
              "      <td>2015.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>quantile</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>177.000000</td>\n",
              "      <td>2011.000000</td>\n",
              "      <td>2015.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>kurt</th>\n",
              "      <td>0.199027</td>\n",
              "      <td>-1.695109</td>\n",
              "      <td>-0.860554</td>\n",
              "      <td>151.849472</td>\n",
              "      <td>-1.128798</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>skew</th>\n",
              "      <td>0.970525</td>\n",
              "      <td>0.447063</td>\n",
              "      <td>0.485906</td>\n",
              "      <td>7.849847</td>\n",
              "      <td>0.564730</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>var</th>\n",
              "      <td>15.934433</td>\n",
              "      <td>0.865212</td>\n",
              "      <td>17185.284152</td>\n",
              "      <td>23.131937</td>\n",
              "      <td>12.366349</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3.991796</td>\n",
              "      <td>0.930168</td>\n",
              "      <td>131.092655</td>\n",
              "      <td>4.809567</td>\n",
              "      <td>3.516582</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21355cc0-e5f3-4d8c-9dfc-189892db03db')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-21355cc0-e5f3-4d8c-9dfc-189892db03db button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-21355cc0-e5f3-4d8c-9dfc-189892db03db');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c3f7eae0-f359-4eb3-a6da-31a24558e6b3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c3f7eae0-f359-4eb3-a6da-31a24558e6b3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c3f7eae0-f359-4eb3-a6da-31a24558e6b3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_gabung\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"jenis_pajak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1498.0520428008342,\n        \"min\": 0.0,\n        \"max\": 4743.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          15.934432887089793,\n          0.0,\n          0.19902712422448898\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"jenis_sengketa\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1499.751641981714,\n        \"min\": -1.6951085596806024,\n        \"max\": 4743.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.0,\n          0.44706264666807927,\n          4743.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ketua\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5422.809225467433,\n        \"min\": -0.8605540972482637,\n        \"max\": 17185.284152018565,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          17185.284152018565,\n          0.0,\n          -0.8605540972482637\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tahun_pajak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1504.5947759752746,\n        \"min\": 4.809567229594324,\n        \"max\": 4743.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          23.131936935987625,\n          1996.0,\n          151.8494721759326\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tahun_putusan\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1520.1349906202345,\n        \"min\": -1.128798460553645,\n        \"max\": 4743.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          12.36634857931327,\n          2008.0,\n          -1.128798460553645\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 182
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Outlier Detector"
      ],
      "metadata": {
        "id": "t_IikFi3n5IQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(30,5))\n",
        "sns.boxplot(data=df_gabung.select_dtypes('int'))\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "bT2DNqjun7LQ",
        "outputId": "ccce1ed3-019f-4f0c-a9a4-44bcf4ef403f"
      },
      "execution_count": 183,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 3000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Distribution Variable"
      ],
      "metadata": {
        "id": "I4n3UjozoCMj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_gabung.select_dtypes('int').hist(figsize=(25,25), ec='w')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "YX_o1uskoET8",
        "outputId": "dcc821ff-79f2-4768-ca35-ad80608e4094"
      },
      "execution_count": 184,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2500x2500 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Realation Between Variable"
      ],
      "metadata": {
        "id": "kjKqo32RoNn4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def color_(value):\n",
        "    if value < 0 :\n",
        "        color = 'red'\n",
        "    elif value == 1 :\n",
        "        color = 'blue'\n",
        "    else:\n",
        "        color = 'green'\n",
        "    return 'color: %s' % color\n",
        "df_gabung.select_dtypes('int').corr().style.applymap(color_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "94br3nhWoQGo",
        "outputId": "0b9e5529-24a0-4ec7-e089-f2d46262e549"
      },
      "execution_count": 185,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7924a2188be0>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_7fefe_row0_col0, #T_7fefe_row1_col1, #T_7fefe_row2_col2, #T_7fefe_row3_col3, #T_7fefe_row4_col4 {\n",
              "  color: blue;\n",
              "}\n",
              "#T_7fefe_row0_col1, #T_7fefe_row0_col4, #T_7fefe_row1_col0, #T_7fefe_row1_col4, #T_7fefe_row2_col3, #T_7fefe_row3_col2, #T_7fefe_row3_col4, #T_7fefe_row4_col0, #T_7fefe_row4_col1, #T_7fefe_row4_col3 {\n",
              "  color: green;\n",
              "}\n",
              "#T_7fefe_row0_col2, #T_7fefe_row0_col3, #T_7fefe_row1_col2, #T_7fefe_row1_col3, #T_7fefe_row2_col0, #T_7fefe_row2_col1, #T_7fefe_row2_col4, #T_7fefe_row3_col0, #T_7fefe_row3_col1, #T_7fefe_row4_col2 {\n",
              "  color: red;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_7fefe\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_7fefe_level0_col0\" class=\"col_heading level0 col0\" >jenis_pajak</th>\n",
              "      <th id=\"T_7fefe_level0_col1\" class=\"col_heading level0 col1\" >jenis_sengketa</th>\n",
              "      <th id=\"T_7fefe_level0_col2\" class=\"col_heading level0 col2\" >ketua</th>\n",
              "      <th id=\"T_7fefe_level0_col3\" class=\"col_heading level0 col3\" >tahun_pajak</th>\n",
              "      <th id=\"T_7fefe_level0_col4\" class=\"col_heading level0 col4\" >tahun_putusan</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_7fefe_level0_row0\" class=\"row_heading level0 row0\" >jenis_pajak</th>\n",
              "      <td id=\"T_7fefe_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n",
              "      <td id=\"T_7fefe_row0_col1\" class=\"data row0 col1\" >0.040682</td>\n",
              "      <td id=\"T_7fefe_row0_col2\" class=\"data row0 col2\" >-0.116144</td>\n",
              "      <td id=\"T_7fefe_row0_col3\" class=\"data row0 col3\" >-0.120135</td>\n",
              "      <td id=\"T_7fefe_row0_col4\" class=\"data row0 col4\" >0.014094</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_7fefe_level0_row1\" class=\"row_heading level0 row1\" >jenis_sengketa</th>\n",
              "      <td id=\"T_7fefe_row1_col0\" class=\"data row1 col0\" >0.040682</td>\n",
              "      <td id=\"T_7fefe_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
              "      <td id=\"T_7fefe_row1_col2\" class=\"data row1 col2\" >-0.216442</td>\n",
              "      <td id=\"T_7fefe_row1_col3\" class=\"data row1 col3\" >-0.070771</td>\n",
              "      <td id=\"T_7fefe_row1_col4\" class=\"data row1 col4\" >0.328779</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_7fefe_level0_row2\" class=\"row_heading level0 row2\" >ketua</th>\n",
              "      <td id=\"T_7fefe_row2_col0\" class=\"data row2 col0\" >-0.116144</td>\n",
              "      <td id=\"T_7fefe_row2_col1\" class=\"data row2 col1\" >-0.216442</td>\n",
              "      <td id=\"T_7fefe_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n",
              "      <td id=\"T_7fefe_row2_col3\" class=\"data row2 col3\" >0.005755</td>\n",
              "      <td id=\"T_7fefe_row2_col4\" class=\"data row2 col4\" >-0.272511</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_7fefe_level0_row3\" class=\"row_heading level0 row3\" >tahun_pajak</th>\n",
              "      <td id=\"T_7fefe_row3_col0\" class=\"data row3 col0\" >-0.120135</td>\n",
              "      <td id=\"T_7fefe_row3_col1\" class=\"data row3 col1\" >-0.070771</td>\n",
              "      <td id=\"T_7fefe_row3_col2\" class=\"data row3 col2\" >0.005755</td>\n",
              "      <td id=\"T_7fefe_row3_col3\" class=\"data row3 col3\" >1.000000</td>\n",
              "      <td id=\"T_7fefe_row3_col4\" class=\"data row3 col4\" >0.500216</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_7fefe_level0_row4\" class=\"row_heading level0 row4\" >tahun_putusan</th>\n",
              "      <td id=\"T_7fefe_row4_col0\" class=\"data row4 col0\" >0.014094</td>\n",
              "      <td id=\"T_7fefe_row4_col1\" class=\"data row4 col1\" >0.328779</td>\n",
              "      <td id=\"T_7fefe_row4_col2\" class=\"data row4 col2\" >-0.272511</td>\n",
              "      <td id=\"T_7fefe_row4_col3\" class=\"data row4 col3\" >0.500216</td>\n",
              "      <td id=\"T_7fefe_row4_col4\" class=\"data row4 col4\" >1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {},
          "execution_count": 185
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_gabung.select_dtypes('int').cov().style.applymap(color_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "5mGh-FN0oc6a",
        "outputId": "30ee4e45-41c4-4f41-df70-640a79516113"
      },
      "execution_count": 186,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x79249ad809a0>"
            ],
            "text/html": [
              "<style type=\"text/css\">\n",
              "#T_e40fe_row0_col0, #T_e40fe_row0_col1, #T_e40fe_row0_col4, #T_e40fe_row1_col0, #T_e40fe_row1_col1, #T_e40fe_row1_col4, #T_e40fe_row2_col2, #T_e40fe_row2_col3, #T_e40fe_row3_col2, #T_e40fe_row3_col3, #T_e40fe_row3_col4, #T_e40fe_row4_col0, #T_e40fe_row4_col1, #T_e40fe_row4_col3, #T_e40fe_row4_col4 {\n",
              "  color: green;\n",
              "}\n",
              "#T_e40fe_row0_col2, #T_e40fe_row0_col3, #T_e40fe_row1_col2, #T_e40fe_row1_col3, #T_e40fe_row2_col0, #T_e40fe_row2_col1, #T_e40fe_row2_col4, #T_e40fe_row3_col0, #T_e40fe_row3_col1, #T_e40fe_row4_col2 {\n",
              "  color: red;\n",
              "}\n",
              "</style>\n",
              "<table id=\"T_e40fe\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_e40fe_level0_col0\" class=\"col_heading level0 col0\" >jenis_pajak</th>\n",
              "      <th id=\"T_e40fe_level0_col1\" class=\"col_heading level0 col1\" >jenis_sengketa</th>\n",
              "      <th id=\"T_e40fe_level0_col2\" class=\"col_heading level0 col2\" >ketua</th>\n",
              "      <th id=\"T_e40fe_level0_col3\" class=\"col_heading level0 col3\" >tahun_pajak</th>\n",
              "      <th id=\"T_e40fe_level0_col4\" class=\"col_heading level0 col4\" >tahun_putusan</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_e40fe_level0_row0\" class=\"row_heading level0 row0\" >jenis_pajak</th>\n",
              "      <td id=\"T_e40fe_row0_col0\" class=\"data row0 col0\" >15.934433</td>\n",
              "      <td id=\"T_e40fe_row0_col1\" class=\"data row0 col1\" >0.151053</td>\n",
              "      <td id=\"T_e40fe_row0_col2\" class=\"data row0 col2\" >-60.777555</td>\n",
              "      <td id=\"T_e40fe_row0_col3\" class=\"data row0 col3\" >-2.306454</td>\n",
              "      <td id=\"T_e40fe_row0_col4\" class=\"data row0 col4\" >0.197846</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_e40fe_level0_row1\" class=\"row_heading level0 row1\" >jenis_sengketa</th>\n",
              "      <td id=\"T_e40fe_row1_col0\" class=\"data row1 col0\" >0.151053</td>\n",
              "      <td id=\"T_e40fe_row1_col1\" class=\"data row1 col1\" >0.865212</td>\n",
              "      <td id=\"T_e40fe_row1_col2\" class=\"data row1 col2\" >-26.392536</td>\n",
              "      <td id=\"T_e40fe_row1_col3\" class=\"data row1 col3\" >-0.316606</td>\n",
              "      <td id=\"T_e40fe_row1_col4\" class=\"data row1 col4\" >1.075438</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_e40fe_level0_row2\" class=\"row_heading level0 row2\" >ketua</th>\n",
              "      <td id=\"T_e40fe_row2_col0\" class=\"data row2 col0\" >-60.777555</td>\n",
              "      <td id=\"T_e40fe_row2_col1\" class=\"data row2 col1\" >-26.392536</td>\n",
              "      <td id=\"T_e40fe_row2_col2\" class=\"data row2 col2\" >17185.284152</td>\n",
              "      <td id=\"T_e40fe_row2_col3\" class=\"data row2 col3\" >3.628691</td>\n",
              "      <td id=\"T_e40fe_row2_col4\" class=\"data row2 col4\" >-125.627078</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_e40fe_level0_row3\" class=\"row_heading level0 row3\" >tahun_pajak</th>\n",
              "      <td id=\"T_e40fe_row3_col0\" class=\"data row3 col0\" >-2.306454</td>\n",
              "      <td id=\"T_e40fe_row3_col1\" class=\"data row3 col1\" >-0.316606</td>\n",
              "      <td id=\"T_e40fe_row3_col2\" class=\"data row3 col2\" >3.628691</td>\n",
              "      <td id=\"T_e40fe_row3_col3\" class=\"data row3 col3\" >23.131937</td>\n",
              "      <td id=\"T_e40fe_row3_col4\" class=\"data row3 col4\" >8.460273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_e40fe_level0_row4\" class=\"row_heading level0 row4\" >tahun_putusan</th>\n",
              "      <td id=\"T_e40fe_row4_col0\" class=\"data row4 col0\" >0.197846</td>\n",
              "      <td id=\"T_e40fe_row4_col1\" class=\"data row4 col1\" >1.075438</td>\n",
              "      <td id=\"T_e40fe_row4_col2\" class=\"data row4 col2\" >-125.627078</td>\n",
              "      <td id=\"T_e40fe_row4_col3\" class=\"data row4 col3\" >8.460273</td>\n",
              "      <td id=\"T_e40fe_row4_col4\" class=\"data row4 col4\" >12.366349</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ]
          },
          "metadata": {},
          "execution_count": 186
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Correlation"
      ],
      "metadata": {
        "id": "MWSRMFexv2vd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "corr = df_gabung.corrwith(df_gabung['hasil_putusan'],method='spearman').reset_index()\n",
        "\n",
        "corr.columns = ['Variabel','Korelasi']\n",
        "corr = corr.set_index('Variabel')\n",
        "corr = corr.sort_values(by=['Korelasi'], ascending = False).head(10)\n",
        "\n",
        "plt.figure(figsize=(10, 15))\n",
        "fig = sns.heatmap(corr, annot=True, fmt=\"g\", cmap='Set3', linewidths=0.4, linecolor='green')\n",
        "\n",
        "plt.title(\"\", fontsize=20)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "9FzFoNybpGMW",
        "outputId": "fb67f496-cda6-4043-c0ae-6af634b3697a"
      },
      "execution_count": 187,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1500 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Building Classification Model"
      ],
      "metadata": {
        "id": "BS-a-_t_pgLJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Logistic Regression\n",
        "2. K-Nearest Classifier\n",
        "3. Decision Tree\n",
        "4. Naive Bayes"
      ],
      "metadata": {
        "id": "HBElB8WmppZ7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df_gabung.drop(['hasil_putusan'],axis = 1)\n",
        "target = df_gabung['hasil_putusan']\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, target, test_size= 0.3, random_state = 0)"
      ],
      "metadata": {
        "id": "xtEGMCcqpjY-"
      },
      "execution_count": 188,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def ml_model(X_train,X_test, Y_train, Y_test):\n",
        "  MLA = [LogisticRegression(),KNeighborsClassifier(),DecisionTreeClassifier(),GaussianNB(),]\n",
        "  MLA_columns = []\n",
        "  MLA_compare = pd.DataFrame(columns = MLA_columns)\n",
        "  row_index = 0\n",
        "  for alg in MLA:\n",
        "    predicted = alg.fit(X_train, Y_train).predict(X_test)\n",
        "    MLA_name = alg.__class__.__name__\n",
        "    MLA_compare.loc[row_index,'Model Name'] = MLA_name\n",
        "    MLA_compare.loc[row_index, 'Train Accuracy'] = round(alg.score(X_train, Y_train), 2)\n",
        "    MLA_compare.loc[row_index, 'Test Accuracy'] = round(alg.score(X_test, Y_test), 2)\n",
        "    MLA_compare.loc[row_index, 'Precision'] = round(precision_score(Y_test, predicted, average='micro'),2)\n",
        "    MLA_compare.loc[row_index, 'Recall'] = round(recall_score(Y_test, predicted, average='micro'),2)\n",
        "    MLA_compare.loc[row_index, 'F1 score'] = round(f1_score(Y_test, predicted, average='micro'),2)\n",
        "    row_index+=1\n",
        "  MLA_compare.sort_values(by = ['Test Accuracy'], ascending = False, inplace = True)\n",
        "  return MLA_compare\n",
        "ml_model(X_train,X_test, Y_train, Y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 309
        },
        "id": "ahw116MTp06Z",
        "outputId": "f252145d-b7ee-4af4-9262-6cf1111bc19e"
      },
      "execution_count": 189,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Model Name  Train Accuracy  Test Accuracy  Precision  Recall  \\\n",
              "2  DecisionTreeClassifier            0.92           0.82       0.82    0.82   \n",
              "1    KNeighborsClassifier            0.83           0.77       0.77    0.77   \n",
              "3              GaussianNB            0.61           0.60       0.60    0.60   \n",
              "0      LogisticRegression            0.37           0.38       0.38    0.38   \n",
              "\n",
              "   F1 score  \n",
              "2      0.82  \n",
              "1      0.77  \n",
              "3      0.60  \n",
              "0      0.38  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9425ecac-49c0-4276-82ea-90a2760a6171\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Train Accuracy</th>\n",
              "      <th>Test Accuracy</th>\n",
              "      <th>Precision</th>\n",
              "      <th>Recall</th>\n",
              "      <th>F1 score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>DecisionTreeClassifier</td>\n",
              "      <td>0.92</td>\n",
              "      <td>0.82</td>\n",
              "      <td>0.82</td>\n",
              "      <td>0.82</td>\n",
              "      <td>0.82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KNeighborsClassifier</td>\n",
              "      <td>0.83</td>\n",
              "      <td>0.77</td>\n",
              "      <td>0.77</td>\n",
              "      <td>0.77</td>\n",
              "      <td>0.77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>GaussianNB</td>\n",
              "      <td>0.61</td>\n",
              "      <td>0.60</td>\n",
              "      <td>0.60</td>\n",
              "      <td>0.60</td>\n",
              "      <td>0.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LogisticRegression</td>\n",
              "      <td>0.37</td>\n",
              "      <td>0.38</td>\n",
              "      <td>0.38</td>\n",
              "      <td>0.38</td>\n",
              "      <td>0.38</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9425ecac-49c0-4276-82ea-90a2760a6171')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9425ecac-49c0-4276-82ea-90a2760a6171 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9425ecac-49c0-4276-82ea-90a2760a6171');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a7dc6ec3-1734-489c-9f9e-8493ab125a53\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a7dc6ec3-1734-489c-9f9e-8493ab125a53')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a7dc6ec3-1734-489c-9f9e-8493ab125a53 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"ml_model(X_train,X_test, Y_train, Y_test)\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Model Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"KNeighborsClassifier\",\n          \"LogisticRegression\",\n          \"DecisionTreeClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Train Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2456793302932368,\n        \"min\": 0.37,\n        \"max\": 0.92,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.83,\n          0.37,\n          0.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19872510326243803,\n        \"min\": 0.38,\n        \"max\": 0.82,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.77,\n          0.38,\n          0.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19872510326243803,\n        \"min\": 0.38,\n        \"max\": 0.82,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.77,\n          0.38,\n          0.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19872510326243803,\n        \"min\": 0.38,\n        \"max\": 0.82,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.77,\n          0.38,\n          0.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1 score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19872510326243803,\n        \"min\": 0.38,\n        \"max\": 0.82,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.77,\n          0.38,\n          0.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 189
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " Best Features?"
      ],
      "metadata": {
        "id": "_Tfvtaf9sRl3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.feature_selection import SelectKBest,mutual_info_classif\n",
        "bestfeatures = SelectKBest(score_func=mutual_info_classif, k='all')\n",
        "fit = bestfeatures.fit(X,target,)\n",
        "dfscores = pd.DataFrame(fit.scores_)\n",
        "dfcolumns = pd.DataFrame(X.columns)\n",
        "featureScores = pd.concat([dfcolumns,dfscores],axis=1)\n",
        "featureScores.columns = ['Feature','Score']\n",
        "print(featureScores.nlargest(10,'Score'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uoBI90JBsUcG",
        "outputId": "ae8a0aaf-3901-4dd6-d6ce-5e7e7648756c"
      },
      "execution_count": 190,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "          Feature     Score\n",
            "1  jenis_sengketa  0.665135\n",
            "4   tahun_putusan  0.226365\n",
            "2           ketua  0.213163\n",
            "3     tahun_pajak  0.077897\n",
            "0     jenis_pajak  0.048933\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = df_gabung[['jenis_sengketa', 'ketua', 'tahun_putusan', 'jenis_pajak', 'tahun_pajak']]\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, target, test_size= 0.3, random_state = 0)\n",
        "Feature_selection = ml_model(X_train,X_test, Y_train, Y_test)\n",
        "Feature_selection"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 309
        },
        "id": "8ax_w0cysxuY",
        "outputId": "d99725f3-c411-4227-e7c0-3889878a6290"
      },
      "execution_count": 191,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Model Name  Train Accuracy  Test Accuracy  Precision  Recall  \\\n",
              "2  DecisionTreeClassifier            0.92           0.83       0.83    0.83   \n",
              "1    KNeighborsClassifier            0.83           0.77       0.77    0.77   \n",
              "3              GaussianNB            0.61           0.60       0.60    0.60   \n",
              "0      LogisticRegression            0.37           0.38       0.38    0.38   \n",
              "\n",
              "   F1 score  \n",
              "2      0.83  \n",
              "1      0.77  \n",
              "3      0.60  \n",
              "0      0.38  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-28ccc053-3989-4d50-b059-b2c895981d5b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Train Accuracy</th>\n",
              "      <th>Test Accuracy</th>\n",
              "      <th>Precision</th>\n",
              "      <th>Recall</th>\n",
              "      <th>F1 score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>DecisionTreeClassifier</td>\n",
              "      <td>0.92</td>\n",
              "      <td>0.83</td>\n",
              "      <td>0.83</td>\n",
              "      <td>0.83</td>\n",
              "      <td>0.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KNeighborsClassifier</td>\n",
              "      <td>0.83</td>\n",
              "      <td>0.77</td>\n",
              "      <td>0.77</td>\n",
              "      <td>0.77</td>\n",
              "      <td>0.77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>GaussianNB</td>\n",
              "      <td>0.61</td>\n",
              "      <td>0.60</td>\n",
              "      <td>0.60</td>\n",
              "      <td>0.60</td>\n",
              "      <td>0.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LogisticRegression</td>\n",
              "      <td>0.37</td>\n",
              "      <td>0.38</td>\n",
              "      <td>0.38</td>\n",
              "      <td>0.38</td>\n",
              "      <td>0.38</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-28ccc053-3989-4d50-b059-b2c895981d5b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-28ccc053-3989-4d50-b059-b2c895981d5b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-28ccc053-3989-4d50-b059-b2c895981d5b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e2c66211-90f0-450e-bf0b-ce7247a09cf4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e2c66211-90f0-450e-bf0b-ce7247a09cf4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e2c66211-90f0-450e-bf0b-ce7247a09cf4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Feature_selection",
              "summary": "{\n  \"name\": \"Feature_selection\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Model Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"KNeighborsClassifier\",\n          \"LogisticRegression\",\n          \"DecisionTreeClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Train Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2456793302932368,\n        \"min\": 0.37,\n        \"max\": 0.92,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.83,\n          0.37,\n          0.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20174241001832013,\n        \"min\": 0.38,\n        \"max\": 0.83,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.77,\n          0.38,\n          0.83\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20174241001832013,\n        \"min\": 0.38,\n        \"max\": 0.83,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.77,\n          0.38,\n          0.83\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20174241001832013,\n        \"min\": 0.38,\n        \"max\": 0.83,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.77,\n          0.38,\n          0.83\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1 score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.20174241001832013,\n        \"min\": 0.38,\n        \"max\": 0.83,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.77,\n          0.38,\n          0.83\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 191
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Imbalance"
      ],
      "metadata": {
        "id": "p5EtO-patPJc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Over Sampling"
      ],
      "metadata": {
        "id": "YjaSC2gOAXaT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.over_sampling import RandomOverSampler\n",
        "\n",
        "# Initialize the RandomOverSampler\n",
        "oversample = RandomOverSampler(random_state=42)\n",
        "\n",
        "# Fit and transform the data\n",
        "x_resampled, y_resampled = oversample.fit_resample(X, target)\n",
        "\n",
        "# Now you can split the resampled data\n",
        "x_train, x_test, y_train, y_test = train_test_split(x_resampled, y_resampled, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "lpi4YbOqRset"
      },
      "execution_count": 192,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print('before Oversampling:',Counter(Y_train))\n",
        "oversample = RandomOverSampler(sampling_strategy='minority')\n",
        "x_train1, y_train1 = oversample.fit_resample(x_train, y_train)\n",
        "print('After Oversampling:',Counter(y_train1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4XuxDioCtQ3G",
        "outputId": "653874c0-4a70-4395-c76d-1da59b417cd3"
      },
      "execution_count": 193,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "before Oversampling: Counter({6: 971, 3: 888, 5: 864, 2: 234, 4: 118, 9: 109, 8: 64, 7: 34, 0: 32, 1: 6})\n",
            "After Oversampling: Counter({4: 1128, 8: 1128, 1: 1118, 6: 1115, 7: 1114, 0: 1112, 2: 1110, 5: 1099, 9: 1094, 3: 1093})\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(Counter(target))\n",
        "print(Counter(y_train1))\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(10,4.5))\n",
        "fig.subplots_adjust(bottom=0.10, left=0.10, top = 0.900, right=1.00)\n",
        "fig.suptitle('', fontsize = 20)\n",
        "sns.set_palette(\"bright\")\n",
        "sns.countplot(Y_train, ax=ax1)\n",
        "ax1.margins(0.1)\n",
        "ax1.set_facecolor(\"#ffffff\")\n",
        "for p in ax1.patches:\n",
        "        ax1.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\n",
        "sns.set_palette(\"bright\")\n",
        "sns.countplot(y_train1, ax=ax2)\n",
        "ax2.margins(0.1)\n",
        "ax2.set_facecolor(\"#ffffff\")\n",
        "for p in ax2.patches:\n",
        "        ax2.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\n",
        "sns.set_style('dark')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 474
        },
        "id": "DvfCjOoXtpOe",
        "outputId": "669c0139-f668-4eaa-9d5c-01232bcdf745"
      },
      "execution_count": 194,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Counter({6: 1383, 3: 1269, 5: 1236, 2: 340, 9: 165, 4: 159, 8: 92, 7: 52, 0: 39, 1: 8})\n",
            "Counter({4: 1128, 8: 1128, 1: 1118, 6: 1115, 7: 1114, 0: 1112, 2: 1110, 5: 1099, 9: 1094, 3: 1093})\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x450 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(Counter(y_train1))\n",
        "fig, (ax1) = plt.subplots(1,figsize=(10,4.5))\n",
        "fig.subplots_adjust(bottom=0.10, left=0.10, top = 0.900, right=1.00)\n",
        "fig.suptitle('', fontsize = 20)\n",
        "sns.set_palette(\"bright\")\n",
        "sns.countplot(y_train1, ax=ax1)\n",
        "ax1.margins(0.1)\n",
        "ax1.set_facecolor(\"#ffffff\")\n",
        "for p in ax2.patches:\n",
        "        ax2.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\n",
        "sns.set_style('dark')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "2uKtoX2HJlIZ",
        "outputId": "b4189f76-362f-4f1e-92f2-743cab886521"
      },
      "execution_count": 195,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Counter({4: 1128, 8: 1128, 1: 1118, 6: 1115, 7: 1114, 0: 1112, 2: 1110, 5: 1099, 9: 1094, 3: 1093})\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x450 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "oversampling = ml_model(x_train1,x_test, y_train1, y_test)\n",
        "oversampling"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 309
        },
        "id": "Zmu8kq6HtxS2",
        "outputId": "6198a6c1-ba46-483f-94ed-6c057d7fcb54"
      },
      "execution_count": 196,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Model Name  Train Accuracy  Test Accuracy  Precision  Recall  \\\n",
              "2  DecisionTreeClassifier            0.94           0.93       0.93    0.93   \n",
              "1    KNeighborsClassifier            0.91           0.89       0.89    0.89   \n",
              "3              GaussianNB            0.44           0.44       0.44    0.44   \n",
              "0      LogisticRegression            0.28           0.27       0.27    0.27   \n",
              "\n",
              "   F1 score  \n",
              "2      0.93  \n",
              "1      0.89  \n",
              "3      0.44  \n",
              "0      0.27  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ebd6d7d0-b959-40cd-8ac7-6ad26fd11959\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Train Accuracy</th>\n",
              "      <th>Test Accuracy</th>\n",
              "      <th>Precision</th>\n",
              "      <th>Recall</th>\n",
              "      <th>F1 score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>DecisionTreeClassifier</td>\n",
              "      <td>0.94</td>\n",
              "      <td>0.93</td>\n",
              "      <td>0.93</td>\n",
              "      <td>0.93</td>\n",
              "      <td>0.93</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KNeighborsClassifier</td>\n",
              "      <td>0.91</td>\n",
              "      <td>0.89</td>\n",
              "      <td>0.89</td>\n",
              "      <td>0.89</td>\n",
              "      <td>0.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>GaussianNB</td>\n",
              "      <td>0.44</td>\n",
              "      <td>0.44</td>\n",
              "      <td>0.44</td>\n",
              "      <td>0.44</td>\n",
              "      <td>0.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LogisticRegression</td>\n",
              "      <td>0.28</td>\n",
              "      <td>0.27</td>\n",
              "      <td>0.27</td>\n",
              "      <td>0.27</td>\n",
              "      <td>0.27</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ebd6d7d0-b959-40cd-8ac7-6ad26fd11959')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ebd6d7d0-b959-40cd-8ac7-6ad26fd11959 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ebd6d7d0-b959-40cd-8ac7-6ad26fd11959');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-91e0f6c2-1e34-47b9-ad20-916088f29603\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-91e0f6c2-1e34-47b9-ad20-916088f29603')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-91e0f6c2-1e34-47b9-ad20-916088f29603 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "oversampling",
              "summary": "{\n  \"name\": \"oversampling\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Model Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"KNeighborsClassifier\",\n          \"LogisticRegression\",\n          \"DecisionTreeClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Train Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.33290389003434606,\n        \"min\": 0.28,\n        \"max\": 0.94,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.91,\n          0.28,\n          0.94\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.32826564446090506,\n        \"min\": 0.27,\n        \"max\": 0.93,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.89,\n          0.27,\n          0.93\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.32826564446090506,\n        \"min\": 0.27,\n        \"max\": 0.93,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.89,\n          0.27,\n          0.93\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.32826564446090506,\n        \"min\": 0.27,\n        \"max\": 0.93,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.89,\n          0.27,\n          0.93\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1 score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.32826564446090506,\n        \"min\": 0.27,\n        \"max\": 0.93,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.89,\n          0.27,\n          0.93\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 196
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "SMOTE"
      ],
      "metadata": {
        "id": "qohH2R80t7mm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print('before SMOTE:',Counter(Y_train))\n",
        "#sm = SMOTE(random_state=12, ratio=1.0, n_neighbors=5)\n",
        "sm = SMOTE()\n",
        "x_train2, y_train2 = sm.fit_resample(X, target)\n",
        "print('After SMOTE:',Counter(y_train2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HrFRLGcbt6Tx",
        "outputId": "dcb92e18-3d94-4ef8-a121-4b2779894338"
      },
      "execution_count": 197,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "before SMOTE: Counter({6: 971, 3: 888, 5: 864, 2: 234, 4: 118, 9: 109, 8: 64, 7: 34, 0: 32, 1: 6})\n",
            "After SMOTE: Counter({6: 1383, 5: 1383, 9: 1383, 3: 1383, 4: 1383, 8: 1383, 2: 1383, 1: 1383, 7: 1383, 0: 1383})\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(Counter(target))\n",
        "print(Counter(y_train2))\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2,figsize=(10,4.5))\n",
        "fig.subplots_adjust(bottom=0.10, left=0.10, top = 0.900, right=1.00)\n",
        "fig.suptitle('', fontsize = 20)\n",
        "sns.set_palette(\"bright\")\n",
        "sns.countplot(Y_train, ax=ax1)\n",
        "ax1.margins(0.1)\n",
        "ax1.set_facecolor(\"#ffffff\")\n",
        "for p in ax1.patches:\n",
        "        ax1.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\n",
        "sns.set_palette(\"bright\")\n",
        "sns.countplot(y_train2, ax=ax2)\n",
        "ax2.margins(0.1)\n",
        "ax2.set_facecolor(\"#ffffff\")\n",
        "for p in ax2.patches:\n",
        "        ax2.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\n",
        "sns.set_style('dark')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 474
        },
        "id": "f0oU6_ubT136",
        "outputId": "d542b2ea-8f67-4d3f-997b-c8abaf6d241e"
      },
      "execution_count": 198,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Counter({6: 1383, 3: 1269, 5: 1236, 2: 340, 9: 165, 4: 159, 8: 92, 7: 52, 0: 39, 1: 8})\n",
            "Counter({6: 1383, 5: 1383, 9: 1383, 3: 1383, 4: 1383, 8: 1383, 2: 1383, 1: 1383, 7: 1383, 0: 1383})\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x450 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(Counter(y_train2))\n",
        "fig, (ax1) = plt.subplots(1,figsize=(10,4.5))\n",
        "fig.subplots_adjust(bottom=0.10, left=0.10, top = 0.900, right=1.00)\n",
        "fig.suptitle('', fontsize = 20)\n",
        "sns.set_palette(\"bright\")\n",
        "sns.countplot(y_train2, ax=ax1)\n",
        "ax1.margins(0.1)\n",
        "ax1.set_facecolor(\"#ffffff\")\n",
        "for p in ax2.patches:\n",
        "        ax2.annotate('{:.1f}'.format(p.get_height()), (p.get_x()+0.1, p.get_height()+50))\n",
        "sns.set_style('dark')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "id": "Gaz2c4z_KnSK",
        "outputId": "b0918aa1-39e2-4e2f-d5c1-67ed5f78df95"
      },
      "execution_count": 199,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Counter({6: 1383, 5: 1383, 9: 1383, 3: 1383, 4: 1383, 8: 1383, 2: 1383, 1: 1383, 7: 1383, 0: 1383})\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x450 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Smote = ml_model(x_train2,x_test, y_train2, y_test)\n",
        "Smote"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 309
        },
        "id": "1gHOSwKWuAQL",
        "outputId": "43eb86aa-c753-4f5a-ca79-17fc6893a0b6"
      },
      "execution_count": 200,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Model Name  Train Accuracy  Test Accuracy  Precision  Recall  \\\n",
              "2  DecisionTreeClassifier            0.94           0.92       0.92    0.92   \n",
              "1    KNeighborsClassifier            0.88           0.86       0.86    0.86   \n",
              "3              GaussianNB            0.48           0.46       0.46    0.46   \n",
              "0      LogisticRegression            0.31           0.29       0.29    0.29   \n",
              "\n",
              "   F1 score  \n",
              "2      0.92  \n",
              "1      0.86  \n",
              "3      0.46  \n",
              "0      0.29  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bca7c4b3-3f17-4a09-9812-e043bc3963df\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Train Accuracy</th>\n",
              "      <th>Test Accuracy</th>\n",
              "      <th>Precision</th>\n",
              "      <th>Recall</th>\n",
              "      <th>F1 score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>DecisionTreeClassifier</td>\n",
              "      <td>0.94</td>\n",
              "      <td>0.92</td>\n",
              "      <td>0.92</td>\n",
              "      <td>0.92</td>\n",
              "      <td>0.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KNeighborsClassifier</td>\n",
              "      <td>0.88</td>\n",
              "      <td>0.86</td>\n",
              "      <td>0.86</td>\n",
              "      <td>0.86</td>\n",
              "      <td>0.86</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>GaussianNB</td>\n",
              "      <td>0.48</td>\n",
              "      <td>0.46</td>\n",
              "      <td>0.46</td>\n",
              "      <td>0.46</td>\n",
              "      <td>0.46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LogisticRegression</td>\n",
              "      <td>0.31</td>\n",
              "      <td>0.29</td>\n",
              "      <td>0.29</td>\n",
              "      <td>0.29</td>\n",
              "      <td>0.29</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bca7c4b3-3f17-4a09-9812-e043bc3963df')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bca7c4b3-3f17-4a09-9812-e043bc3963df button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bca7c4b3-3f17-4a09-9812-e043bc3963df');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-03a46f31-a10e-4aab-a7d9-28e668c2d7f4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-03a46f31-a10e-4aab-a7d9-28e668c2d7f4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-03a46f31-a10e-4aab-a7d9-28e668c2d7f4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Smote",
              "summary": "{\n  \"name\": \"Smote\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Model Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"KNeighborsClassifier\",\n          \"LogisticRegression\",\n          \"DecisionTreeClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Train Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30630866784993205,\n        \"min\": 0.31,\n        \"max\": 0.94,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.88,\n          0.31,\n          0.94\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30630866784993205,\n        \"min\": 0.29,\n        \"max\": 0.92,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.86,\n          0.29,\n          0.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30630866784993205,\n        \"min\": 0.29,\n        \"max\": 0.92,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.86,\n          0.29,\n          0.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30630866784993205,\n        \"min\": 0.29,\n        \"max\": 0.92,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.86,\n          0.29,\n          0.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1 score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30630866784993205,\n        \"min\": 0.29,\n        \"max\": 0.92,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.86,\n          0.29,\n          0.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 200
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Ensembling"
      ],
      "metadata": {
        "id": "54kufWo6uT4-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#import lightgbm as lgb\n",
        "#from sklearn.datasets import make_regression"
      ],
      "metadata": {
        "id": "oQCMEahjtb9Y"
      },
      "execution_count": 201,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Over-sampling"
      ],
      "metadata": {
        "id": "EYbHTe_R3nTc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def ensemble_model(x_train1,x_test, y_train1, y_test):\n",
        "  class_weight={0:0.087, 1:1}\n",
        "  MLA = [XGBClassifier(n_estimators=200,learning_rate=0.1,\n",
        "  tree_method = 'hist',random_state=42)]\n",
        "  MLA_columns = []\n",
        "  MLA_compare = pd.DataFrame(columns = MLA_columns)\n",
        "  row_index = 0\n",
        "  for alg in MLA:\n",
        "    predicted = alg.fit(x_train1, y_train1).predict(x_test)\n",
        "    MLA_name = alg.__class__.__name__\n",
        "    MLA_compare.loc[row_index,'Model Name'] = MLA_name\n",
        "    MLA_compare.loc[row_index, 'Train Accuracy'] = round(alg.score(x_train1, y_train1), 2)\n",
        "    MLA_compare.loc[row_index, 'Test Accuracy'] = round(alg.score(x_test, y_test), 2)\n",
        "    MLA_compare.loc[row_index, 'Precision'] = round(precision_score(y_test, predicted, average='micro'),2)\n",
        "    MLA_compare.loc[row_index, 'Recall'] = round(recall_score(y_test, predicted, average='micro'),2)\n",
        "    MLA_compare.loc[row_index, 'F1 score'] = round(f1_score(y_test, predicted, average='micro'),2)\n",
        "    row_index+=1\n",
        "  MLA_compare.sort_values(by = ['Test Accuracy'], ascending = False, inplace = True)\n",
        "  return MLA_compare\n",
        "#CatBoostClassifier(iterations=200, learning_rate=0.3,random_seed=42,task_type=\"GPU\",verbose=False),LGBMClassifier(n_estimators=200,is_unbalance=True,learning_rate=0.1, #class_weight=class_weight,num_leaves=200,device='gpu',random_state=42,n_jobs=-1)"
      ],
      "metadata": {
        "id": "txbBGxwpuVSS"
      },
      "execution_count": 202,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ensemble_model(x_train1, x_test, y_train1, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "ANSUyVhd7tV0",
        "outputId": "96519b2a-212e-43b0-a2a6-89213fd3fd66"
      },
      "execution_count": 203,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Model Name  Train Accuracy  Test Accuracy  Precision  Recall  F1 score\n",
              "0  XGBClassifier            0.92           0.91       0.91    0.91      0.91"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5fcbaeb3-ccf2-41b2-b347-0efb67babf52\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Train Accuracy</th>\n",
              "      <th>Test Accuracy</th>\n",
              "      <th>Precision</th>\n",
              "      <th>Recall</th>\n",
              "      <th>F1 score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>XGBClassifier</td>\n",
              "      <td>0.92</td>\n",
              "      <td>0.91</td>\n",
              "      <td>0.91</td>\n",
              "      <td>0.91</td>\n",
              "      <td>0.91</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5fcbaeb3-ccf2-41b2-b347-0efb67babf52')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5fcbaeb3-ccf2-41b2-b347-0efb67babf52 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5fcbaeb3-ccf2-41b2-b347-0efb67babf52');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"ensemble_model(x_train1, x_test, y_train1, y_test)\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Model Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"XGBClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Train Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.92,\n        \"max\": 0.92,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.91,\n        \"max\": 0.91,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.91\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.91,\n        \"max\": 0.91,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.91\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.91,\n        \"max\": 0.91,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.91\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1 score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.91,\n        \"max\": 0.91,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.91\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 203
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "SMOTE"
      ],
      "metadata": {
        "id": "Wkojx7jg3pyB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def ensemble_model(x_train2,x_test, y_train2, y_test):\n",
        "  class_weight={0:0.087, 1:1}\n",
        "  MLA = [XGBClassifier(n_estimators=200,learning_rate=0.1,\n",
        "  tree_method = 'hist',random_state=42)]\n",
        "  MLA_columns = []\n",
        "  MLA_compare = pd.DataFrame(columns = MLA_columns)\n",
        "  row_index = 0\n",
        "  for alg in MLA:\n",
        "    predicted = alg.fit(x_train2, y_train2).predict(x_test)\n",
        "    MLA_name = alg.__class__.__name__\n",
        "    MLA_compare.loc[row_index,'Model Name'] = MLA_name\n",
        "    MLA_compare.loc[row_index, 'Train Accuracy'] = round(alg.score(x_train2, y_train2), 2)\n",
        "    MLA_compare.loc[row_index, 'Test Accuracy'] = round(alg.score(x_test, y_test), 2)\n",
        "    MLA_compare.loc[row_index, 'Precision'] = round(precision_score(y_test, predicted, average='micro'),2)\n",
        "    MLA_compare.loc[row_index, 'Recall'] = round(recall_score(y_test, predicted, average='micro'),2)\n",
        "    MLA_compare.loc[row_index, 'F1 score'] = round(f1_score(y_test, predicted, average='micro'),2)\n",
        "    row_index+=1\n",
        "  MLA_compare.sort_values(by = ['Test Accuracy'], ascending = False, inplace = True)\n",
        "  return MLA_compare\n",
        "#CatBoostClassifier(iterations=200, learning_rate=0.3,random_seed=42,task_type=\"GPU\",verbose=False),LGBMClassifier(n_estimators=200,is_unbalance=True,learning_rate=0.1, #class_weight=class_weight,num_leaves=200,device='gpu',random_state=42,n_jobs=-1)"
      ],
      "metadata": {
        "id": "50nlA0Df3rXq"
      },
      "execution_count": 204,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ensemble_model(x_train2, x_test, y_train2, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "5qWBodzZ3umi",
        "outputId": "f106d395-7e01-40a4-8898-3e2f890f05c5"
      },
      "execution_count": 205,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Model Name  Train Accuracy  Test Accuracy  Precision  Recall  F1 score\n",
              "0  XGBClassifier            0.92           0.89       0.89    0.89      0.89"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fb110299-5e39-4633-9916-56c6c418734b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Train Accuracy</th>\n",
              "      <th>Test Accuracy</th>\n",
              "      <th>Precision</th>\n",
              "      <th>Recall</th>\n",
              "      <th>F1 score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>XGBClassifier</td>\n",
              "      <td>0.92</td>\n",
              "      <td>0.89</td>\n",
              "      <td>0.89</td>\n",
              "      <td>0.89</td>\n",
              "      <td>0.89</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb110299-5e39-4633-9916-56c6c418734b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fb110299-5e39-4633-9916-56c6c418734b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fb110299-5e39-4633-9916-56c6c418734b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"ensemble_model(x_train2, x_test, y_train2, y_test)\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Model Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"XGBClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Train Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.92,\n        \"max\": 0.92,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.92\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.89,\n        \"max\": 0.89,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.89,\n        \"max\": 0.89,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.89,\n        \"max\": 0.89,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1 score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.89,\n        \"max\": 0.89,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 205
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def final_model(X_train,X_test, Y_train, Y_test):\n",
        "  MLA = [DecisionTreeClassifier()]\n",
        "  MLA_columns = []\n",
        "  MLA_compare = pd.DataFrame(columns = MLA_columns)\n",
        "  row_index = 0\n",
        "  for alg in MLA:\n",
        "    predicted = alg.fit(X_train, Y_train).predict(X_test)\n",
        "    MLA_name = alg.__class__.__name__\n",
        "    MLA_compare.loc[row_index,'Model Name'] = MLA_name\n",
        "    MLA_compare.loc[row_index, 'Train Accuracy'] = round(alg.score(X_train, Y_train), 2)\n",
        "    MLA_compare.loc[row_index, 'Test Accuracy'] = round(alg.score(X_test, Y_test), 2)\n",
        "    MLA_compare.loc[row_index, 'Precision'] = round(precision_score(Y_test, predicted, average='micro'),2)\n",
        "    MLA_compare.loc[row_index, 'Recall'] = round(recall_score(Y_test, predicted, average='micro'),2)\n",
        "    MLA_compare.loc[row_index, 'F1 score'] = round(f1_score(Y_test, predicted, average='micro'),2)\n",
        "    row_index+=1\n",
        "  MLA_compare.sort_values(by = ['Test Accuracy'], ascending = False, inplace = True)\n",
        "  return MLA_compare\n",
        "final_model(x_train1,X_test, y_train1, Y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "sFONDFMzIsH-",
        "outputId": "2d9d3ba4-f07b-4da9-8015-0e72b8f8ca3f"
      },
      "execution_count": 211,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Model Name  Train Accuracy  Test Accuracy  Precision  Recall  \\\n",
              "0  DecisionTreeClassifier            0.94           0.89       0.89    0.89   \n",
              "\n",
              "   F1 score  \n",
              "0      0.89  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4c940997-840c-4b82-b32b-a0a21bfd1838\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model Name</th>\n",
              "      <th>Train Accuracy</th>\n",
              "      <th>Test Accuracy</th>\n",
              "      <th>Precision</th>\n",
              "      <th>Recall</th>\n",
              "      <th>F1 score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>DecisionTreeClassifier</td>\n",
              "      <td>0.94</td>\n",
              "      <td>0.89</td>\n",
              "      <td>0.89</td>\n",
              "      <td>0.89</td>\n",
              "      <td>0.89</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c940997-840c-4b82-b32b-a0a21bfd1838')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4c940997-840c-4b82-b32b-a0a21bfd1838 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4c940997-840c-4b82-b32b-a0a21bfd1838');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"final_model(x_train1,X_test, y_train1, Y_test)\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Model Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"DecisionTreeClassifier\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Train Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.94,\n        \"max\": 0.94,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.94\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.89,\n        \"max\": 0.89,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Precision\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.89,\n        \"max\": 0.89,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recall\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.89,\n        \"max\": 0.89,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"F1 score\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 0.89,\n        \"max\": 0.89,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 211
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "from google.colab import drive\n",
        "\n",
        "# Mount Google Drive\n",
        "drive.mount('/content/gdrive')\n",
        "\n",
        "# Open the file in write binary mode\n",
        "with open(\"/content/gdrive/MyDrive/final-model.pkl\", \"wb\") as pickle_out:\n",
        "    pickle.dump(ensemble_model, pickle_out)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KhULBjLwKcAN",
        "outputId": "c10a59e4-9669-4c42-e39a-549ba7fe6eae"
      },
      "execution_count": 213,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "pickle_out = open(\"emp-model.pkl\",\"wb\")\n",
        "pickle.dump(ml_model, pickle_out)\n",
        "pickle_out.close()"
      ],
      "metadata": {
        "id": "KTYdRXxGHbJB"
      },
      "execution_count": 207,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "pickle_out = open(\"emp-model2.pkl\",\"wb\")\n",
        "pickle.dump(ensemble_model, pickle_out)\n",
        "pickle_out.close()"
      ],
      "metadata": {
        "id": "sLMWTRp-I4M8"
      },
      "execution_count": 209,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1LPBvhOJD92oE3hp0n4SwMXw4V7b_R04A",
      "authorship_tag": "ABX9TyPVXeC6TKQVdboqGKo/MfvV",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}