{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d39d2150",
   "metadata": {
    "papermill": {
     "duration": 0.079994,
     "end_time": "2024-05-03T08:04:01.939334",
     "exception": false,
     "start_time": "2024-05-03T08:04:01.859340",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1. **Importing libraries that are planned to be used in our process**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "df477829",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_kg_hide-input": false,
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:02.100492Z",
     "iopub.status.busy": "2024-05-03T08:04:02.099632Z",
     "iopub.status.idle": "2024-05-03T08:04:03.541907Z",
     "shell.execute_reply": "2024-05-03T08:04:03.541308Z",
     "shell.execute_reply.started": "2024-05-03T06:54:57.489609Z"
    },
    "papermill": {
     "duration": 1.528773,
     "end_time": "2024-05-03T08:04:03.542084",
     "exception": false,
     "start_time": "2024-05-03T08:04:02.013311",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/output/output.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report\n",
    "\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "## for data\n",
    "import pandas as pd\n",
    "\n",
    "import re\n",
    "import nltk## for language detection\n",
    "\n",
    "\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f330c58d",
   "metadata": {
    "papermill": {
     "duration": 0.074106,
     "end_time": "2024-05-03T08:04:03.690692",
     "exception": false,
     "start_time": "2024-05-03T08:04:03.616586",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2. Reading the dataset with pandas, dropping null values (calculated earlier at less than 5%) and creating a copy of the dataframe for the modelling process"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "159b1cc5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:03.848310Z",
     "iopub.status.busy": "2024-05-03T08:04:03.847573Z",
     "iopub.status.idle": "2024-05-03T08:04:14.060294Z",
     "shell.execute_reply": "2024-05-03T08:04:14.059665Z",
     "shell.execute_reply.started": "2024-05-03T06:54:58.838244Z"
    },
    "papermill": {
     "duration": 10.296913,
     "end_time": "2024-05-03T08:04:14.060430",
     "exception": false,
     "start_time": "2024-05-03T08:04:03.763517",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>putusan</th>\n",
       "      <th>jenis_sengketa</th>\n",
       "      <th>jenis_pajak</th>\n",
       "      <th>hasil_putusan</th>\n",
       "      <th>teks_raw</th>\n",
       "      <th>teks_html</th>\n",
       "      <th>ketua</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PUT-015238.15/2020/PP/M.XIIA Tahun 2023</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>PPh Badan</td>\n",
       "      <td>Menolak</td>\n",
       "      <td>PUTUSAN PENGADILAN PAJAK PUT-015238.15/2020/PP...</td>\n",
       "      <td>&lt;h1 style=\"text-align:center\"&gt;&lt;strong&gt;PUTUSAN ...</td>\n",
       "      <td>Masdi, S.E., M.Si.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>456/B/PK/PJK/2022</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Menolak permintaan peninjauan kembali</td>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 456/B/PK/PJK/2022 DEMI ...</td>\n",
       "      <td>&lt;h1 style=\"text-align:center\"&gt;&lt;strong&gt;PUTUSAN ...</td>\n",
       "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1958/B/PK/PJK/2022</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Mengabulkan permohonan peninjauan kembali</td>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 1958/B/PK/PJK/2022 DEMI...</td>\n",
       "      <td>&lt;h1 style=\"text-align:center\"&gt;&lt;strong&gt;PUTUSAN ...</td>\n",
       "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4292/B/PK/PJK/2022</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Menolak permintaan peninjauan kembali</td>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 4292/B/PK/PJK/2022 DEMI...</td>\n",
       "      <td>&lt;h1 style=\"text-align:center\"&gt;&lt;strong&gt;PUTUSAN ...</td>\n",
       "      <td>Dr. H.Yulius, S.H., M.H.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1258/B/PK/PJK/2022</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>PPh Badan</td>\n",
       "      <td>Menolak permintaan peninjauan kembali</td>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 1258/B/PK/PJK/2022 DEMI...</td>\n",
       "      <td>&lt;h1 style=\"text-align:center\"&gt;&lt;strong&gt;PUTUSAN ...</td>\n",
       "      <td>Dr. Irfan Fachruddin, S.H., C.N.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   putusan jenis_sengketa  jenis_pajak  \\\n",
       "0  PUT-015238.15/2020/PP/M.XIIA Tahun 2023    Upaya Hukum    PPh Badan   \n",
       "1                        456/B/PK/PJK/2022    Upaya Hukum  PPN & PPnBM   \n",
       "2                       1958/B/PK/PJK/2022    Upaya Hukum  PPN & PPnBM   \n",
       "3                       4292/B/PK/PJK/2022    Upaya Hukum  PPN & PPnBM   \n",
       "4                       1258/B/PK/PJK/2022    Upaya Hukum    PPh Badan   \n",
       "\n",
       "                               hasil_putusan  \\\n",
       "0                                    Menolak   \n",
       "1      Menolak permintaan peninjauan kembali   \n",
       "2  Mengabulkan permohonan peninjauan kembali   \n",
       "3      Menolak permintaan peninjauan kembali   \n",
       "4      Menolak permintaan peninjauan kembali   \n",
       "\n",
       "                                            teks_raw  \\\n",
       "0  PUTUSAN PENGADILAN PAJAK PUT-015238.15/2020/PP...   \n",
       "1  PUTUSAN MAHKAMAH AGUNG 456/B/PK/PJK/2022 DEMI ...   \n",
       "2  PUTUSAN MAHKAMAH AGUNG 1958/B/PK/PJK/2022 DEMI...   \n",
       "3  PUTUSAN MAHKAMAH AGUNG 4292/B/PK/PJK/2022 DEMI...   \n",
       "4  PUTUSAN MAHKAMAH AGUNG 1258/B/PK/PJK/2022 DEMI...   \n",
       "\n",
       "                                           teks_html  \\\n",
       "0  <h1 style=\"text-align:center\"><strong>PUTUSAN ...   \n",
       "1  <h1 style=\"text-align:center\"><strong>PUTUSAN ...   \n",
       "2  <h1 style=\"text-align:center\"><strong>PUTUSAN ...   \n",
       "3  <h1 style=\"text-align:center\"><strong>PUTUSAN ...   \n",
       "4  <h1 style=\"text-align:center\"><strong>PUTUSAN ...   \n",
       "\n",
       "                              ketua  \n",
       "0                Masdi, S.E., M.Si.  \n",
       "1         Dr. H. Yulius, S.H., M.H.  \n",
       "2         Dr. H. Yulius, S.H., M.H.  \n",
       "3          Dr. H.Yulius, S.H., M.H.  \n",
       "4  Dr. Irfan Fachruddin, S.H., C.N.  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('/kaggle/input/output/output.csv', delimiter='|', encoding = \"utf8\")\n",
    "df.dropna(inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "55b3ca8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:14.215264Z",
     "iopub.status.busy": "2024-05-03T08:04:14.214651Z",
     "iopub.status.idle": "2024-05-03T08:04:14.217384Z",
     "shell.execute_reply": "2024-05-03T08:04:14.216887Z",
     "shell.execute_reply.started": "2024-05-03T06:55:09.577819Z"
    },
    "papermill": {
     "duration": 0.080986,
     "end_time": "2024-05-03T08:04:14.217521",
     "exception": false,
     "start_time": "2024-05-03T08:04:14.136535",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df1 = df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "26dbcad1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:14.375679Z",
     "iopub.status.busy": "2024-05-03T08:04:14.374980Z",
     "iopub.status.idle": "2024-05-03T08:04:14.377708Z",
     "shell.execute_reply": "2024-05-03T08:04:14.377160Z",
     "shell.execute_reply.started": "2024-05-03T06:55:09.584591Z"
    },
    "papermill": {
     "duration": 0.086756,
     "end_time": "2024-05-03T08:04:14.377827",
     "exception": false,
     "start_time": "2024-05-03T08:04:14.291071",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df1.drop(columns=['putusan', 'teks_html'], inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3db84077",
   "metadata": {
    "papermill": {
     "duration": 0.073195,
     "end_time": "2024-05-03T08:04:14.526269",
     "exception": false,
     "start_time": "2024-05-03T08:04:14.453074",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3. Seperating the dataset into target variables and two groups of independent variables, one (df_cat) which requires one-hot encoding to be machine readable and the other (df_nlp) which is text data which needs to be cleaned for features to be engineered from it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "586b445b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:14.679090Z",
     "iopub.status.busy": "2024-05-03T08:04:14.678316Z",
     "iopub.status.idle": "2024-05-03T08:04:14.681027Z",
     "shell.execute_reply": "2024-05-03T08:04:14.680533Z",
     "shell.execute_reply.started": "2024-05-03T06:55:09.595194Z"
    },
    "papermill": {
     "duration": 0.08192,
     "end_time": "2024-05-03T08:04:14.681159",
     "exception": false,
     "start_time": "2024-05-03T08:04:14.599239",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_cat = df1[['jenis_pajak', 'jenis_sengketa', 'ketua']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c2c37977",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:14.836686Z",
     "iopub.status.busy": "2024-05-03T08:04:14.836040Z",
     "iopub.status.idle": "2024-05-03T08:04:14.838641Z",
     "shell.execute_reply": "2024-05-03T08:04:14.838116Z",
     "shell.execute_reply.started": "2024-05-03T06:55:09.603387Z"
    },
    "papermill": {
     "duration": 0.082097,
     "end_time": "2024-05-03T08:04:14.838760",
     "exception": false,
     "start_time": "2024-05-03T08:04:14.756663",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_target = df1['hasil_putusan']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b570734a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:14.991573Z",
     "iopub.status.busy": "2024-05-03T08:04:14.990764Z",
     "iopub.status.idle": "2024-05-03T08:04:14.993470Z",
     "shell.execute_reply": "2024-05-03T08:04:14.992894Z",
     "shell.execute_reply.started": "2024-05-03T06:55:09.611793Z"
    },
    "papermill": {
     "duration": 0.081779,
     "end_time": "2024-05-03T08:04:14.993599",
     "exception": false,
     "start_time": "2024-05-03T08:04:14.911820",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_nlp = df1['teks_raw']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "293eb290",
   "metadata": {
    "papermill": {
     "duration": 0.077804,
     "end_time": "2024-05-03T08:04:15.145888",
     "exception": false,
     "start_time": "2024-05-03T08:04:15.068084",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 4. Resetting indices to avoid NaNs during concatenation and performing one-hot encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "14198cf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:15.302916Z",
     "iopub.status.busy": "2024-05-03T08:04:15.302329Z",
     "iopub.status.idle": "2024-05-03T08:04:15.305183Z",
     "shell.execute_reply": "2024-05-03T08:04:15.304468Z",
     "shell.execute_reply.started": "2024-05-03T06:55:09.618852Z"
    },
    "papermill": {
     "duration": 0.081155,
     "end_time": "2024-05-03T08:04:15.305324",
     "exception": false,
     "start_time": "2024-05-03T08:04:15.224169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_cat.reset_index(drop=True, inplace=True)\n",
    "df_target.reset_index(drop=True, inplace=True)\n",
    "df_nlp.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9d5d2116",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:15.456357Z",
     "iopub.status.busy": "2024-05-03T08:04:15.455501Z",
     "iopub.status.idle": "2024-05-03T08:04:15.457738Z",
     "shell.execute_reply": "2024-05-03T08:04:15.458184Z",
     "shell.execute_reply.started": "2024-05-03T06:55:09.627405Z"
    },
    "papermill": {
     "duration": 0.080274,
     "end_time": "2024-05-03T08:04:15.458328",
     "exception": false,
     "start_time": "2024-05-03T08:04:15.378054",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn import preprocessing\n",
    "label_encoder = preprocessing.LabelEncoder()\n",
    "df_target= label_encoder.fit_transform(df_target)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "58554a96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:15.615392Z",
     "iopub.status.busy": "2024-05-03T08:04:15.614625Z",
     "iopub.status.idle": "2024-05-03T08:04:15.617915Z",
     "shell.execute_reply": "2024-05-03T08:04:15.617332Z",
     "shell.execute_reply.started": "2024-05-03T06:55:09.639184Z"
    },
    "papermill": {
     "duration": 0.085262,
     "end_time": "2024-05-03T08:04:15.618067",
     "exception": false,
     "start_time": "2024-05-03T08:04:15.532805",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hasil_putusan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4597</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4598</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4599</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4600</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4601 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      hasil_putusan\n",
       "0                 5\n",
       "1                 6\n",
       "2                 4\n",
       "3                 6\n",
       "4                 6\n",
       "...             ...\n",
       "4596              6\n",
       "4597              6\n",
       "4598              6\n",
       "4599              4\n",
       "4600              6\n",
       "\n",
       "[4601 rows x 1 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_target1 = pd.DataFrame(df_target, columns=['hasil_putusan'])\n",
    "df_target1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4d64790f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:15.778072Z",
     "iopub.status.busy": "2024-05-03T08:04:15.771862Z",
     "iopub.status.idle": "2024-05-03T08:04:15.781514Z",
     "shell.execute_reply": "2024-05-03T08:04:15.781022Z",
     "shell.execute_reply.started": "2024-05-03T06:55:09.650841Z"
    },
    "papermill": {
     "duration": 0.090094,
     "end_time": "2024-05-03T08:04:15.781635",
     "exception": false,
     "start_time": "2024-05-03T08:04:15.691541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>jenis_pajak</th>\n",
       "      <th>jenis_sengketa</th>\n",
       "      <th>ketua</th>\n",
       "      <th>hasil_putusan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PPh Badan</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Masdi, S.E., M.Si.</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Dr. H.Yulius, S.H., M.H.</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PPh Badan</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Dr. Irfan Fachruddin, S.H., C.N.</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596</th>\n",
       "      <td>PPh Pasal 23</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Widayatno Sastrohardjono, S.H., M.Sc.</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4597</th>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Widayatno Sastrohardjono, S.H., M.Sc.</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4598</th>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Widayatno Sastrohardjono, S.H., MSc.</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4599</th>\n",
       "      <td>PPh Orang Pribadi</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Widayatno Sastrohardjono, S.H., M.Sc.</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4600</th>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Widayatno Sastrohardjono, S.H., M.Sc.</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4601 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            jenis_pajak jenis_sengketa                                  ketua  \\\n",
       "0             PPh Badan    Upaya Hukum                     Masdi, S.E., M.Si.   \n",
       "1           PPN & PPnBM    Upaya Hukum              Dr. H. Yulius, S.H., M.H.   \n",
       "2           PPN & PPnBM    Upaya Hukum              Dr. H. Yulius, S.H., M.H.   \n",
       "3           PPN & PPnBM    Upaya Hukum               Dr. H.Yulius, S.H., M.H.   \n",
       "4             PPh Badan    Upaya Hukum       Dr. Irfan Fachruddin, S.H., C.N.   \n",
       "...                 ...            ...                                    ...   \n",
       "4596       PPh Pasal 23    Upaya Hukum  Widayatno Sastrohardjono, S.H., M.Sc.   \n",
       "4597        PPN & PPnBM    Upaya Hukum  Widayatno Sastrohardjono, S.H., M.Sc.   \n",
       "4598        PPN & PPnBM    Upaya Hukum   Widayatno Sastrohardjono, S.H., MSc.   \n",
       "4599  PPh Orang Pribadi    Upaya Hukum  Widayatno Sastrohardjono, S.H., M.Sc.   \n",
       "4600        PPN & PPnBM    Upaya Hukum  Widayatno Sastrohardjono, S.H., M.Sc.   \n",
       "\n",
       "      hasil_putusan  \n",
       "0                 5  \n",
       "1                 6  \n",
       "2                 4  \n",
       "3                 6  \n",
       "4                 6  \n",
       "...             ...  \n",
       "4596              6  \n",
       "4597              6  \n",
       "4598              6  \n",
       "4599              4  \n",
       "4600              6  \n",
       "\n",
       "[4601 rows x 4 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frames = [df_cat, df_target1]\n",
    "df_concat = pd.concat(frames, axis=1, join='inner')\n",
    "df_concat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "801ff2d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:15.940562Z",
     "iopub.status.busy": "2024-05-03T08:04:15.939725Z",
     "iopub.status.idle": "2024-05-03T08:04:15.942383Z",
     "shell.execute_reply": "2024-05-03T08:04:15.941815Z",
     "shell.execute_reply.started": "2024-05-03T06:55:09.666711Z"
    },
    "papermill": {
     "duration": 0.086245,
     "end_time": "2024-05-03T08:04:15.942523",
     "exception": false,
     "start_time": "2024-05-03T08:04:15.856278",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_nlp1 = pd.DataFrame(df_nlp, columns=['teks_raw'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b51f51bc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:16.152526Z",
     "iopub.status.busy": "2024-05-03T08:04:16.115840Z",
     "iopub.status.idle": "2024-05-03T08:04:16.234621Z",
     "shell.execute_reply": "2024-05-03T08:04:16.233915Z",
     "shell.execute_reply.started": "2024-05-03T06:55:09.672688Z"
    },
    "papermill": {
     "duration": 0.21561,
     "end_time": "2024-05-03T08:04:16.234752",
     "exception": false,
     "start_time": "2024-05-03T08:04:16.019142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>teks_raw</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PUTUSAN PENGADILAN PAJAK PUT-015238.15/2020/PP...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 456/B/PK/PJK/2022 DEMI ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 1958/B/PK/PJK/2022 DEMI...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 4292/B/PK/PJK/2022 DEMI...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 1258/B/PK/PJK/2022 DEMI...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 351/B/PK/PJK/2009 DEMI ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4597</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 219/B/PK/PJK/2009 DEMI ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4598</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 224/B/PK/PJK/2008 DEMI ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4599</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 192/C/PK/PJK/2008 DEMI ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4600</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 131/B/PK/PJK/2004 DEMI ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4601 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               teks_raw\n",
       "0     PUTUSAN PENGADILAN PAJAK PUT-015238.15/2020/PP...\n",
       "1     PUTUSAN MAHKAMAH AGUNG 456/B/PK/PJK/2022 DEMI ...\n",
       "2     PUTUSAN MAHKAMAH AGUNG 1958/B/PK/PJK/2022 DEMI...\n",
       "3     PUTUSAN MAHKAMAH AGUNG 4292/B/PK/PJK/2022 DEMI...\n",
       "4     PUTUSAN MAHKAMAH AGUNG 1258/B/PK/PJK/2022 DEMI...\n",
       "...                                                 ...\n",
       "4596  PUTUSAN MAHKAMAH AGUNG 351/B/PK/PJK/2009 DEMI ...\n",
       "4597  PUTUSAN MAHKAMAH AGUNG 219/B/PK/PJK/2009 DEMI ...\n",
       "4598  PUTUSAN MAHKAMAH AGUNG 224/B/PK/PJK/2008 DEMI ...\n",
       "4599  PUTUSAN MAHKAMAH AGUNG 192/C/PK/PJK/2008 DEMI ...\n",
       "4600  PUTUSAN MAHKAMAH AGUNG 131/B/PK/PJK/2004 DEMI ...\n",
       "\n",
       "[4601 rows x 1 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_nlp1['teks_raw'] = df_nlp1['teks_raw'].str.replace(r'<[^<>]*>', '', regex=True)\n",
    "df_nlp1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5106c05f",
   "metadata": {
    "papermill": {
     "duration": 0.073855,
     "end_time": "2024-05-03T08:04:16.384522",
     "exception": false,
     "start_time": "2024-05-03T08:04:16.310667",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 5. Performing initial cleaning and tokenizing the corpus, introducing a function to perform further cleaning and Lemmatization upon the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "50a1711e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:04:16.715051Z",
     "iopub.status.busy": "2024-05-03T08:04:16.714061Z",
     "iopub.status.idle": "2024-05-03T08:07:44.853831Z",
     "shell.execute_reply": "2024-05-03T08:07:44.853248Z",
     "shell.execute_reply.started": "2024-05-03T06:55:09.812183Z"
    },
    "papermill": {
     "duration": 208.393562,
     "end_time": "2024-05-03T08:07:44.854030",
     "exception": false,
     "start_time": "2024-05-03T08:04:16.460468",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "corpus = df_nlp1[\"teks_raw\"]\n",
    "lst_tokens = nltk.tokenize.word_tokenize(corpus.str.cat(sep=\" \"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b54b5eea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:07:45.010176Z",
     "iopub.status.busy": "2024-05-03T08:07:45.009255Z",
     "iopub.status.idle": "2024-05-03T08:07:45.011836Z",
     "shell.execute_reply": "2024-05-03T08:07:45.011312Z",
     "shell.execute_reply.started": "2024-05-03T06:58:36.411485Z"
    },
    "papermill": {
     "duration": 0.082167,
     "end_time": "2024-05-03T08:07:45.011962",
     "exception": false,
     "start_time": "2024-05-03T08:07:44.929795",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "ps = nltk.stem.porter.PorterStemmer()\n",
    "lem = nltk.stem.wordnet.WordNetLemmatizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9d8c1a0e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:07:45.167691Z",
     "iopub.status.busy": "2024-05-03T08:07:45.167038Z",
     "iopub.status.idle": "2024-05-03T08:07:45.172732Z",
     "shell.execute_reply": "2024-05-03T08:07:45.173246Z",
     "shell.execute_reply.started": "2024-05-03T06:58:36.417704Z"
    },
    "papermill": {
     "duration": 0.085798,
     "end_time": "2024-05-03T08:07:45.173401",
     "exception": false,
     "start_time": "2024-05-03T08:07:45.087603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lst_stopwords = nltk.corpus.stopwords.words(\"indonesian\", \"english\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b240e588",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:07:45.331038Z",
     "iopub.status.busy": "2024-05-03T08:07:45.330271Z",
     "iopub.status.idle": "2024-05-03T08:07:45.332788Z",
     "shell.execute_reply": "2024-05-03T08:07:45.332216Z",
     "shell.execute_reply.started": "2024-05-03T06:58:36.435411Z"
    },
    "papermill": {
     "duration": 0.084333,
     "end_time": "2024-05-03T08:07:45.332905",
     "exception": false,
     "start_time": "2024-05-03T08:07:45.248572",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "def utils_preprocess_text(text, flg_stemm=False, flg_lemm=True, lst_stopwords=None):\n",
    "    ## clean (convert to lowercase and remove punctuations and characters and then strip)\n",
    "    text = re.sub(r'[^\\w\\s]', '', str(text).lower().strip())\n",
    "            \n",
    "    ## Tokenize (convert from string to list)\n",
    "    lst_text = text.split()    ## remove Stopwords\n",
    "    if lst_stopwords is not None:\n",
    "        lst_text = [word for word in lst_text if word not in \n",
    "                    lst_stopwords]\n",
    "                \n",
    "    ## Stemming (remove -ing, -ly, ...)\n",
    "    if flg_stemm == True:\n",
    "        ps = nltk.stem.porter.PorterStemmer()\n",
    "        lst_text = [ps.stem(word) for word in lst_text]\n",
    "                \n",
    "    ## Lemmatisation (convert the word into root word)\n",
    "    if flg_lemm == True:\n",
    "        lem = nltk.stem.wordnet.WordNetLemmatizer()\n",
    "        lst_text = [lem.lemmatize(word) for word in lst_text]\n",
    "            \n",
    "    ## back to string from list\n",
    "    text = \" \".join(lst_text)\n",
    "    return text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f95638f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:07:45.498949Z",
     "iopub.status.busy": "2024-05-03T08:07:45.493673Z",
     "iopub.status.idle": "2024-05-03T08:11:32.012609Z",
     "shell.execute_reply": "2024-05-03T08:11:32.011804Z",
     "shell.execute_reply.started": "2024-05-03T06:58:36.445099Z"
    },
    "papermill": {
     "duration": 226.605038,
     "end_time": "2024-05-03T08:11:32.012789",
     "exception": false,
     "start_time": "2024-05-03T08:07:45.407751",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_nlp1[\"teks_clean\"] = df_nlp1[\"teks_raw\"].apply(lambda x: utils_preprocess_text(x, flg_stemm=False, flg_lemm=True, lst_stopwords=lst_stopwords))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "da0a7fe4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:32.178946Z",
     "iopub.status.busy": "2024-05-03T08:11:32.178175Z",
     "iopub.status.idle": "2024-05-03T08:11:32.182106Z",
     "shell.execute_reply": "2024-05-03T08:11:32.181477Z",
     "shell.execute_reply.started": "2024-05-03T07:02:22.279049Z"
    },
    "papermill": {
     "duration": 0.093828,
     "end_time": "2024-05-03T08:11:32.182235",
     "exception": false,
     "start_time": "2024-05-03T08:11:32.088407",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>teks_raw</th>\n",
       "      <th>teks_clean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PUTUSAN PENGADILAN PAJAK PUT-015238.15/2020/PP...</td>\n",
       "      <td>putusan pengadilan pajak put015238152020ppmxii...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 456/B/PK/PJK/2022 DEMI ...</td>\n",
       "      <td>putusan mahkamah agung 456bpkpjk2022 keadilan ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 1958/B/PK/PJK/2022 DEMI...</td>\n",
       "      <td>putusan mahkamah agung 1958bpkpjk2022 keadilan...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 4292/B/PK/PJK/2022 DEMI...</td>\n",
       "      <td>putusan mahkamah agung 4292bpkpjk2022 keadilan...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 1258/B/PK/PJK/2022 DEMI...</td>\n",
       "      <td>putusan mahkamah agung 1258bpkpjk2022 keadilan...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 351/B/PK/PJK/2009 DEMI ...</td>\n",
       "      <td>putusan mahkamah agung 351bpkpjk2009 keadilan ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4597</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 219/B/PK/PJK/2009 DEMI ...</td>\n",
       "      <td>putusan mahkamah agung 219bpkpjk2009 keadilan ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4598</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 224/B/PK/PJK/2008 DEMI ...</td>\n",
       "      <td>putusan mahkamah agung 224bpkpjk2008 keadilan ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4599</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 192/C/PK/PJK/2008 DEMI ...</td>\n",
       "      <td>putusan mahkamah agung 192cpkpjk2008 keadilan ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4600</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 131/B/PK/PJK/2004 DEMI ...</td>\n",
       "      <td>putusan mahkamah agung 131bpkpjk2004 keadilan ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4601 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               teks_raw  \\\n",
       "0     PUTUSAN PENGADILAN PAJAK PUT-015238.15/2020/PP...   \n",
       "1     PUTUSAN MAHKAMAH AGUNG 456/B/PK/PJK/2022 DEMI ...   \n",
       "2     PUTUSAN MAHKAMAH AGUNG 1958/B/PK/PJK/2022 DEMI...   \n",
       "3     PUTUSAN MAHKAMAH AGUNG 4292/B/PK/PJK/2022 DEMI...   \n",
       "4     PUTUSAN MAHKAMAH AGUNG 1258/B/PK/PJK/2022 DEMI...   \n",
       "...                                                 ...   \n",
       "4596  PUTUSAN MAHKAMAH AGUNG 351/B/PK/PJK/2009 DEMI ...   \n",
       "4597  PUTUSAN MAHKAMAH AGUNG 219/B/PK/PJK/2009 DEMI ...   \n",
       "4598  PUTUSAN MAHKAMAH AGUNG 224/B/PK/PJK/2008 DEMI ...   \n",
       "4599  PUTUSAN MAHKAMAH AGUNG 192/C/PK/PJK/2008 DEMI ...   \n",
       "4600  PUTUSAN MAHKAMAH AGUNG 131/B/PK/PJK/2004 DEMI ...   \n",
       "\n",
       "                                             teks_clean  \n",
       "0     putusan pengadilan pajak put015238152020ppmxii...  \n",
       "1     putusan mahkamah agung 456bpkpjk2022 keadilan ...  \n",
       "2     putusan mahkamah agung 1958bpkpjk2022 keadilan...  \n",
       "3     putusan mahkamah agung 4292bpkpjk2022 keadilan...  \n",
       "4     putusan mahkamah agung 1258bpkpjk2022 keadilan...  \n",
       "...                                                 ...  \n",
       "4596  putusan mahkamah agung 351bpkpjk2009 keadilan ...  \n",
       "4597  putusan mahkamah agung 219bpkpjk2009 keadilan ...  \n",
       "4598  putusan mahkamah agung 224bpkpjk2008 keadilan ...  \n",
       "4599  putusan mahkamah agung 192cpkpjk2008 keadilan ...  \n",
       "4600  putusan mahkamah agung 131bpkpjk2004 keadilan ...  \n",
       "\n",
       "[4601 rows x 2 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_nlp1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71743916",
   "metadata": {
    "papermill": {
     "duration": 0.074789,
     "end_time": "2024-05-03T08:11:32.333006",
     "exception": false,
     "start_time": "2024-05-03T08:11:32.258217",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 6. Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "35bd5e46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:32.492433Z",
     "iopub.status.busy": "2024-05-03T08:11:32.491773Z",
     "iopub.status.idle": "2024-05-03T08:11:32.494763Z",
     "shell.execute_reply": "2024-05-03T08:11:32.494247Z",
     "shell.execute_reply.started": "2024-05-03T07:02:22.295593Z"
    },
    "papermill": {
     "duration": 0.086168,
     "end_time": "2024-05-03T08:11:32.494893",
     "exception": false,
     "start_time": "2024-05-03T08:11:32.408725",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_nlp2 = pd.concat([df_nlp1,df_target1['hasil_putusan']],axis=1, join='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "853fc302",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:32.659572Z",
     "iopub.status.busy": "2024-05-03T08:11:32.658698Z",
     "iopub.status.idle": "2024-05-03T08:11:32.661720Z",
     "shell.execute_reply": "2024-05-03T08:11:32.662235Z",
     "shell.execute_reply.started": "2024-05-03T07:02:22.305347Z"
    },
    "papermill": {
     "duration": 0.090459,
     "end_time": "2024-05-03T08:11:32.662405",
     "exception": false,
     "start_time": "2024-05-03T08:11:32.571946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6    1353\n",
       "5    1207\n",
       "3    1195\n",
       "2     341\n",
       "9     162\n",
       "4     151\n",
       "8      95\n",
       "7      56\n",
       "0      31\n",
       "1      10\n",
       "Name: hasil_putusan, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_nlp2[\"hasil_putusan\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "6c807be9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:32.832287Z",
     "iopub.status.busy": "2024-05-03T08:11:32.831576Z",
     "iopub.status.idle": "2024-05-03T08:11:32.834454Z",
     "shell.execute_reply": "2024-05-03T08:11:32.833909Z",
     "shell.execute_reply.started": "2024-05-03T07:02:22.319311Z"
    },
    "papermill": {
     "duration": 0.091649,
     "end_time": "2024-05-03T08:11:32.834589",
     "exception": false,
     "start_time": "2024-05-03T08:11:32.742940",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.pyplot import figure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "a58c8f69",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:33.003183Z",
     "iopub.status.busy": "2024-05-03T08:11:32.999300Z",
     "iopub.status.idle": "2024-05-03T08:11:33.851538Z",
     "shell.execute_reply": "2024-05-03T08:11:33.850898Z",
     "shell.execute_reply.started": "2024-05-03T07:02:22.327785Z"
    },
    "papermill": {
     "duration": 0.936301,
     "end_time": "2024-05-03T08:11:33.851671",
     "exception": false,
     "start_time": "2024-05-03T08:11:32.915370",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y = 1\n",
    "corpus = df_nlp2[df_nlp2[\"hasil_putusan\"]== y][\"teks_clean\"]\n",
    "lst_tokens = nltk.tokenize.word_tokenize(corpus.str.cat(sep=\" \"))\n",
    "fig, ax = plt.subplots(nrows=2, ncols=1)\n",
    "fig.suptitle(\"Most frequent words\", fontsize=15)\n",
    "#figure(figsize=(30, 24))\n",
    "## unigrams\n",
    "dic_words_freq = nltk.FreqDist(lst_tokens)\n",
    "dtf_uni = pd.DataFrame(dic_words_freq.most_common(), \n",
    "                       columns=[\"Word\",\"Freq\"])\n",
    "dtf_uni.set_index(\"Word\").iloc[:10,:].sort_values(by=\"Freq\").plot(\n",
    "                  kind=\"barh\", title=\"Unigrams\", ax=ax[0], \n",
    "                  legend=False).grid(axis='x')\n",
    "ax[0].set(ylabel=None)\n",
    "    \n",
    "## bigrams\n",
    "dic_words_freq = nltk.FreqDist(nltk.ngrams(lst_tokens, 2))\n",
    "dtf_bi = pd.DataFrame(dic_words_freq.most_common(), \n",
    "                      columns=[\"Word\",\"Freq\"])\n",
    "dtf_bi[\"Word\"] = dtf_bi[\"Word\"].apply(lambda x: \" \".join(\n",
    "                   string for string in x) )\n",
    "dtf_bi.set_index(\"Word\").iloc[:10,:].sort_values(by=\"Freq\").plot(\n",
    "                  kind=\"barh\", title=\"Bigrams\", ax=ax[1],\n",
    "                  legend=False).grid(axis='x')\n",
    "ax[1].set(ylabel=None)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5b3e5a34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:34.125725Z",
     "iopub.status.busy": "2024-05-03T08:11:34.091666Z",
     "iopub.status.idle": "2024-05-03T08:11:34.941205Z",
     "shell.execute_reply": "2024-05-03T08:11:34.941699Z",
     "shell.execute_reply.started": "2024-05-03T07:02:23.197771Z"
    },
    "papermill": {
     "duration": 1.012929,
     "end_time": "2024-05-03T08:11:34.941864",
     "exception": false,
     "start_time": "2024-05-03T08:11:33.928935",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y = 0\n",
    "corpus = df_nlp2[df_nlp2[\"hasil_putusan\"]== y][\"teks_clean\"]\n",
    "lst_tokens = nltk.tokenize.word_tokenize(corpus.str.cat(sep=\" \"))\n",
    "fig, ax = plt.subplots(nrows=2, ncols=1)\n",
    "fig.suptitle(\"Most frequent words\", fontsize=15)\n",
    "#figure(figsize=(30, 24))\n",
    "## unigrams\n",
    "dic_words_freq = nltk.FreqDist(lst_tokens)\n",
    "dtf_uni = pd.DataFrame(dic_words_freq.most_common(), \n",
    "                       columns=[\"Word\",\"Freq\"])\n",
    "dtf_uni.set_index(\"Word\").iloc[:10,:].sort_values(by=\"Freq\").plot(\n",
    "                  kind=\"barh\", title=\"Unigrams\", ax=ax[0], \n",
    "                  legend=False).grid(axis='x')\n",
    "ax[0].set(ylabel=None)\n",
    "    \n",
    "## bigrams\n",
    "dic_words_freq = nltk.FreqDist(nltk.ngrams(lst_tokens, 2))\n",
    "dtf_bi = pd.DataFrame(dic_words_freq.most_common(), \n",
    "                      columns=[\"Word\",\"Freq\"])\n",
    "dtf_bi[\"Word\"] = dtf_bi[\"Word\"].apply(lambda x: \" \".join(\n",
    "                   string for string in x) )\n",
    "dtf_bi.set_index(\"Word\").iloc[:10,:].sort_values(by=\"Freq\").plot(\n",
    "                  kind=\"barh\", title=\"Bigrams\", ax=ax[1],\n",
    "                  legend=False).grid(axis='x')\n",
    "ax[1].set(ylabel=None)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "54147407",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:35.103095Z",
     "iopub.status.busy": "2024-05-03T08:11:35.102326Z",
     "iopub.status.idle": "2024-05-03T08:11:35.141966Z",
     "shell.execute_reply": "2024-05-03T08:11:35.141475Z",
     "shell.execute_reply.started": "2024-05-03T07:02:24.153755Z"
    },
    "papermill": {
     "duration": 0.12158,
     "end_time": "2024-05-03T08:11:35.142109",
     "exception": false,
     "start_time": "2024-05-03T08:11:35.020529",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import wordcloud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "c272a1da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:35.308325Z",
     "iopub.status.busy": "2024-05-03T08:11:35.307699Z",
     "iopub.status.idle": "2024-05-03T08:11:35.556764Z",
     "shell.execute_reply": "2024-05-03T08:11:35.557915Z",
     "shell.execute_reply.started": "2024-05-03T07:02:24.192964Z"
    },
    "papermill": {
     "duration": 0.337406,
     "end_time": "2024-05-03T08:11:35.558250",
     "exception": false,
     "start_time": "2024-05-03T08:11:35.220844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "wc = wordcloud.WordCloud(background_color='black', max_words=100, \n",
    "                         max_font_size=35)\n",
    "wc = wc.generate(str(corpus))\n",
    "fig = plt.figure(num=1)\n",
    "plt.axis('off')\n",
    "plt.imshow(wc, cmap=None)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "a3fba5c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:35.730105Z",
     "iopub.status.busy": "2024-05-03T08:11:35.729447Z",
     "iopub.status.idle": "2024-05-03T08:11:36.164981Z",
     "shell.execute_reply": "2024-05-03T08:11:36.164447Z",
     "shell.execute_reply.started": "2024-05-03T07:02:24.459963Z"
    },
    "papermill": {
     "duration": 0.518897,
     "end_time": "2024-05-03T08:11:36.165164",
     "exception": false,
     "start_time": "2024-05-03T08:11:35.646267",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import gensim.downloader as gensim_api\n",
    "import gensim\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "ebf02c86",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:36.347421Z",
     "iopub.status.busy": "2024-05-03T08:11:36.333940Z",
     "iopub.status.idle": "2024-05-03T08:11:37.252929Z",
     "shell.execute_reply": "2024-05-03T08:11:37.253485Z",
     "shell.execute_reply.started": "2024-05-03T07:02:24.951286Z"
    },
    "papermill": {
     "duration": 1.006891,
     "end_time": "2024-05-03T08:11:37.253673",
     "exception": false,
     "start_time": "2024-05-03T08:11:36.246782",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y = 1\n",
    "corpus = df_nlp2[df_nlp2[\"hasil_putusan\"]==y][\"teks_clean\"]\n",
    "## pre-process corpus\n",
    "lst_corpus = []\n",
    "for string in corpus:\n",
    "    lst_words = string.split()\n",
    "    lst_grams = [\" \".join(lst_words[i:i + 2]) for i in range(0, \n",
    "                     len(lst_words), 2)]\n",
    "    lst_corpus.append(lst_grams)## map words to an id\n",
    "id2word = gensim.corpora.Dictionary(lst_corpus)## create dictionary word:freq\n",
    "dic_corpus = [id2word.doc2bow(word) for word in lst_corpus] ## train LDA\n",
    "lda_model = gensim.models.ldamodel.LdaModel(corpus=dic_corpus, id2word=id2word, num_topics=7, random_state=123, update_every=1, chunksize=100, passes=10, alpha='auto', per_word_topics=True)\n",
    "   \n",
    "## output\n",
    "lst_dics = []\n",
    "for i in range(0,3):\n",
    "    lst_tuples = lda_model.get_topic_terms(i)\n",
    "    for tupla in lst_tuples:\n",
    "        lst_dics.append({\"topic\":i, \"id\":tupla[0], \n",
    "                         \"word\":id2word[tupla[0]], \n",
    "                         \"weight\":tupla[1]})\n",
    "dtf_topics = pd.DataFrame(lst_dics, \n",
    "                         columns=['topic','id','word','weight'])\n",
    "\n",
    "## plot\n",
    "fig, ax = plt.subplots()\n",
    "sns.barplot(y=\"word\", x=\"weight\", hue=\"topic\", data=dtf_topics, dodge=False, ax=ax).set_title('Main Topics')\n",
    "ax.set(ylabel=\"\", xlabel=\"Word Importance\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "79b49e5a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:37.481496Z",
     "iopub.status.busy": "2024-05-03T08:11:37.444662Z",
     "iopub.status.idle": "2024-05-03T08:11:40.667095Z",
     "shell.execute_reply": "2024-05-03T08:11:40.666566Z",
     "shell.execute_reply.started": "2024-05-03T07:02:25.965163Z"
    },
    "papermill": {
     "duration": 3.331087,
     "end_time": "2024-05-03T08:11:40.667229",
     "exception": false,
     "start_time": "2024-05-03T08:11:37.336142",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y = 0\n",
    "corpus = df_nlp2[df_nlp2[\"hasil_putusan\"]==y][\"teks_clean\"]\n",
    "## pre-process corpus\n",
    "lst_corpus = []\n",
    "for string in corpus:\n",
    "    lst_words = string.split()\n",
    "    lst_grams = [\" \".join(lst_words[i:i + 2]) for i in range(0, \n",
    "                     len(lst_words), 2)]\n",
    "    lst_corpus.append(lst_grams)## map words to an id\n",
    "id2word = gensim.corpora.Dictionary(lst_corpus)## create dictionary word:freq\n",
    "dic_corpus = [id2word.doc2bow(word) for word in lst_corpus] ## train LDA\n",
    "lda_model = gensim.models.ldamodel.LdaModel(corpus=dic_corpus, id2word=id2word, num_topics=7, random_state=123, update_every=1, chunksize=100, passes=10, alpha='auto', per_word_topics=True)\n",
    "   \n",
    "## output\n",
    "lst_dics = []\n",
    "for i in range(0,3):\n",
    "    lst_tuples = lda_model.get_topic_terms(i)\n",
    "    for tupla in lst_tuples:\n",
    "        lst_dics.append({\"topic\":i, \"id\":tupla[0], \n",
    "                         \"word\":id2word[tupla[0]], \n",
    "                         \"weight\":tupla[1]})\n",
    "dtf_topics = pd.DataFrame(lst_dics, \n",
    "                         columns=['topic','id','word','weight'])\n",
    "\n",
    "## plot\n",
    "fig, ax = plt.subplots()\n",
    "sns.barplot(y=\"word\", x=\"weight\", hue=\"topic\", data=dtf_topics, dodge=False, ax=ax).set_title('Main Topics')\n",
    "ax.set(ylabel=\"\", xlabel=\"Word Importance\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87e1f1d6",
   "metadata": {
    "papermill": {
     "duration": 0.08384,
     "end_time": "2024-05-03T08:11:40.834243",
     "exception": false,
     "start_time": "2024-05-03T08:11:40.750403",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 7. Introducing Count Vectorizer to derive features from textual data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "0a28b835",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:41.007072Z",
     "iopub.status.busy": "2024-05-03T08:11:41.005439Z",
     "iopub.status.idle": "2024-05-03T08:11:41.011758Z",
     "shell.execute_reply": "2024-05-03T08:11:41.011241Z",
     "shell.execute_reply.started": "2024-05-03T07:02:29.209096Z"
    },
    "papermill": {
     "duration": 0.093286,
     "end_time": "2024-05-03T08:11:41.011889",
     "exception": false,
     "start_time": "2024-05-03T08:11:40.918603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.feature_extraction.text import CountVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "15af8d56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:41.182045Z",
     "iopub.status.busy": "2024-05-03T08:11:41.181260Z",
     "iopub.status.idle": "2024-05-03T08:11:41.183467Z",
     "shell.execute_reply": "2024-05-03T08:11:41.183905Z",
     "shell.execute_reply.started": "2024-05-03T07:02:29.216282Z"
    },
    "papermill": {
     "duration": 0.089412,
     "end_time": "2024-05-03T08:11:41.184086",
     "exception": false,
     "start_time": "2024-05-03T08:11:41.094674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "vectorizer = CountVectorizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "9e762c19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:41.355036Z",
     "iopub.status.busy": "2024-05-03T08:11:41.354202Z",
     "iopub.status.idle": "2024-05-03T08:11:41.356831Z",
     "shell.execute_reply": "2024-05-03T08:11:41.356253Z",
     "shell.execute_reply.started": "2024-05-03T07:02:29.222869Z"
    },
    "papermill": {
     "duration": 0.090552,
     "end_time": "2024-05-03T08:11:41.356954",
     "exception": false,
     "start_time": "2024-05-03T08:11:41.266402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_nlp2 = pd.concat([df_nlp1,df_target1['hasil_putusan']],axis=1, join='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "fc2a839e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:41.527348Z",
     "iopub.status.busy": "2024-05-03T08:11:41.526535Z",
     "iopub.status.idle": "2024-05-03T08:11:41.528562Z",
     "shell.execute_reply": "2024-05-03T08:11:41.529069Z",
     "shell.execute_reply.started": "2024-05-03T07:02:29.232234Z"
    },
    "papermill": {
     "duration": 0.089949,
     "end_time": "2024-05-03T08:11:41.529212",
     "exception": false,
     "start_time": "2024-05-03T08:11:41.439263",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "xfeatures = df_nlp2['teks_clean']\n",
    "ylabel = df_nlp2['hasil_putusan']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5b74850",
   "metadata": {
    "papermill": {
     "duration": 0.082409,
     "end_time": "2024-05-03T08:11:41.694031",
     "exception": false,
     "start_time": "2024-05-03T08:11:41.611622",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 8. Using sklearn train_test_split and Pipeline to fit and score the model on Logistic Regression, RandomForest and K-NearestNeighbors on the newly engineered features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9ffda898",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:41.866575Z",
     "iopub.status.busy": "2024-05-03T08:11:41.865955Z",
     "iopub.status.idle": "2024-05-03T08:11:41.868508Z",
     "shell.execute_reply": "2024-05-03T08:11:41.868976Z",
     "shell.execute_reply.started": "2024-05-03T07:02:29.241760Z"
    },
    "papermill": {
     "duration": 0.092261,
     "end_time": "2024-05-03T08:11:41.869153",
     "exception": false,
     "start_time": "2024-05-03T08:11:41.776892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(xfeatures,ylabel, test_size=0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b030969f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:42.040498Z",
     "iopub.status.busy": "2024-05-03T08:11:42.039872Z",
     "iopub.status.idle": "2024-05-03T08:11:42.042742Z",
     "shell.execute_reply": "2024-05-03T08:11:42.042155Z",
     "shell.execute_reply.started": "2024-05-03T07:02:29.251770Z"
    },
    "papermill": {
     "duration": 0.090218,
     "end_time": "2024-05-03T08:11:42.042858",
     "exception": false,
     "start_time": "2024-05-03T08:11:41.952640",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pipe = Pipeline(steps=[('cv',CountVectorizer()),('lr',LogisticRegression(solver='liblinear'))])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "bdae2501",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:11:42.263639Z",
     "iopub.status.busy": "2024-05-03T08:11:42.215721Z",
     "iopub.status.idle": "2024-05-03T08:12:26.206917Z",
     "shell.execute_reply": "2024-05-03T08:12:26.207436Z",
     "shell.execute_reply.started": "2024-05-03T07:02:29.260276Z"
    },
    "papermill": {
     "duration": 44.082178,
     "end_time": "2024-05-03T08:12:26.207600",
     "exception": false,
     "start_time": "2024-05-03T08:11:42.125422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('cv', CountVectorizer()),\n",
       "                ('lr', LogisticRegression(solver='liblinear'))])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e5fc0827",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:12:26.433285Z",
     "iopub.status.busy": "2024-05-03T08:12:26.396892Z",
     "iopub.status.idle": "2024-05-03T08:12:28.878077Z",
     "shell.execute_reply": "2024-05-03T08:12:28.877401Z",
     "shell.execute_reply.started": "2024-05-03T07:03:11.612007Z"
    },
    "papermill": {
     "duration": 2.585948,
     "end_time": "2024-05-03T08:12:28.878229",
     "exception": false,
     "start_time": "2024-05-03T08:12:26.292281",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9287576020851434"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "647ff31b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:12:29.057442Z",
     "iopub.status.busy": "2024-05-03T08:12:29.056674Z",
     "iopub.status.idle": "2024-05-03T08:12:29.101255Z",
     "shell.execute_reply": "2024-05-03T08:12:29.101739Z",
     "shell.execute_reply.started": "2024-05-03T07:03:14.062622Z"
    },
    "papermill": {
     "duration": 0.138161,
     "end_time": "2024-05-03T08:12:29.101893",
     "exception": false,
     "start_time": "2024-05-03T08:12:28.963732",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "9dbe489e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:12:29.297598Z",
     "iopub.status.busy": "2024-05-03T08:12:29.296800Z",
     "iopub.status.idle": "2024-05-03T08:12:29.300412Z",
     "shell.execute_reply": "2024-05-03T08:12:29.299736Z",
     "shell.execute_reply.started": "2024-05-03T07:03:14.108100Z"
    },
    "papermill": {
     "duration": 0.102888,
     "end_time": "2024-05-03T08:12:29.300546",
     "exception": false,
     "start_time": "2024-05-03T08:12:29.197658",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pipe1= Pipeline(steps=[('cv',CountVectorizer()),('rf',RandomForestClassifier())])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "efee2e58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:12:29.546625Z",
     "iopub.status.busy": "2024-05-03T08:12:29.509694Z",
     "iopub.status.idle": "2024-05-03T08:12:39.903544Z",
     "shell.execute_reply": "2024-05-03T08:12:39.902968Z",
     "shell.execute_reply.started": "2024-05-03T07:03:14.113766Z"
    },
    "papermill": {
     "duration": 10.517482,
     "end_time": "2024-05-03T08:12:39.903690",
     "exception": false,
     "start_time": "2024-05-03T08:12:29.386208",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('cv', CountVectorizer()), ('rf', RandomForestClassifier())])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe1.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "ff75b753",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:12:40.103567Z",
     "iopub.status.busy": "2024-05-03T08:12:40.096361Z",
     "iopub.status.idle": "2024-05-03T08:12:48.053407Z",
     "shell.execute_reply": "2024-05-03T08:12:48.052713Z",
     "shell.execute_reply.started": "2024-05-03T07:03:24.825598Z"
    },
    "papermill": {
     "duration": 8.060149,
     "end_time": "2024-05-03T08:12:48.053550",
     "exception": false,
     "start_time": "2024-05-03T08:12:39.993401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe1.score(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "44081738",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:12:48.250367Z",
     "iopub.status.busy": "2024-05-03T08:12:48.240022Z",
     "iopub.status.idle": "2024-05-03T08:12:50.957455Z",
     "shell.execute_reply": "2024-05-03T08:12:50.956877Z",
     "shell.execute_reply.started": "2024-05-03T07:03:32.738764Z"
    },
    "papermill": {
     "duration": 2.81881,
     "end_time": "2024-05-03T08:12:50.957596",
     "exception": false,
     "start_time": "2024-05-03T08:12:48.138786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9278887923544744"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe1.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "07d322ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:12:51.143957Z",
     "iopub.status.busy": "2024-05-03T08:12:51.143079Z",
     "iopub.status.idle": "2024-05-03T08:12:51.145539Z",
     "shell.execute_reply": "2024-05-03T08:12:51.145045Z",
     "shell.execute_reply.started": "2024-05-03T07:03:35.383652Z"
    },
    "papermill": {
     "duration": 0.095248,
     "end_time": "2024-05-03T08:12:51.145665",
     "exception": false,
     "start_time": "2024-05-03T08:12:51.050417",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "pipe2= Pipeline(steps=[('cv',CountVectorizer()),('rf',KNeighborsClassifier(n_neighbors=3))])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "34f24419",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:12:51.367280Z",
     "iopub.status.busy": "2024-05-03T08:12:51.324086Z",
     "iopub.status.idle": "2024-05-03T08:12:58.876167Z",
     "shell.execute_reply": "2024-05-03T08:12:58.875635Z",
     "shell.execute_reply.started": "2024-05-03T07:03:35.389715Z"
    },
    "papermill": {
     "duration": 7.645425,
     "end_time": "2024-05-03T08:12:58.876313",
     "exception": false,
     "start_time": "2024-05-03T08:12:51.230888",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('cv', CountVectorizer()),\n",
       "                ('rf', KNeighborsClassifier(n_neighbors=3))])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe2.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "1e6ff59d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:12:59.134562Z",
     "iopub.status.busy": "2024-05-03T08:12:59.096183Z",
     "iopub.status.idle": "2024-05-03T08:13:13.504806Z",
     "shell.execute_reply": "2024-05-03T08:13:13.504187Z",
     "shell.execute_reply.started": "2024-05-03T07:03:42.914275Z"
    },
    "papermill": {
     "duration": 14.543123,
     "end_time": "2024-05-03T08:13:13.504941",
     "exception": false,
     "start_time": "2024-05-03T08:12:58.961818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.94"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe2.score(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "488645fc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:13.764650Z",
     "iopub.status.busy": "2024-05-03T08:13:13.715059Z",
     "iopub.status.idle": "2024-05-03T08:13:18.545575Z",
     "shell.execute_reply": "2024-05-03T08:13:18.546411Z",
     "shell.execute_reply.started": "2024-05-03T07:03:57.293727Z"
    },
    "papermill": {
     "duration": 4.956085,
     "end_time": "2024-05-03T08:13:18.546638",
     "exception": false,
     "start_time": "2024-05-03T08:13:13.590553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8583840139009556"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe2.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96223441",
   "metadata": {
    "papermill": {
     "duration": 0.099993,
     "end_time": "2024-05-03T08:13:18.740117",
     "exception": false,
     "start_time": "2024-05-03T08:13:18.640124",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 9. Now including the one-hot encoded features within our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "6e325690",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:18.936768Z",
     "iopub.status.busy": "2024-05-03T08:13:18.936040Z",
     "iopub.status.idle": "2024-05-03T08:13:18.939032Z",
     "shell.execute_reply": "2024-05-03T08:13:18.938170Z",
     "shell.execute_reply.started": "2024-05-03T07:04:02.092431Z"
    },
    "papermill": {
     "duration": 0.098946,
     "end_time": "2024-05-03T08:13:18.939168",
     "exception": false,
     "start_time": "2024-05-03T08:13:18.840222",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_nl1=pd.concat([df_nlp2,df_cat],axis=1,join='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "644d1284",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:19.135434Z",
     "iopub.status.busy": "2024-05-03T08:13:19.134574Z",
     "iopub.status.idle": "2024-05-03T08:13:19.137797Z",
     "shell.execute_reply": "2024-05-03T08:13:19.138313Z",
     "shell.execute_reply.started": "2024-05-03T07:04:02.099491Z"
    },
    "papermill": {
     "duration": 0.111249,
     "end_time": "2024-05-03T08:13:19.138467",
     "exception": false,
     "start_time": "2024-05-03T08:13:19.027218",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>teks_raw</th>\n",
       "      <th>teks_clean</th>\n",
       "      <th>hasil_putusan</th>\n",
       "      <th>jenis_pajak</th>\n",
       "      <th>jenis_sengketa</th>\n",
       "      <th>ketua</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PUTUSAN PENGADILAN PAJAK PUT-015238.15/2020/PP...</td>\n",
       "      <td>putusan pengadilan pajak put015238152020ppmxii...</td>\n",
       "      <td>5</td>\n",
       "      <td>PPh Badan</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Masdi, S.E., M.Si.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 456/B/PK/PJK/2022 DEMI ...</td>\n",
       "      <td>putusan mahkamah agung 456bpkpjk2022 keadilan ...</td>\n",
       "      <td>6</td>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 1958/B/PK/PJK/2022 DEMI...</td>\n",
       "      <td>putusan mahkamah agung 1958bpkpjk2022 keadilan...</td>\n",
       "      <td>4</td>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Dr. H. Yulius, S.H., M.H.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 4292/B/PK/PJK/2022 DEMI...</td>\n",
       "      <td>putusan mahkamah agung 4292bpkpjk2022 keadilan...</td>\n",
       "      <td>6</td>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Dr. H.Yulius, S.H., M.H.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 1258/B/PK/PJK/2022 DEMI...</td>\n",
       "      <td>putusan mahkamah agung 1258bpkpjk2022 keadilan...</td>\n",
       "      <td>6</td>\n",
       "      <td>PPh Badan</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Dr. Irfan Fachruddin, S.H., C.N.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 351/B/PK/PJK/2009 DEMI ...</td>\n",
       "      <td>putusan mahkamah agung 351bpkpjk2009 keadilan ...</td>\n",
       "      <td>6</td>\n",
       "      <td>PPh Pasal 23</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Widayatno Sastrohardjono, S.H., M.Sc.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4597</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 219/B/PK/PJK/2009 DEMI ...</td>\n",
       "      <td>putusan mahkamah agung 219bpkpjk2009 keadilan ...</td>\n",
       "      <td>6</td>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Widayatno Sastrohardjono, S.H., M.Sc.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4598</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 224/B/PK/PJK/2008 DEMI ...</td>\n",
       "      <td>putusan mahkamah agung 224bpkpjk2008 keadilan ...</td>\n",
       "      <td>6</td>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Widayatno Sastrohardjono, S.H., MSc.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4599</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 192/C/PK/PJK/2008 DEMI ...</td>\n",
       "      <td>putusan mahkamah agung 192cpkpjk2008 keadilan ...</td>\n",
       "      <td>4</td>\n",
       "      <td>PPh Orang Pribadi</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Widayatno Sastrohardjono, S.H., M.Sc.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4600</th>\n",
       "      <td>PUTUSAN MAHKAMAH AGUNG 131/B/PK/PJK/2004 DEMI ...</td>\n",
       "      <td>putusan mahkamah agung 131bpkpjk2004 keadilan ...</td>\n",
       "      <td>6</td>\n",
       "      <td>PPN &amp; PPnBM</td>\n",
       "      <td>Upaya Hukum</td>\n",
       "      <td>Widayatno Sastrohardjono, S.H., M.Sc.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4601 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               teks_raw  \\\n",
       "0     PUTUSAN PENGADILAN PAJAK PUT-015238.15/2020/PP...   \n",
       "1     PUTUSAN MAHKAMAH AGUNG 456/B/PK/PJK/2022 DEMI ...   \n",
       "2     PUTUSAN MAHKAMAH AGUNG 1958/B/PK/PJK/2022 DEMI...   \n",
       "3     PUTUSAN MAHKAMAH AGUNG 4292/B/PK/PJK/2022 DEMI...   \n",
       "4     PUTUSAN MAHKAMAH AGUNG 1258/B/PK/PJK/2022 DEMI...   \n",
       "...                                                 ...   \n",
       "4596  PUTUSAN MAHKAMAH AGUNG 351/B/PK/PJK/2009 DEMI ...   \n",
       "4597  PUTUSAN MAHKAMAH AGUNG 219/B/PK/PJK/2009 DEMI ...   \n",
       "4598  PUTUSAN MAHKAMAH AGUNG 224/B/PK/PJK/2008 DEMI ...   \n",
       "4599  PUTUSAN MAHKAMAH AGUNG 192/C/PK/PJK/2008 DEMI ...   \n",
       "4600  PUTUSAN MAHKAMAH AGUNG 131/B/PK/PJK/2004 DEMI ...   \n",
       "\n",
       "                                             teks_clean  hasil_putusan  \\\n",
       "0     putusan pengadilan pajak put015238152020ppmxii...              5   \n",
       "1     putusan mahkamah agung 456bpkpjk2022 keadilan ...              6   \n",
       "2     putusan mahkamah agung 1958bpkpjk2022 keadilan...              4   \n",
       "3     putusan mahkamah agung 4292bpkpjk2022 keadilan...              6   \n",
       "4     putusan mahkamah agung 1258bpkpjk2022 keadilan...              6   \n",
       "...                                                 ...            ...   \n",
       "4596  putusan mahkamah agung 351bpkpjk2009 keadilan ...              6   \n",
       "4597  putusan mahkamah agung 219bpkpjk2009 keadilan ...              6   \n",
       "4598  putusan mahkamah agung 224bpkpjk2008 keadilan ...              6   \n",
       "4599  putusan mahkamah agung 192cpkpjk2008 keadilan ...              4   \n",
       "4600  putusan mahkamah agung 131bpkpjk2004 keadilan ...              6   \n",
       "\n",
       "            jenis_pajak jenis_sengketa                                  ketua  \n",
       "0             PPh Badan    Upaya Hukum                     Masdi, S.E., M.Si.  \n",
       "1           PPN & PPnBM    Upaya Hukum              Dr. H. Yulius, S.H., M.H.  \n",
       "2           PPN & PPnBM    Upaya Hukum              Dr. H. Yulius, S.H., M.H.  \n",
       "3           PPN & PPnBM    Upaya Hukum               Dr. H.Yulius, S.H., M.H.  \n",
       "4             PPh Badan    Upaya Hukum       Dr. Irfan Fachruddin, S.H., C.N.  \n",
       "...                 ...            ...                                    ...  \n",
       "4596       PPh Pasal 23    Upaya Hukum  Widayatno Sastrohardjono, S.H., M.Sc.  \n",
       "4597        PPN & PPnBM    Upaya Hukum  Widayatno Sastrohardjono, S.H., M.Sc.  \n",
       "4598        PPN & PPnBM    Upaya Hukum   Widayatno Sastrohardjono, S.H., MSc.  \n",
       "4599  PPh Orang Pribadi    Upaya Hukum  Widayatno Sastrohardjono, S.H., M.Sc.  \n",
       "4600        PPN & PPnBM    Upaya Hukum  Widayatno Sastrohardjono, S.H., M.Sc.  \n",
       "\n",
       "[4601 rows x 6 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_nl1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "995a7299",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:19.324019Z",
     "iopub.status.busy": "2024-05-03T08:13:19.323189Z",
     "iopub.status.idle": "2024-05-03T08:13:19.326068Z",
     "shell.execute_reply": "2024-05-03T08:13:19.325428Z",
     "shell.execute_reply.started": "2024-05-03T07:04:02.127951Z"
    },
    "papermill": {
     "duration": 0.099382,
     "end_time": "2024-05-03T08:13:19.326230",
     "exception": false,
     "start_time": "2024-05-03T08:13:19.226848",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "xfeatures1 = df_nl1[['teks_clean','jenis_pajak','jenis_sengketa','ketua']]\n",
    "ylabel1 = df_nl1['hasil_putusan']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "be07a32b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:19.508720Z",
     "iopub.status.busy": "2024-05-03T08:13:19.507116Z",
     "iopub.status.idle": "2024-05-03T08:13:19.511150Z",
     "shell.execute_reply": "2024-05-03T08:13:19.510660Z",
     "shell.execute_reply.started": "2024-05-03T07:04:02.139190Z"
    },
    "papermill": {
     "duration": 0.093954,
     "end_time": "2024-05-03T08:13:19.511276",
     "exception": false,
     "start_time": "2024-05-03T08:13:19.417322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_cat1 = pd.get_dummies(df_cat['jenis_pajak'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "2cf7b114",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:19.687510Z",
     "iopub.status.busy": "2024-05-03T08:13:19.686761Z",
     "iopub.status.idle": "2024-05-03T08:13:19.689169Z",
     "shell.execute_reply": "2024-05-03T08:13:19.688669Z",
     "shell.execute_reply.started": "2024-05-03T07:04:02.152505Z"
    },
    "papermill": {
     "duration": 0.092428,
     "end_time": "2024-05-03T08:13:19.689296",
     "exception": false,
     "start_time": "2024-05-03T08:13:19.596868",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_cat2 = pd.get_dummies(df_cat['jenis_sengketa'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "1208f538",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:19.869477Z",
     "iopub.status.busy": "2024-05-03T08:13:19.868854Z",
     "iopub.status.idle": "2024-05-03T08:13:19.876433Z",
     "shell.execute_reply": "2024-05-03T08:13:19.875906Z",
     "shell.execute_reply.started": "2024-05-03T07:04:02.162909Z"
    },
    "papermill": {
     "duration": 0.101725,
     "end_time": "2024-05-03T08:13:19.876564",
     "exception": false,
     "start_time": "2024-05-03T08:13:19.774839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_cat3 = pd.get_dummies(df_cat['ketua'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "1f330896",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:20.070330Z",
     "iopub.status.busy": "2024-05-03T08:13:20.069655Z",
     "iopub.status.idle": "2024-05-03T08:13:20.073231Z",
     "shell.execute_reply": "2024-05-03T08:13:20.072598Z",
     "shell.execute_reply.started": "2024-05-03T07:04:02.177748Z"
    },
    "papermill": {
     "duration": 0.111393,
     "end_time": "2024-05-03T08:13:20.073360",
     "exception": false,
     "start_time": "2024-05-03T08:13:19.961967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_cat4=pd.concat([df_cat2,df_cat1,df_cat3],axis=1,join='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "08d2992b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:20.251930Z",
     "iopub.status.busy": "2024-05-03T08:13:20.251249Z",
     "iopub.status.idle": "2024-05-03T08:13:20.254193Z",
     "shell.execute_reply": "2024-05-03T08:13:20.254657Z",
     "shell.execute_reply.started": "2024-05-03T07:04:02.184172Z"
    },
    "papermill": {
     "duration": 0.09538,
     "end_time": "2024-05-03T08:13:20.254811",
     "exception": false,
     "start_time": "2024-05-03T08:13:20.159431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Upaya Hukum', 'BPHTB', 'Bea & Cukai', 'Gugatan', 'Lainnya', 'PBB',\n",
       "       'PPN & PPnBM', 'PPh Badan', 'PPh Orang Pribadi', 'PPh Pasal 15',\n",
       "       ...\n",
       "       'Wishnoe Saleh Thaib, S.H., M.H., M.Sc., Ak., CA.',\n",
       "       'dengan dihadiri oleh para Hakim Anggota dan Panitera Pengganti, serta dihadiri oleh Terbanding dan Pemohon Banding.',\n",
       "       'dengan dihadiri oleh para Hakim Anggota, Panitera Pengganti, serta dihadiri oleh Terbanding dan Pemohon Banding.',\n",
       "       'lr. Hendi Budi Santosa, M.Eng.',\n",
       "       'penetapan Ketua dalam hal surat pernyataan pencabutan diajukan sebelum sidang dilaksanakan;',\n",
       "       'penetapan Ketua dalam hal surat pernyataan pencabutan diajukan sebelum sidang;',\n",
       "       'titip olah',\n",
       "       'untuk selanjutnya disebut sebagai Termohon Peninjauan Kembali dahulu Pemohon Banding;',\n",
       "       '  Tri Hidayat Wahyudi,Ak.,M.B.A ',\n",
       "       '  Tri Hidayat Wahyudi,Ak.,M.B.A  '],\n",
       "      dtype='object', length=515)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_cat4.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "c97abd91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:20.433898Z",
     "iopub.status.busy": "2024-05-03T08:13:20.433301Z",
     "iopub.status.idle": "2024-05-03T08:13:20.436536Z",
     "shell.execute_reply": "2024-05-03T08:13:20.436050Z",
     "shell.execute_reply.started": "2024-05-03T07:04:02.195442Z"
    },
    "papermill": {
     "duration": 0.094611,
     "end_time": "2024-05-03T08:13:20.436659",
     "exception": false,
     "start_time": "2024-05-03T08:13:20.342048",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_cat4=pd.concat([df_cat4,df_nl1['hasil_putusan']],axis=1,join='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "ad8301c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:20.611529Z",
     "iopub.status.busy": "2024-05-03T08:13:20.610095Z",
     "iopub.status.idle": "2024-05-03T08:13:20.614143Z",
     "shell.execute_reply": "2024-05-03T08:13:20.613651Z",
     "shell.execute_reply.started": "2024-05-03T07:04:02.205048Z"
    },
    "papermill": {
     "duration": 0.091796,
     "end_time": "2024-05-03T08:13:20.614269",
     "exception": false,
     "start_time": "2024-05-03T08:13:20.522473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "vectorize=CountVectorizer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "558efc20",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:20.854864Z",
     "iopub.status.busy": "2024-05-03T08:13:20.816632Z",
     "iopub.status.idle": "2024-05-03T08:13:32.270531Z",
     "shell.execute_reply": "2024-05-03T08:13:32.269912Z",
     "shell.execute_reply.started": "2024-05-03T07:04:02.215120Z"
    },
    "papermill": {
     "duration": 11.570853,
     "end_time": "2024-05-03T08:13:32.270663",
     "exception": false,
     "start_time": "2024-05-03T08:13:20.699810",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "count_matrix = vectorize.fit_transform(df_nl1['teks_clean'])\n",
    "count_array = count_matrix.toarray()\n",
    "data_final = pd.DataFrame(data=count_array,columns = vectorize.get_feature_names())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "ae2d69c7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:32.450184Z",
     "iopub.status.busy": "2024-05-03T08:13:32.449127Z",
     "iopub.status.idle": "2024-05-03T08:13:39.762650Z",
     "shell.execute_reply": "2024-05-03T08:13:39.761961Z",
     "shell.execute_reply.started": "2024-05-03T07:04:13.543994Z"
    },
    "papermill": {
     "duration": 7.405812,
     "end_time": "2024-05-03T08:13:39.762791",
     "exception": false,
     "start_time": "2024-05-03T08:13:32.356979",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_final = pd.concat([data_final,df_cat4],axis=1,join='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "7012af1e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:39.960515Z",
     "iopub.status.busy": "2024-05-03T08:13:39.959484Z",
     "iopub.status.idle": "2024-05-03T08:13:39.989378Z",
     "shell.execute_reply": "2024-05-03T08:13:39.989863Z",
     "shell.execute_reply.started": "2024-05-03T07:04:20.801843Z"
    },
    "papermill": {
     "duration": 0.135161,
     "end_time": "2024-05-03T08:13:39.990061",
     "exception": false,
     "start_time": "2024-05-03T08:13:39.854900",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>00</th>\n",
       "      <th>000</th>\n",
       "      <th>0000</th>\n",
       "      <th>00000</th>\n",
       "      <th>000000</th>\n",
       "      <th>0000000</th>\n",
       "      <th>0000000000000</th>\n",
       "      <th>00000000000000</th>\n",
       "      <th>000000000000000</th>\n",
       "      <th>00000000000221</th>\n",
       "      <th>...</th>\n",
       "      <th>dengan dihadiri oleh para Hakim Anggota dan Panitera Pengganti, serta dihadiri oleh Terbanding dan Pemohon Banding.</th>\n",
       "      <th>dengan dihadiri oleh para Hakim Anggota, Panitera Pengganti, serta dihadiri oleh Terbanding dan Pemohon Banding.</th>\n",
       "      <th>lr. Hendi Budi Santosa, M.Eng.</th>\n",
       "      <th>penetapan Ketua dalam hal surat pernyataan pencabutan diajukan sebelum sidang dilaksanakan;</th>\n",
       "      <th>penetapan Ketua dalam hal surat pernyataan pencabutan diajukan sebelum sidang;</th>\n",
       "      <th>titip olah</th>\n",
       "      <th>untuk selanjutnya disebut sebagai Termohon Peninjauan Kembali dahulu Pemohon Banding;</th>\n",
       "      <th>Tri Hidayat Wahyudi,Ak.,M.B.A</th>\n",
       "      <th>Tri Hidayat Wahyudi,Ak.,M.B.A</th>\n",
       "      <th>hasil_putusan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4596</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4597</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4598</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4599</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4600</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4601 rows × 99778 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      00  000  0000  00000  000000  0000000  0000000000000  00000000000000  \\\n",
       "0      0    4     0      0       0        0              0               0   \n",
       "1      0    0     0      0       0        0              0               0   \n",
       "2      0    0     0      0       0        0              0               0   \n",
       "3      0    0     0      0       0        0              0               0   \n",
       "4      0    0     0      0       0        0              0               0   \n",
       "...   ..  ...   ...    ...     ...      ...            ...             ...   \n",
       "4596   0    0     0      0       0        0              0               0   \n",
       "4597   0    0     0      0       0        0              0               0   \n",
       "4598   0    0     0      0       0        0              0               0   \n",
       "4599   0    0     0      0       0        0              0               0   \n",
       "4600   0    0     0      0       0        0              0               0   \n",
       "\n",
       "      000000000000000  00000000000221  ...  \\\n",
       "0                   0               0  ...   \n",
       "1                   0               0  ...   \n",
       "2                   0               0  ...   \n",
       "3                   0               0  ...   \n",
       "4                   0               0  ...   \n",
       "...               ...             ...  ...   \n",
       "4596                0               0  ...   \n",
       "4597                0               0  ...   \n",
       "4598                0               0  ...   \n",
       "4599                0               0  ...   \n",
       "4600                0               0  ...   \n",
       "\n",
       "      dengan dihadiri oleh para Hakim Anggota dan Panitera Pengganti, serta dihadiri oleh Terbanding dan Pemohon Banding.  \\\n",
       "0                                                     0                                                                     \n",
       "1                                                     0                                                                     \n",
       "2                                                     0                                                                     \n",
       "3                                                     0                                                                     \n",
       "4                                                     0                                                                     \n",
       "...                                                 ...                                                                     \n",
       "4596                                                  0                                                                     \n",
       "4597                                                  0                                                                     \n",
       "4598                                                  0                                                                     \n",
       "4599                                                  0                                                                     \n",
       "4600                                                  0                                                                     \n",
       "\n",
       "      dengan dihadiri oleh para Hakim Anggota, Panitera Pengganti, serta dihadiri oleh Terbanding dan Pemohon Banding.  \\\n",
       "0                                                     0                                                                  \n",
       "1                                                     0                                                                  \n",
       "2                                                     0                                                                  \n",
       "3                                                     0                                                                  \n",
       "4                                                     0                                                                  \n",
       "...                                                 ...                                                                  \n",
       "4596                                                  0                                                                  \n",
       "4597                                                  0                                                                  \n",
       "4598                                                  0                                                                  \n",
       "4599                                                  0                                                                  \n",
       "4600                                                  0                                                                  \n",
       "\n",
       "      lr. Hendi Budi Santosa, M.Eng.  \\\n",
       "0                                  0   \n",
       "1                                  0   \n",
       "2                                  0   \n",
       "3                                  0   \n",
       "4                                  0   \n",
       "...                              ...   \n",
       "4596                               0   \n",
       "4597                               0   \n",
       "4598                               0   \n",
       "4599                               0   \n",
       "4600                               0   \n",
       "\n",
       "      penetapan Ketua dalam hal surat pernyataan pencabutan diajukan sebelum sidang dilaksanakan;  \\\n",
       "0                                                     0                                             \n",
       "1                                                     0                                             \n",
       "2                                                     0                                             \n",
       "3                                                     0                                             \n",
       "4                                                     0                                             \n",
       "...                                                 ...                                             \n",
       "4596                                                  0                                             \n",
       "4597                                                  0                                             \n",
       "4598                                                  0                                             \n",
       "4599                                                  0                                             \n",
       "4600                                                  0                                             \n",
       "\n",
       "      penetapan Ketua dalam hal surat pernyataan pencabutan diajukan sebelum sidang;  \\\n",
       "0                                                     0                                \n",
       "1                                                     0                                \n",
       "2                                                     0                                \n",
       "3                                                     0                                \n",
       "4                                                     0                                \n",
       "...                                                 ...                                \n",
       "4596                                                  0                                \n",
       "4597                                                  0                                \n",
       "4598                                                  0                                \n",
       "4599                                                  0                                \n",
       "4600                                                  0                                \n",
       "\n",
       "      titip olah  \\\n",
       "0              0   \n",
       "1              0   \n",
       "2              0   \n",
       "3              0   \n",
       "4              0   \n",
       "...          ...   \n",
       "4596           0   \n",
       "4597           0   \n",
       "4598           0   \n",
       "4599           0   \n",
       "4600           0   \n",
       "\n",
       "      untuk selanjutnya disebut sebagai Termohon Peninjauan Kembali dahulu Pemohon Banding;  \\\n",
       "0                                                     0                                       \n",
       "1                                                     0                                       \n",
       "2                                                     0                                       \n",
       "3                                                     0                                       \n",
       "4                                                     0                                       \n",
       "...                                                 ...                                       \n",
       "4596                                                  0                                       \n",
       "4597                                                  0                                       \n",
       "4598                                                  0                                       \n",
       "4599                                                  0                                       \n",
       "4600                                                  0                                       \n",
       "\n",
       "        Tri Hidayat Wahyudi,Ak.,M.B.A     Tri Hidayat Wahyudi,Ak.,M.B.A    \\\n",
       "0                                    0                                  0   \n",
       "1                                    0                                  0   \n",
       "2                                    0                                  0   \n",
       "3                                    0                                  0   \n",
       "4                                    0                                  0   \n",
       "...                                ...                                ...   \n",
       "4596                                 0                                  0   \n",
       "4597                                 0                                  0   \n",
       "4598                                 0                                  0   \n",
       "4599                                 0                                  0   \n",
       "4600                                 0                                  0   \n",
       "\n",
       "      hasil_putusan  \n",
       "0                 5  \n",
       "1                 6  \n",
       "2                 4  \n",
       "3                 6  \n",
       "4                 6  \n",
       "...             ...  \n",
       "4596              6  \n",
       "4597              6  \n",
       "4598              6  \n",
       "4599              4  \n",
       "4600              6  \n",
       "\n",
       "[4601 rows x 99778 columns]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "bef1eb9f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:40.196839Z",
     "iopub.status.busy": "2024-05-03T08:13:40.195249Z",
     "iopub.status.idle": "2024-05-03T08:13:46.247899Z",
     "shell.execute_reply": "2024-05-03T08:13:46.247290Z",
     "shell.execute_reply.started": "2024-05-03T07:04:20.843211Z"
    },
    "papermill": {
     "duration": 6.155979,
     "end_time": "2024-05-03T08:13:46.248077",
     "exception": false,
     "start_time": "2024-05-03T08:13:40.092098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(data_final.drop(columns=['hasil_putusan']),\n",
    "                                                    data_final['hasil_putusan'], \n",
    "                                                    test_size=0.3,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "62c5fe19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:13:46.429631Z",
     "iopub.status.busy": "2024-05-03T08:13:46.427262Z",
     "iopub.status.idle": "2024-05-03T08:14:01.992447Z",
     "shell.execute_reply": "2024-05-03T08:14:01.991843Z",
     "shell.execute_reply.started": "2024-05-03T07:04:26.922226Z"
    },
    "papermill": {
     "duration": 15.65624,
     "end_time": "2024-05-03T08:14:01.992579",
     "exception": false,
     "start_time": "2024-05-03T08:13:46.336339",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "data_final = scaler.fit_transform(data_final)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe131290",
   "metadata": {
    "papermill": {
     "duration": 0.087485,
     "end_time": "2024-05-03T08:14:02.172219",
     "exception": false,
     "start_time": "2024-05-03T08:14:02.084734",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 10. Performing LDA and hyper-parameter tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "c0f67315",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:14:02.351881Z",
     "iopub.status.busy": "2024-05-03T08:14:02.351267Z",
     "iopub.status.idle": "2024-05-03T08:23:14.047114Z",
     "shell.execute_reply": "2024-05-03T08:23:14.048595Z",
     "shell.execute_reply.started": "2024-05-03T07:04:42.599504Z"
    },
    "papermill": {
     "duration": 551.789362,
     "end_time": "2024-05-03T08:23:14.048926",
     "exception": false,
     "start_time": "2024-05-03T08:14:02.259564",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.decomposition import LatentDirichletAllocation\n",
    "lda = LatentDirichletAllocation(n_components=200, random_state=0)\n",
    "lda_data = lda.fit_transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "3e7bdc02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:23:14.294353Z",
     "iopub.status.busy": "2024-05-03T08:23:14.293423Z",
     "iopub.status.idle": "2024-05-03T08:23:14.295938Z",
     "shell.execute_reply": "2024-05-03T08:23:14.295442Z",
     "shell.execute_reply.started": "2024-05-03T07:13:35.898844Z"
    },
    "papermill": {
     "duration": 0.096436,
     "end_time": "2024-05-03T08:23:14.296106",
     "exception": false,
     "start_time": "2024-05-03T08:23:14.199670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lda_data_train = pd.DataFrame(data=lda_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "a858dd19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T08:23:14.477231Z",
     "iopub.status.busy": "2024-05-03T08:23:14.476596Z",
     "iopub.status.idle": "2024-05-03T08:23:31.451488Z",
     "shell.execute_reply": "2024-05-03T08:23:31.452613Z",
     "shell.execute_reply.started": "2024-05-03T07:13:35.907041Z"
    },
    "papermill": {
     "duration": 17.068219,
     "end_time": "2024-05-03T08:23:31.452953",
     "exception": false,
     "start_time": "2024-05-03T08:23:14.384734",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "lda_data_test = pd.DataFrame(data=lda.transform(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "d8bb5ca7",
   "metadata": {
    "_kg_hide-input": true,
    "execution": {
     "iopub.execute_input": "2024-05-03T08:23:31.724086Z",
     "iopub.status.busy": "2024-05-03T08:23:31.723167Z",
     "iopub.status.idle": "2024-05-03T08:23:31.725391Z",
     "shell.execute_reply": "2024-05-03T08:23:31.725820Z",
     "shell.execute_reply.started": "2024-05-03T07:13:51.396987Z"
    },
    "papermill": {
     "duration": 0.099171,
     "end_time": "2024-05-03T08:23:31.725982",
     "exception": false,
     "start_time": "2024-05-03T08:23:31.626811",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create the parameter grid based on the results of random search \n",
    "from sklearn.model_selection import GridSearchCV\n",
    "param_grid = {\n",
    "    'max_depth': [8,10,12,14],\n",
    "    'max_features': [60,70,80,90,100],\n",
    "    'min_samples_leaf': [2, 3, 4],\n",
    "    'n_estimators': [100, 200, 300]\n",
    "}# Create a based model\n",
    "rf = RandomForestClassifier()# Instantiate the grid search model\n",
    "grid_search = GridSearchCV(estimator = rf, param_grid = param_grid, \n",
    "                          cv = 3, n_jobs = -1, verbose = 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "83345456",
   "metadata": {
    "_kg_hide-input": true,
    "_kg_hide-output": true,
    "execution": {
     "iopub.execute_input": "2024-05-03T08:23:31.926228Z",
     "iopub.status.busy": "2024-05-03T08:23:31.925579Z",
     "iopub.status.idle": "2024-05-03T09:05:07.237793Z",
     "shell.execute_reply": "2024-05-03T09:05:07.237202Z",
     "shell.execute_reply.started": "2024-05-03T07:13:51.407898Z"
    },
    "papermill": {
     "duration": 2495.413796,
     "end_time": "2024-05-03T09:05:07.237942",
     "exception": false,
     "start_time": "2024-05-03T08:23:31.824146",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 180 candidates, totalling 540 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:  1.6min\n",
      "[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:  9.3min\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=100, total=   5.7s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=200, total=  11.5s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=100, total=   5.5s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=100, total=   5.6s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=200, total=  11.4s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=300, total=  17.0s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=200, total=  11.6s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=100, total=   6.5s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=100, total=   6.4s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=200, total=  13.1s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=100, total=   6.5s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=100, total=   6.4s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=200, total=  12.7s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=300, total=  19.5s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=200, total=  12.4s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=100, total=   7.4s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=100, total=   7.4s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=200, total=  14.6s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=300, total=  22.4s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=200, total=  14.4s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=100, total=   7.7s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=100, total=   7.3s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=200, total=  14.5s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=300, total=  22.1s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=200, total=  16.3s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=100, total=   8.4s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=100, total=   8.1s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=200, total=  16.3s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=300, total=  24.6s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=200, total=  16.3s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=100, total=   9.0s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=100, total=   9.1s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=200, total=  18.5s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=300, total=  27.4s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=200, total=  17.8s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=100, total=   9.3s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=100, total=   8.8s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=200, total=  17.6s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=300, total=  27.0s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=200, total=  13.2s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=100, total=   6.6s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=100, total=   6.5s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=200, total=  12.9s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=300, total=  19.2s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=300, total=  19.2s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=100, total=   7.6s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=200, total=  15.2s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=100, total=   7.8s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=100, total=   7.6s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=200, total=  14.9s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=300, total=  23.0s[CV] max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=200, total=  11.4s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=300, total=  17.1s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=200, total=  11.5s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=100, total=   5.5s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=100, total=   5.6s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=200, total=  11.7s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=300, total=  16.6s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=200, total=  12.8s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=300, total=  19.3s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=200, total=  12.5s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=100, total=   6.9s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=100, total=   6.4s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=200, total=  12.4s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=300, total=  19.2s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=200, total=  14.4s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=100, total=   7.8s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=100, total=   7.3s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=200, total=  14.3s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=300, total=  22.4s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=200, total=  14.4s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=100, total=   8.8s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=100, total=   8.1s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=200, total=  16.2s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=300, total=  25.1s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=300, total=  24.7s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=100, total=   8.3s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=200, total=  16.6s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=300, total=  24.0s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=200, total=  18.1s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=100, total=   8.9s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=100, total=   9.2s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=200, total=  18.0s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=300, total=  27.1s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=200, total=  18.0s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=100, total=   6.6s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=100, total=   6.5s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=200, total=  13.1s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=300, total=  20.3s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=200, total=  12.8s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=300, total=  20.0s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=200, total=  12.7s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=100, total=   8.1s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=100, total=   7.7s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=200, total=  15.2s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=300, total=  23.4s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=300, total=  22.6s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=100, total=   7.3s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=200, total=  15.4s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=300, total=  22.1s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=300, total=  26.2s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=100, total=   8.4s[CV] max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=100, total=   5.6s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=300, total=  17.1s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=100, total=   5.6s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=200, total=  11.7s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=300, total=  16.8s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=300, total=  17.0s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=100, total=   6.5s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=200, total=  12.9s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=300, total=  19.6s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=300, total=  19.5s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=100, total=   6.3s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=200, total=  12.6s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=300, total=  19.5s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=300, total=  22.1s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=100, total=   7.2s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=200, total=  14.5s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=300, total=  21.9s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=300, total=  22.0s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=100, total=   8.1s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=200, total=  16.3s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=300, total=  24.9s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=200, total=  16.8s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=100, total=   8.0s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=100, total=   8.3s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=200, total=  16.7s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=300, total=  24.2s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=300, total=  27.5s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=100, total=   9.5s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=200, total=  18.0s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=300, total=  26.8s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=300, total=  26.7s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=100, total=   6.6s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=200, total=  13.2s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=300, total=  19.9s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=200, total=  13.4s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=100, total=   6.5s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=100, total=   6.5s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=200, total=  13.0s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=300, total=  19.6s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=200, total=  15.2s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=300, total=  22.7s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=200, total=  15.3s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=100, total=   7.4s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=100, total=   7.4s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=200, total=  14.9s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=300, total=  22.3s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=200, total=  17.5s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=100, total=   8.5s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=100, total=   8.5s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=200, total=  17.7s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=300, total=  25.7s[CV] max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=100, total=   5.6s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=200, total=  11.6s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=2, n_estimators=300, total=  17.1s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=3, n_estimators=300, total=  16.8s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=100, total=   5.6s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=200, total=  11.4s\n",
      "[CV] max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=60, min_samples_leaf=4, n_estimators=300, total=  16.4s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=2, n_estimators=300, total=  19.8s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=100, total=   6.4s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=200, total=  12.6s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=3, n_estimators=300, total=  19.2s\n",
      "[CV] max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=70, min_samples_leaf=4, n_estimators=300, total=  19.4s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=100, total=   7.2s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=200, total=  14.5s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=2, n_estimators=300, total=  21.9s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=3, n_estimators=300, total=  22.3s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=100, total=   7.2s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=200, total=  14.4s\n",
      "[CV] max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=80, min_samples_leaf=4, n_estimators=300, total=  22.2s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=2, n_estimators=300, total=  25.1s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=100, total=   8.0s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=200, total=  16.7s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=3, n_estimators=300, total=  24.4s\n",
      "[CV] max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=90, min_samples_leaf=4, n_estimators=300, total=  24.5s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=100, total=   8.9s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=200, total=  18.5s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=2, n_estimators=300, total=  27.5s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=3, n_estimators=300, total=  27.1s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=100, total=   8.8s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=200, total=  17.8s\n",
      "[CV] max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=8, max_features=100, min_samples_leaf=4, n_estimators=300, total=  26.7s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=2, n_estimators=300, total=  20.1s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=100, total=   6.4s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=3, n_estimators=300, total=  19.6s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=100, total=   6.5s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=200, total=  12.9s\n",
      "[CV] max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=60, min_samples_leaf=4, n_estimators=300, total=  19.4s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=2, n_estimators=300, total=  23.3s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=100, total=   7.4s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=200, total=  15.0s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=3, n_estimators=300, total=  22.7s\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=300, total=  22.7s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=100, total=   8.7s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=200, total=  17.3s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=300, total=  25.8s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=200, total=  17.4s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=100, total=   8.3s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=100, total=   8.7s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=200, total=  17.0s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=300, total=  25.7s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=300, total=  29.2s"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done 357 tasks      | elapsed: 24.3min\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[CV] max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=70, min_samples_leaf=4, n_estimators=200, total=  15.2s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=100, total=   8.7s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=100, total=   8.6s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=200, total=  17.5s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=2, n_estimators=300, total=  25.5s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=300, total=  25.8s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=100, total=   8.5s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=200, total=  16.9s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=300, total=  25.7s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=200, total=  19.0s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=100, total=   9.7s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=100, total=   9.5s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=200, total=  19.2s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=300, total=  28.8s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=200, total=  19.3s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=100, total=  10.6s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=100, total=  10.9s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=200, total=  21.5s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=300, total=  32.3s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=300, total=  31.8s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=100, total=  10.5s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=200, total=  20.7s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=300, total=  30.9s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=200, total=  14.8s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=100, total=   7.3s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=100, total=   7.2s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=200, total=  14.7s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=300, total=  21.6s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=300, total=  21.6s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=100, total=   8.7s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=200, total=  17.7s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=300, total=  27.2s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=300, total=  26.2s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=100, total=   8.4s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=200, total=  16.7s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=300, total=  25.4s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=200, total=  19.7s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=100, total=   9.6s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=100, total=   9.6s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=200, total=  19.6s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=300, total=  29.3s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=200, total=  19.0s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=100, total=  11.0s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=100, total=  10.9s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=200, total=  22.0s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=300, total=  33.0s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=200, total=  21.5s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=100, total=  10.6s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=100, total=  10.7s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=200, total=  21.7s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=300 \n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=200, total=  17.2s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=3, n_estimators=300, total=  25.8s\n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=300, total=  24.9s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=100, total=  10.1s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=200, total=  19.2s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=300, total=  29.4s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=200, total=  19.1s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=100, total=   9.3s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=100, total=   9.4s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=200, total=  19.6s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=300, total=  28.8s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=200, total=  21.6s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=100, total=  10.5s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=100, total=  10.7s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=200, total=  21.7s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=300, total=  32.0s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=200, total=  20.9s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=100, total=   7.4s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=100, total=   7.3s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=200, total=  15.3s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=300, total=  22.2s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=200, total=  14.8s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=300, total=  21.9s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=200, total=  14.9s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=100, total=   8.6s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=100, total=   8.5s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=200, total=  17.9s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=300, total=  26.8s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=200, total=  17.2s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=100, total=   8.9s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=100, total=   8.5s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=200, total=  16.6s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=300, total=  26.1s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=300, total=  29.8s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=100, total=   9.4s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=200, total=  19.5s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=300, total=  29.1s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=300, total=  28.8s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=100, total=  10.9s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=200, total=  22.2s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=300, total=  33.7s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=300, total=  32.9s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=100, total=  10.5s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=200, total=  21.6s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=300, total=  32.3s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=300, total=  37.0s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=100, total=  11.9s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=200, total=  24.9s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=300, total=  36.0s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=300, total=  36.2s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=100 \n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=100, total=   9.4s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=200, total=  19.4s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=300, total=  28.2s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=300, total=  28.6s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=100, total=  11.0s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=200, total=  21.5s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=300, total=  32.7s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=200, total=  21.3s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=100, total=  10.4s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=100, total=  10.9s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=200, total=  20.6s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=300, total=  31.8s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=300, total=  22.8s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=100, total=   7.1s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=200, total=  15.0s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=100, total=   7.3s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=100, total=   7.1s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=200, total=  14.8s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=300, total=  21.6s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=200, total=  17.8s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=100, total=   8.9s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=100, total=   9.1s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=200, total=  17.8s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=300, total=  26.3s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=200, total=  16.6s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=100, total=  10.4s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=100, total=  10.0s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=200, total=  19.9s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=300, total=  29.7s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=200, total=  19.0s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=100, total=   9.4s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=100, total=   9.8s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=200, total=  18.7s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=300, total=  28.8s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=200, total=  22.1s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=100, total=  10.8s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=100, total=  11.4s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=200, total=  21.5s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=300, total=  32.7s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=200, total=  21.8s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=100, total=  12.1s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=100, total=  13.0s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=200, total=  24.4s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=300, total=  37.4s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=300, total=  36.3s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=100, total=  11.6s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=200, total=  23.7s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=300, total=  36.4s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=300, total=  24.9s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=100, total=   8.0s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=300 \n",
      "[CV] max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=80, min_samples_leaf=4, n_estimators=200, total=  16.6s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=100, total=   9.5s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=100, total=  10.3s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=200, total=  19.3s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=2, n_estimators=300, total=  29.3s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=3, n_estimators=300, total=  28.9s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=100, total=   9.6s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=200, total=  19.5s\n",
      "[CV] max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=90, min_samples_leaf=4, n_estimators=300, total=  28.8s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=2, n_estimators=300, total=  32.7s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=100, total=  10.5s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=200, total=  21.3s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=3, n_estimators=300, total=  31.6s\n",
      "[CV] max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=10, max_features=100, min_samples_leaf=4, n_estimators=300, total=  31.6s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=100, total=   7.4s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=200, total=  15.1s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=2, n_estimators=300, total=  21.9s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=3, n_estimators=300, total=  22.5s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=100, total=   7.1s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=200, total=  15.1s\n",
      "[CV] max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=60, min_samples_leaf=4, n_estimators=300, total=  21.3s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=2, n_estimators=300, total=  27.1s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=100, total=   9.4s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=200, total=  17.7s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=3, n_estimators=300, total=  26.0s\n",
      "[CV] max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=70, min_samples_leaf=4, n_estimators=300, total=  25.6s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=100, total=   9.9s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=200, total=  20.5s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=2, n_estimators=300, total=  29.6s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=3, n_estimators=300, total=  29.4s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=100, total=   9.6s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=200, total=  19.1s\n",
      "[CV] max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=80, min_samples_leaf=4, n_estimators=300, total=  28.9s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=2, n_estimators=300, total=  33.5s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=100, total=  11.3s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=200, total=  21.6s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=3, n_estimators=300, total=  32.5s\n",
      "[CV] max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=300, total=  32.5s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=100, total=  12.7s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=200, total=  24.9s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=300, total=  36.5s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=200, total=  23.9s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=100, total=  12.2s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=100, total=  11.8s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=200, total=  24.1s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=300, total=  35.5s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=200, total=  16.5s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=100, total=   7.9s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=100, total=   8.2s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=200, total=  16.6s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=100 "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done 540 out of 540 | elapsed: 41.2min finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'max_depth': 14,\n",
       " 'max_features': 60,\n",
       " 'min_samples_leaf': 2,\n",
       " 'n_estimators': 300}"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.fit(lda_data_train, y_train)\n",
    "grid_search.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "c5961fec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:05:07.434111Z",
     "iopub.status.busy": "2024-05-03T09:05:07.433466Z",
     "iopub.status.idle": "2024-05-03T09:05:07.436286Z",
     "shell.execute_reply": "2024-05-03T09:05:07.435632Z",
     "shell.execute_reply.started": "2024-05-03T07:54:50.623586Z"
    },
    "papermill": {
     "duration": 0.102021,
     "end_time": "2024-05-03T09:05:07.436418",
     "exception": false,
     "start_time": "2024-05-03T09:05:07.334397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "rand=RandomForestClassifier(max_depth= 8, max_features = 100, min_samples_leaf = 2, n_estimators = 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "8c2efeb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:05:07.634122Z",
     "iopub.status.busy": "2024-05-03T09:05:07.633428Z",
     "iopub.status.idle": "2024-05-03T09:05:25.629727Z",
     "shell.execute_reply": "2024-05-03T09:05:25.629214Z",
     "shell.execute_reply.started": "2024-05-03T07:54:50.629104Z"
    },
    "papermill": {
     "duration": 18.09766,
     "end_time": "2024-05-03T09:05:25.629860",
     "exception": false,
     "start_time": "2024-05-03T09:05:07.532200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(max_depth=8, max_features=100, min_samples_leaf=2,\n",
       "                       n_estimators=200)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rand.fit(lda_data_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "07fd9ec6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:05:25.826580Z",
     "iopub.status.busy": "2024-05-03T09:05:25.825935Z",
     "iopub.status.idle": "2024-05-03T09:05:25.919724Z",
     "shell.execute_reply": "2024-05-03T09:05:25.919221Z",
     "shell.execute_reply.started": "2024-05-03T07:55:08.551613Z"
    },
    "papermill": {
     "duration": 0.19495,
     "end_time": "2024-05-03T09:05:25.919866",
     "exception": false,
     "start_time": "2024-05-03T09:05:25.724916",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6953416149068323"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rand.score(lda_data_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "6c30cbff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:05:26.147334Z",
     "iopub.status.busy": "2024-05-03T09:05:26.146689Z",
     "iopub.status.idle": "2024-05-03T09:05:26.201705Z",
     "shell.execute_reply": "2024-05-03T09:05:26.201209Z",
     "shell.execute_reply.started": "2024-05-03T07:55:08.646018Z"
    },
    "papermill": {
     "duration": 0.171075,
     "end_time": "2024-05-03T09:05:26.201840",
     "exception": false,
     "start_time": "2024-05-03T09:05:26.030765",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6690803765387401"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rand.score(lda_data_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "f2aa2293",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:05:26.400076Z",
     "iopub.status.busy": "2024-05-03T09:05:26.399260Z",
     "iopub.status.idle": "2024-05-03T09:05:26.401821Z",
     "shell.execute_reply": "2024-05-03T09:05:26.401287Z",
     "shell.execute_reply.started": "2024-05-03T07:55:08.707701Z"
    },
    "papermill": {
     "duration": 0.103021,
     "end_time": "2024-05-03T09:05:26.401962",
     "exception": false,
     "start_time": "2024-05-03T09:05:26.298941",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "647ecb18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:05:26.608105Z",
     "iopub.status.busy": "2024-05-03T09:05:26.607469Z",
     "iopub.status.idle": "2024-05-03T09:05:26.663239Z",
     "shell.execute_reply": "2024-05-03T09:05:26.663691Z",
     "shell.execute_reply.started": "2024-05-03T07:55:08.712826Z"
    },
    "papermill": {
     "duration": 0.160909,
     "end_time": "2024-05-03T09:05:26.663843",
     "exception": false,
     "start_time": "2024-05-03T09:05:26.502934",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6204355142238289"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred1 = rand.predict(lda_data_test)\n",
    "f1_score(y_test, y_pred1, average='weighted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "55724536",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:05:26.861542Z",
     "iopub.status.busy": "2024-05-03T09:05:26.860761Z",
     "iopub.status.idle": "2024-05-03T09:05:54.562638Z",
     "shell.execute_reply": "2024-05-03T09:05:54.563135Z",
     "shell.execute_reply.started": "2024-05-03T07:56:02.243105Z"
    },
    "papermill": {
     "duration": 27.804291,
     "end_time": "2024-05-03T09:05:54.563635",
     "exception": false,
     "start_time": "2024-05-03T09:05:26.759344",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/xgboost/sklearn.py:1224: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].\n",
      "  warnings.warn(label_encoder_deprecation_msg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[09:05:29] WARNING: ../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.\n",
      "Accuracy: 89.07%\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.6204355142238289"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = XGBClassifier()\n",
    "model.fit(lda_data_train, y_train)\n",
    "y_pred = model.predict(lda_data_test)\n",
    "predictions = [round(value) for value in y_pred]\n",
    "# evaluate predictions\n",
    "accuracy = accuracy_score(y_test, predictions)\n",
    "print(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n",
    "f1_score(y_test, y_pred1, average='weighted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "59c633bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:05:54.761945Z",
     "iopub.status.busy": "2024-05-03T09:05:54.761352Z",
     "iopub.status.idle": "2024-05-03T09:05:54.764380Z",
     "shell.execute_reply": "2024-05-03T09:05:54.763752Z",
     "shell.execute_reply.started": "2024-05-03T07:56:36.314735Z"
    },
    "papermill": {
     "duration": 0.103382,
     "end_time": "2024-05-03T09:05:54.764509",
     "exception": false,
     "start_time": "2024-05-03T09:05:54.661127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "knn=KNeighborsClassifier(n_neighbors=7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "8e978d1f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:05:54.965916Z",
     "iopub.status.busy": "2024-05-03T09:05:54.965268Z",
     "iopub.status.idle": "2024-05-03T09:05:55.015889Z",
     "shell.execute_reply": "2024-05-03T09:05:55.016339Z",
     "shell.execute_reply.started": "2024-05-03T07:56:39.010856Z"
    },
    "papermill": {
     "duration": 0.155671,
     "end_time": "2024-05-03T09:05:55.016505",
     "exception": false,
     "start_time": "2024-05-03T09:05:54.860834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=7)"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.fit(lda_data_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "c9bbff53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:05:55.225563Z",
     "iopub.status.busy": "2024-05-03T09:05:55.224954Z",
     "iopub.status.idle": "2024-05-03T09:05:57.064804Z",
     "shell.execute_reply": "2024-05-03T09:05:57.064248Z",
     "shell.execute_reply.started": "2024-05-03T07:56:42.517961Z"
    },
    "papermill": {
     "duration": 1.947322,
     "end_time": "2024-05-03T09:05:57.064950",
     "exception": false,
     "start_time": "2024-05-03T09:05:55.117628",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8586956521739131"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.score(lda_data_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "8f250512",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:05:57.271057Z",
     "iopub.status.busy": "2024-05-03T09:05:57.270434Z",
     "iopub.status.idle": "2024-05-03T09:05:58.147096Z",
     "shell.execute_reply": "2024-05-03T09:05:58.146455Z",
     "shell.execute_reply.started": "2024-05-03T07:56:47.791620Z"
    },
    "papermill": {
     "duration": 0.982704,
     "end_time": "2024-05-03T09:05:58.147234",
     "exception": false,
     "start_time": "2024-05-03T09:05:57.164530",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8204199855177408"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.score(lda_data_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce688a9c",
   "metadata": {
    "papermill": {
     "duration": 0.098106,
     "end_time": "2024-05-03T09:05:58.345664",
     "exception": false,
     "start_time": "2024-05-03T09:05:58.247558",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 11. Deploying a LSTM Model to achieve higher accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "a8e64416",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:05:58.547351Z",
     "iopub.status.busy": "2024-05-03T09:05:58.546658Z",
     "iopub.status.idle": "2024-05-03T09:06:03.314698Z",
     "shell.execute_reply": "2024-05-03T09:06:03.314126Z",
     "shell.execute_reply.started": "2024-05-03T07:56:53.382827Z"
    },
    "papermill": {
     "duration": 4.871264,
     "end_time": "2024-05-03T09:06:03.314846",
     "exception": false,
     "start_time": "2024-05-03T09:05:58.443582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from keras.preprocessing import sequence\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Dropout, Embedding, LSTM, Bidirectional"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "4322c671",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:06:03.515783Z",
     "iopub.status.busy": "2024-05-03T09:06:03.515125Z",
     "iopub.status.idle": "2024-05-03T09:06:03.517801Z",
     "shell.execute_reply": "2024-05-03T09:06:03.517333Z",
     "shell.execute_reply.started": "2024-05-03T07:57:01.591233Z"
    },
    "papermill": {
     "duration": 0.104615,
     "end_time": "2024-05-03T09:06:03.517939",
     "exception": false,
     "start_time": "2024-05-03T09:06:03.413324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "n_unique_words = 10000 # cut texts after this number of words\n",
    "maxlen = 2000\n",
    "batch_size = 32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "e08a49d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-03T09:06:03.720240Z",
     "iopub.status.busy": "2024-05-03T09:06:03.719614Z",
     "iopub.status.idle": "2024-05-03T09:06:08.251023Z",
     "shell.execute_reply": "2024-05-03T09:06:08.250428Z",
     "shell.execute_reply.started": "2024-05-03T07:57:04.871474Z"
    },
    "papermill": {
     "duration": 4.634522,
     "end_time": "2024-05-03T09:06:08.251178",
     "exception": false,
     "start_time": "2024-05-03T09:06:03.616656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "model.add(Embedding(n_unique_words, 128, input_length=maxlen))\n",
    "model.add(LSTM(64))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "114a13e4",
   "metadata": {
    "_kg_hide-output": true,
    "execution": {
     "iopub.execute_input": "2024-05-03T09:06:08.451526Z",
     "iopub.status.busy": "2024-05-03T09:06:08.450854Z",
     "iopub.status.idle": "2024-05-03T09:09:42.840759Z",
     "shell.execute_reply": "2024-05-03T09:09:42.841251Z",
     "shell.execute_reply.started": "2024-05-03T07:57:12.420748Z"
    },
    "papermill": {
     "duration": 214.492503,
     "end_time": "2024-05-03T09:09:42.841458",
     "exception": false,
     "start_time": "2024-05-03T09:06:08.348955",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n",
      "101/101 [==============================] - 5s 17ms/step - loss: -39.2688 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 2/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -76.7804 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 3/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -102.7306 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 4/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -128.1218 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 5/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -152.8033 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 6/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -177.4827 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 7/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -201.8183 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 8/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -225.5880 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 9/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -250.0098 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 10/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -273.7617 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 11/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -298.1865 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 12/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -321.6393 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 13/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -345.2196 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 14/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -369.7777 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 15/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -393.3259 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 16/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -416.9225 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 17/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -441.3829 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 18/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -464.8563 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 19/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -488.8472 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 20/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -511.6185 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 21/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -536.9938 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 22/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -560.9382 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 23/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -584.5668 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 24/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -607.7821 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 25/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -632.4351 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 26/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -655.4849 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 27/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -677.8577 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 28/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -704.3599 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 29/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -728.3444 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 30/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -751.3478 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 31/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -774.1076 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 32/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -796.8664 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 33/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -822.3510 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 34/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -846.0468 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 35/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -867.0931 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 36/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -892.0543 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 37/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -917.8547 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 38/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -939.4388 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 39/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -961.3468 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 40/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -987.6151 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 41/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1010.2374 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 42/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1035.3719 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 43/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1057.5543 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 44/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1082.2367 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 45/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -1106.3323 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 46/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1125.5745 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 47/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1150.3158 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 48/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1175.0311 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 49/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1201.2834 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 50/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1223.6741 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 51/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1246.0875 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 52/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1272.1830 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 53/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1295.5767 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 54/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1319.3988 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 55/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1341.9077 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 56/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1367.3007 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 57/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1387.1221 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 58/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1412.6129 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 59/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1438.4169 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 60/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1460.4371 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 61/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1485.5276 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 62/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1509.2134 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 63/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1533.4913 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 64/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -1554.1548 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 65/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -1577.8374 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 66/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1604.1062 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 67/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1628.2797 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 68/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1650.7402 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 69/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1676.8579 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 70/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1697.9220 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 71/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1725.3887 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 72/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1744.5741 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 73/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1773.5176 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 74/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1793.0382 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 75/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1817.2294 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 76/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1838.5404 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 77/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1862.5896 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 78/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1887.5680 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 79/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1914.4924 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 80/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1931.8112 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 81/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1961.5565 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 82/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -1984.9108 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 83/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -2010.4595 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 84/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -2030.8243 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 85/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2056.4749 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 86/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2077.7556 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 87/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2101.5750 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 88/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2127.3696 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 89/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2148.8701 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 90/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2173.5332 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 91/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2195.4812 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 92/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2217.0740 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 93/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -2242.9292 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 94/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -2264.6733 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 95/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -2293.0054 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 96/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2312.2537 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 97/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2337.1516 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 98/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2363.4934 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 99/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2388.1099 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 100/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2410.4985 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 101/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2434.4116 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 102/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2459.4783 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 103/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -2484.3594 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 104/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -2506.1553 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 105/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2526.3682 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 106/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2555.3037 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 107/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2577.8242 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 108/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2604.9092 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 109/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2624.5925 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 110/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2648.8623 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 111/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2668.7766 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 112/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -2696.3948 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 113/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -2719.4602 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 114/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2739.3359 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 115/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2761.3618 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 116/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2791.2229 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 117/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2814.6104 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 118/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2837.7036 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 119/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2858.1199 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 120/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2885.6599 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 121/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2903.1528 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 122/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2933.1653 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 123/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2958.5513 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 124/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -2983.4285 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 125/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -2998.1128 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 126/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3026.3074 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 127/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3048.3584 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 128/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3076.5481 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 129/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3091.6968 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 130/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3122.1155 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 131/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3150.7104 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 132/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3168.6755 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 133/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3191.7764 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 134/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3208.5686 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 135/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3244.5110 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 136/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3264.6260 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 137/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3286.9822 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 138/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3319.5430 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 139/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3338.2104 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 140/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3355.3701 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 141/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -3385.7678 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 142/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -3408.3394 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 143/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -3429.8484 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 144/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3443.7085 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 145/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3483.5037 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 146/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3493.5684 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 147/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3533.0066 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 148/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3551.6116 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 149/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3575.1768 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 150/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -3598.4988 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 151/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3614.0457 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 152/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3638.7898 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 153/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3667.2205 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 154/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -3690.2292 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 155/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3716.2510 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 156/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3741.4097 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 157/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3768.0232 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 158/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3790.0457 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 159/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3813.3774 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 160/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3837.4453 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 161/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3852.2031 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 162/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3881.2681 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 163/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3908.5867 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 164/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3934.6274 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 165/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3945.7136 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 166/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -3971.1069 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 167/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4000.3040 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 168/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4023.9170 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 169/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -4046.1533 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 170/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4075.9429 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 171/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4092.4387 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 172/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -4119.6450 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 173/200\n",
      " 92/101 [==========================>...] - ETA: 0s - loss: -4132.1284 - accuracy: 0.0031\n",
      "[CV]  max_depth=12, max_features=90, min_samples_leaf=4, n_estimators=300, total=  32.6s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=2, n_estimators=200, total=  24.5s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=100, total=  12.1s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=100, total=  12.0s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=200, total=  24.5s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=3, n_estimators=300, total=  36.5s\n",
      "[CV] max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=12, max_features=100, min_samples_leaf=4, n_estimators=200, total=  24.2s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=100, total=   8.1s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=100, total=   8.5s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=200, total=  16.3s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=300, total=  24.5s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=200, total=  16.0s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=300, total=  24.3s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=200, total=  15.7s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=100, total=   9.6s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=100, total=   9.5s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=200, total=  19.2s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=300, total=  29.1s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=200, total=  18.3s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=100, total=   9.4s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=100, total=   9.2s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=200, total=  18.2s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=300, total=  28.1s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=200, total=  21.7s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=100, total=  10.4s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=100, total=  11.0s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=200, total=  21.0s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=300, total=  32.4s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=200, total=  20.9s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=100, total=  12.1s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=100, total=  12.4s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=200, total=  24.7s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=300, total=  37.0s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=200, total=  23.6s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=100, total=  12.1s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=100, total=  11.8s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=200, total=  24.0s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=300, total=  35.7s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=200, total=  27.0s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=100, total=  13.2s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=100, total=  13.8s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=200, total=  26.4s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=300, total=  40.1s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=200, total=  25.9s\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4141.2266 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 174/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4168.8740 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 175/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4190.5161 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 176/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4220.8013 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 177/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4236.1899 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 178/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4257.0024 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 179/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4275.3867 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 180/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4301.3052 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 181/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4324.4810 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 182/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4360.0449 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 183/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4380.4575 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 184/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -4395.0752 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 185/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4417.2891 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 186/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4453.6313 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 187/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4462.1299 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 188/200\n",
      " 12/101 [==>...........................] - ETA: 0s - loss: -4517.0210 - accuracy: 0.0000e+00\n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=100, total=   7.9s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=100, total=   7.9s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=200, total=  16.3s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=300, total=  23.6s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=200, total=  19.3s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=300, total=  28.6s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=300, total=  28.3s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=100, total=   9.1s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=200, total=  18.5s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=300, total=  27.1s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=300, total=  32.5s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=100, total=  11.1s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=200, total=  21.2s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=300, total=  32.0s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=300, total=  31.6s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=100, total=  12.7s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=200, total=  24.9s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=300, total=  36.3s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=300, total=  36.0s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=100, total=  11.6s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=200, total=  24.0s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=300, total=  35.0s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=300, total=  40.9s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=100, total=  13.7s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=200, total=  27.1s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=300, total=  39.9s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=300, total=  39.4s\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -4500.2642 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 189/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4514.2612 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 190/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4542.5068 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 191/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4569.4805 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 192/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4587.1958 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 193/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4609.0728 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 194/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4632.0908 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 195/200\n",
      " 82/101 [=======================>......] - ETA: 0s - loss: -4627.7705 - accuracy: 0.0034\n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=300, total=  24.1s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=100, total=   7.7s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=200, total=  16.1s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=300, total=  23.4s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=200, total=  19.7s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=100, total=   9.3s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=100, total=   9.6s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=200, total=  18.5s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=300, total=  28.5s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=200, total=  18.6s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=100, total=  10.8s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=100, total=  10.6s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=200, total=  22.2s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=300, total=  32.3s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=300, total=  32.1s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=100, total=  10.3s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=200, total=  21.6s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=300, total=  31.5s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=300, total=  36.5s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=100, total=  11.8s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=200, total=  24.9s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=300, total=  36.0s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=300, total=  35.5s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=100, total=  13.8s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=200, total=  27.4s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=300, total=  41.0s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=200, total=  26.6s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=100, total=  13.0s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=100, total=  13.4s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=200, total=  26.1s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=300, total=  27.4s\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -4658.8262 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 196/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4683.4824 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 197/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4712.9854 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 198/200\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -4727.3770 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 199/200\n",
      "101/101 [==============================] - 1s 10ms/step - loss: -4754.2480 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n",
      "Epoch 200/200\n",
      " 18/101 [====>.........................] - ETA: 0s - loss: -4580.9429 - accuracy: 0.0017    \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=100, total=   8.7s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=200, total=  16.3s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=2, n_estimators=300, total=  24.8s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=200, total=  16.5s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=3, n_estimators=300, total=  23.9s\n",
      "[CV] max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=60, min_samples_leaf=4, n_estimators=300, total=  23.8s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=100, total=   9.4s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=2, n_estimators=300, total=  29.1s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=100, total=   9.6s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=200, total=  18.5s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=3, n_estimators=300, total=  28.0s\n",
      "[CV] max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=70, min_samples_leaf=4, n_estimators=300, total=  27.9s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=100, total=  10.8s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=200, total=  22.2s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=2, n_estimators=300, total=  32.6s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=3, n_estimators=200, total=  21.6s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=100, total=  10.4s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=100, total=  10.5s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=200, total=  21.4s\n",
      "[CV] max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=80, min_samples_leaf=4, n_estimators=300, total=  31.9s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=2, n_estimators=200, total=  24.8s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=100, total=  11.9s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=100, total=  12.1s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=200, total=  24.5s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=3, n_estimators=300, total=  36.3s\n",
      "[CV] max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=90, min_samples_leaf=4, n_estimators=200, total=  23.1s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=100, total=  13.5s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=100, total=  14.1s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=200, total=  27.2s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=2, n_estimators=300, total=  40.4s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=3, n_estimators=300, total=  40.2s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=100 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=100, total=  13.0s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=200 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=200, total=  26.1s\n",
      "[CV] max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=300 \n",
      "[CV]  max_depth=14, max_features=100, min_samples_leaf=4, n_estimators=300, total=  31.8s\n",
      "101/101 [==============================] - 1s 11ms/step - loss: -4769.3589 - accuracy: 0.0028 - val_loss: 0.0000e+00 - val_accuracy: 0.0000e+00\n"
     ]
    }
   ],
   "source": [
    "history=model.fit(lda_data_train, y_train,\n",
    "           batch_size=batch_size,\n",
    "           epochs=200,\n",
    "           validation_data=[lda_data_test, y_test])"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 4882011,
     "sourceId": 8232046,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30153,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 3955.336479,
   "end_time": "2024-05-03T09:09:47.711456",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-03T08:03:52.374977",
   "version": "2.3.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
